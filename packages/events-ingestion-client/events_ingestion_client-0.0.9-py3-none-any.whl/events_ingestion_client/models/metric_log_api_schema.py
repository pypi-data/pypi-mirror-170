# coding: utf-8

"""
    Events Ingestion API

    The Observation platform's Events Ingestion API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: support@datakitchen.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricLogApiSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pipeline_name': 'str',
        'external_url': 'str',
        'event_timestamp': 'datetime',
        'metadata': 'object',
        'run_tag': 'str',
        'task_name': 'str',
        'metric_value': 'float',
        'metric_key': 'str'
    }

    attribute_map = {
        'pipeline_name': 'pipeline_name',
        'external_url': 'external_url',
        'event_timestamp': 'event_timestamp',
        'metadata': 'metadata',
        'run_tag': 'run_tag',
        'task_name': 'task_name',
        'metric_value': 'metric_value',
        'metric_key': 'metric_key'
    }

    def __init__(self, pipeline_name=None, external_url=None, event_timestamp=None, metadata=None, run_tag=None, task_name=None, metric_value=None, metric_key=None):  # noqa: E501
        """MetricLogApiSchema - a model defined in Swagger"""  # noqa: E501
        self._pipeline_name = None
        self._external_url = None
        self._event_timestamp = None
        self._metadata = None
        self._run_tag = None
        self._task_name = None
        self._metric_value = None
        self._metric_key = None
        self.discriminator = None
        self.pipeline_name = pipeline_name
        if external_url is not None:
            self.external_url = external_url
        if event_timestamp is not None:
            self.event_timestamp = event_timestamp
        if metadata is not None:
            self.metadata = metadata
        if run_tag is not None:
            self.run_tag = run_tag
        if task_name is not None:
            self.task_name = task_name
        self.metric_value = metric_value
        self.metric_key = metric_key

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this MetricLogApiSchema.  # noqa: E501

        Required. The target pipeline for the event action.  # noqa: E501

        :return: The pipeline_name of this MetricLogApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this MetricLogApiSchema.

        Required. The target pipeline for the event action.  # noqa: E501

        :param pipeline_name: The pipeline_name of this MetricLogApiSchema.  # noqa: E501
        :type: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")  # noqa: E501

        self._pipeline_name = pipeline_name

    @property
    def external_url(self):
        """Gets the external_url of this MetricLogApiSchema.  # noqa: E501

        A link to source information.  # noqa: E501

        :return: The external_url of this MetricLogApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._external_url

    @external_url.setter
    def external_url(self, external_url):
        """Sets the external_url of this MetricLogApiSchema.

        A link to source information.  # noqa: E501

        :param external_url: The external_url of this MetricLogApiSchema.  # noqa: E501
        :type: str
        """

        self._external_url = external_url

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this MetricLogApiSchema.  # noqa: E501

        An ISO8601 timestamp that describes when the event occurred. If no timezone is specified, UTC is assumed. If unset, the Events Ingestion API applies its current time to the field.  # noqa: E501

        :return: The event_timestamp of this MetricLogApiSchema.  # noqa: E501
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this MetricLogApiSchema.

        An ISO8601 timestamp that describes when the event occurred. If no timezone is specified, UTC is assumed. If unset, the Events Ingestion API applies its current time to the field.  # noqa: E501

        :param event_timestamp: The event_timestamp of this MetricLogApiSchema.  # noqa: E501
        :type: datetime
        """

        self._event_timestamp = event_timestamp

    @property
    def metadata(self):
        """Gets the metadata of this MetricLogApiSchema.  # noqa: E501

        Arbitrary key-value information, supplied by the user, to apply to the event.  # noqa: E501

        :return: The metadata of this MetricLogApiSchema.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this MetricLogApiSchema.

        Arbitrary key-value information, supplied by the user, to apply to the event.  # noqa: E501

        :param metadata: The metadata of this MetricLogApiSchema.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def run_tag(self):
        """Gets the run_tag of this MetricLogApiSchema.  # noqa: E501

        The tag of the target run for the event action. This identifier is created and managed by the user. If no run_tag is specified, the event applies to the default open run for the pipeline.  # noqa: E501

        :return: The run_tag of this MetricLogApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._run_tag

    @run_tag.setter
    def run_tag(self, run_tag):
        """Sets the run_tag of this MetricLogApiSchema.

        The tag of the target run for the event action. This identifier is created and managed by the user. If no run_tag is specified, the event applies to the default open run for the pipeline.  # noqa: E501

        :param run_tag: The run_tag of this MetricLogApiSchema.  # noqa: E501
        :type: str
        """

        self._run_tag = run_tag

    @property
    def task_name(self):
        """Gets the task_name of this MetricLogApiSchema.  # noqa: E501

        Optional. The target task for the event action. Must be unique within a pipeline.  # noqa: E501

        :return: The task_name of this MetricLogApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this MetricLogApiSchema.

        Optional. The target task for the event action. Must be unique within a pipeline.  # noqa: E501

        :param task_name: The task_name of this MetricLogApiSchema.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def metric_value(self):
        """Gets the metric_value of this MetricLogApiSchema.  # noqa: E501

        Required. The decimal value to be logged. NaN/INF values are not supported.  # noqa: E501

        :return: The metric_value of this MetricLogApiSchema.  # noqa: E501
        :rtype: float
        """
        return self._metric_value

    @metric_value.setter
    def metric_value(self, metric_value):
        """Sets the metric_value of this MetricLogApiSchema.

        Required. The decimal value to be logged. NaN/INF values are not supported.  # noqa: E501

        :param metric_value: The metric_value of this MetricLogApiSchema.  # noqa: E501
        :type: float
        """
        if metric_value is None:
            raise ValueError("Invalid value for `metric_value`, must not be `None`")  # noqa: E501

        self._metric_value = metric_value

    @property
    def metric_key(self):
        """Gets the metric_key of this MetricLogApiSchema.  # noqa: E501

        Required. The string value for grouping the metric. This value is created and managed by the user.  # noqa: E501

        :return: The metric_key of this MetricLogApiSchema.  # noqa: E501
        :rtype: str
        """
        return self._metric_key

    @metric_key.setter
    def metric_key(self, metric_key):
        """Sets the metric_key of this MetricLogApiSchema.

        Required. The string value for grouping the metric. This value is created and managed by the user.  # noqa: E501

        :param metric_key: The metric_key of this MetricLogApiSchema.  # noqa: E501
        :type: str
        """
        if metric_key is None:
            raise ValueError("Invalid value for `metric_key`, must not be `None`")  # noqa: E501

        self._metric_key = metric_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricLogApiSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricLogApiSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
