{"version":3,"file":"asanaFieldView.js","names":["AsanaInlineEditorView","RB","InlineEditorView","extend","initialize","options","_","defaults","hasRawValue","formatResult","value","name","htmlEncode","getFieldValue","editor","selectize","$field","selected","getValue","JSON","stringify","map","key","pick","isFieldDirty","initialValue","setFieldValue","prototype","call","createField","$","setupEvents","on","_scheduleUpdateDirtyState","bind","showEditor","focusOnOpen","focus","ReviewRequestFields","AsanaFieldView","TextFieldView","autocomplete","multiline","useEditIconOnly","taskTemplate","template","_formatField","fieldName","jsonFieldName","fieldID","opts","useExtraData","tasks","parse","model","getDraftField","_renderValue","lis","task","completed","workspaceId","workspace_id","taskId","gid","taskSummary","tagName","$el","html","join","_getInlineEditorClass","_buildAutoComplete","reviewRequest","get","localSite","reviewRequestId","url","SITE_ROOT","inlineEditorView","data","forEach","undefined","String","id","copyClassesToDropdown","dropdownParent","labelField","valueField","multiple","items","optgroupLabelField","searchField","sortField","render","option","escape","load","query","callback","params","param","q","ajax","type","error","success","res","clearOptionGroups","i","length","group","addOptionGroup","workspace","j","optgroup","notesLines","notes","split","splice","push","refreshOptions"],"sources":["../../../../../../rbintegrations/static/js/asana/asanaFieldView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * An inline editor view for selecting Asana tasks.\n */\nconst AsanaInlineEditorView = RB.InlineEditorView.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        options = _.defaults(options, {\n            hasRawValue: true,\n            formatResult: value => {\n                if (value && value.name) {\n                    return value.name.htmlEncode();\n                } else {\n                    return '';\n                }\n            },\n            getFieldValue: editor => {\n                const selectize = this.$field[0].selectize;\n                const selected = selectize.getValue();\n\n                return JSON.stringify(selected.map(\n                    key => _.pick(\n                        selectize.options[key],\n                        ['completed', 'gid', 'workspace_id', 'name'])));\n            },\n            isFieldDirty: (editor, initialValue) => {\n                const value = editor.getValue();\n                return initialValue !== value;\n            },\n            setFieldValue: (editor, value) => {\n                // This is a no-op, since we do this in the $.selectize call.\n            },\n        });\n\n        RB.InlineEditorView.prototype.initialize.call(this, options);\n    },\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        return $('<select multiple class=\"asana-field\">');\n    },\n\n    /**\n     * Connect events.\n     */\n    setupEvents() {\n        RB.InlineEditorView.prototype.setupEvents.call(this);\n\n        this.$field.on('change', this._scheduleUpdateDirtyState.bind(this));\n    },\n\n    /**\n     * Show the editor.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for showing the editor.\n     */\n    showEditor(options={}) {\n        RB.InlineEditorView.prototype.showEditor.call(this, options);\n\n        if (this.options.focusOnOpen) {\n            this.$field[0].selectize.focus();\n        }\n    },\n});\n\n\n/**\n * A review request field view for selecting Asana tasks.\n */\nRB.ReviewRequestFields.AsanaFieldView =\n    RB.ReviewRequestFields.TextFieldView.extend({\n    autocomplete: {},\n    multiline: true,\n    useEditIconOnly: true,\n\n    taskTemplate: _.template(dedent`\n        <<%- tagName %> class=\"asana-task<% if (completed) { %> completed<% } %>\">\n         <a href=\"https://app.asana.com/0/<%- workspaceId %>/<%- taskId %>/\">\n          <div class=\"asana-task-checkbox\">\n           <svg viewBox=\"0 0 32 32\">'\n            <polygon points=\"27.672,4.786 10.901,21.557 4.328,14.984 1.5,17.812 10.901,27.214 30.5,7.615\"></polygon>\n           </svg>\n          </div>\n          <span><%- taskSummary %></span>\n         </a>\n        </<%- tagName %>>\n        `),\n\n    /**\n     * Format the contents of the field.\n     *\n     * This will apply the contents of the model attribute to the field\n     * element. If the field defines a ``formatValue`` method, this will use\n     * that to do the formatting. Otherwise, the element will just be set to\n     * contain the text of the value.\n     */\n    _formatField() {\n        const fieldName = this.jsonFieldName || this.fieldID;\n        const opts = { useExtraData: this.useExtraData };\n        const tasks = JSON.parse(this.model.getDraftField(fieldName, opts));\n        this._renderValue(tasks);\n    },\n\n    /**\n     * Render the current value of the field.\n     *\n     * Args:\n     *     tasks (Array of object):\n     *         The current value of the field.\n     */\n    _renderValue(tasks) {\n        const lis = tasks.map(task => this.taskTemplate({\n            completed: task.completed,\n            workspaceId: task.workspace_id,\n            taskId: task.gid,\n            taskSummary: task.name,\n            tagName: 'li',\n        }));\n\n        this.$el.html(`<ul>${lis.join('')}</ul>`);\n    },\n\n    /**\n     * Return the type to use for the inline editor view.\n     *\n     * Returns:\n     *     function:\n     *     The constructor for the inline editor class to instantiate.\n     */\n    _getInlineEditorClass() {\n        return AsanaInlineEditorView;\n    },\n\n    /**\n     * Add auto-complete functionality to the field.\n     */\n    _buildAutoComplete() {\n        const reviewRequest = this.model.get('reviewRequest');\n        const localSite = reviewRequest.get('localSitePrefix');\n        const reviewRequestId = reviewRequest.get('id');\n        const url = `${SITE_ROOT}rbintegrations/asana/${localSite}task-search/${reviewRequestId}/`;\n        const $field = this.inlineEditorView.$field;\n        const tasks = this.$el.data('raw-value');\n\n        tasks.forEach(task => {\n            if (task.gid === undefined) {\n                task.gid = String(task.id);\n            }\n        });\n\n        this._renderValue(tasks || []);\n\n        $field.selectize({\n            copyClassesToDropdown: true,\n            dropdownParent: 'body',\n            labelField: 'name',\n            valueField: 'gid',\n            multiple: true,\n            options: tasks,\n            items: tasks.map(task => task.gid),\n            optgroupLabelField: 'workspace',\n            searchField: 'name',\n            sortField: [\n                { 'field': 'completed' },\n                { 'field': 'name' },\n            ],\n            render: {\n                option: (data, escape) => {\n                    return this.taskTemplate({\n                        completed: data.completed,\n                        workspaceId: data.workspace_id,\n                        taskId: data.gid,\n                        taskSummary: data.name,\n                        tagName: 'div',\n                    });\n                }\n            },\n            load(query, callback) {\n                const params = $.param({ q: query });\n\n                $.ajax({\n                    url: `${url}?${params}`,\n                    type: 'GET',\n                    error: callback.bind(this),\n                    success: res => {\n                        const items = [];\n\n                        this.clearOptionGroups();\n\n                        for (let i = 0; i < res.length; i++) {\n                            const group = res[i];\n                            this.addOptionGroup(group.workspace, group);\n\n                            for (let j = 0; j < group.tasks.length; j++) {\n                                const task = group.tasks[j];\n                                task.optgroup = group.workspace;\n                                task.workspace_id = group.workspace_id;\n\n                                const notesLines = task.notes.split('\\n');\n                                task.notes = notesLines.splice(8).join('\\n');\n\n                                items.push(task);\n                            }\n                        }\n\n                        this.refreshOptions();\n                        callback(items);\n                    },\n                });\n            },\n        });\n    },\n});\n\n\n})();\n"],"mappings":";;AAAA,CAAC,YAAW;EAGZ;AACA;AACA;EACA,IAAMA,qBAAqB,GAAGC,EAAE,CAACC,gBAAH,CAAoBC,MAApB,CAA2B;IACrD;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,UARqD,sBAQ1CC,OAR0C,EAQjC;MAAA;;MAChBA,OAAO,GAAGC,CAAC,CAACC,QAAF,CAAWF,OAAX,EAAoB;QAC1BG,WAAW,EAAE,IADa;QAE1BC,YAAY,EAAE,sBAAAC,KAAK,EAAI;UACnB,IAAIA,KAAK,IAAIA,KAAK,CAACC,IAAnB,EAAyB;YACrB,OAAOD,KAAK,CAACC,IAAN,CAAWC,UAAX,EAAP;UACH,CAFD,MAEO;YACH,OAAO,EAAP;UACH;QACJ,CARyB;QAS1BC,aAAa,EAAE,uBAAAC,MAAM,EAAI;UACrB,IAAMC,SAAS,GAAG,KAAI,CAACC,MAAL,CAAY,CAAZ,EAAeD,SAAjC;UACA,IAAME,QAAQ,GAAGF,SAAS,CAACG,QAAV,EAAjB;UAEA,OAAOC,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACI,GAAT,CAClB,UAAAC,GAAG;YAAA,OAAIhB,CAAC,CAACiB,IAAF,CACHR,SAAS,CAACV,OAAV,CAAkBiB,GAAlB,CADG,EAEH,CAAC,WAAD,EAAc,KAAd,EAAqB,cAArB,EAAqC,MAArC,CAFG,CAAJ;UAAA,CADe,CAAf,CAAP;QAIH,CAjByB;QAkB1BE,YAAY,EAAE,sBAACV,MAAD,EAASW,YAAT,EAA0B;UACpC,IAAMf,KAAK,GAAGI,MAAM,CAACI,QAAP,EAAd;UACA,OAAOO,YAAY,KAAKf,KAAxB;QACH,CArByB;QAsB1BgB,aAAa,EAAE,uBAACZ,MAAD,EAASJ,KAAT,EAAmB,CAC9B;QACH;MAxByB,CAApB,CAAV;MA2BAT,EAAE,CAACC,gBAAH,CAAoByB,SAApB,CAA8BvB,UAA9B,CAAyCwB,IAAzC,CAA8C,IAA9C,EAAoDvB,OAApD;IACH,CArCoD;;IAuCrD;AACJ;AACA;AACA;AACA;AACA;AACA;IACIwB,WA9CqD,yBA8CvC;MACV,OAAOC,CAAC,CAAC,uCAAD,CAAR;IACH,CAhDoD;;IAkDrD;AACJ;AACA;IACIC,WArDqD,yBAqDvC;MACV9B,EAAE,CAACC,gBAAH,CAAoByB,SAApB,CAA8BI,WAA9B,CAA0CH,IAA1C,CAA+C,IAA/C;MAEA,KAAKZ,MAAL,CAAYgB,EAAZ,CAAe,QAAf,EAAyB,KAAKC,yBAAL,CAA+BC,IAA/B,CAAoC,IAApC,CAAzB;IACH,CAzDoD;;IA2DrD;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,UAlEqD,wBAkE9B;MAAA,IAAZ9B,OAAY,uEAAJ,EAAI;MACnBJ,EAAE,CAACC,gBAAH,CAAoByB,SAApB,CAA8BQ,UAA9B,CAAyCP,IAAzC,CAA8C,IAA9C,EAAoDvB,OAApD;;MAEA,IAAI,KAAKA,OAAL,CAAa+B,WAAjB,EAA8B;QAC1B,KAAKpB,MAAL,CAAY,CAAZ,EAAeD,SAAf,CAAyBsB,KAAzB;MACH;IACJ;EAxEoD,CAA3B,CAA9B;EA4EA;AACA;AACA;;EACApC,EAAE,CAACqC,mBAAH,CAAuBC,cAAvB,GACItC,EAAE,CAACqC,mBAAH,CAAuBE,aAAvB,CAAqCrC,MAArC,CAA4C;IAC5CsC,YAAY,EAAE,EAD8B;IAE5CC,SAAS,EAAE,IAFiC;IAG5CC,eAAe,EAAE,IAH2B;IAK5CC,YAAY,EAAEtC,CAAC,CAACuC,QAAF,maAL8B;;IAkB5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,YA1B4C,0BA0B7B;MACX,IAAMC,SAAS,GAAG,KAAKC,aAAL,IAAsB,KAAKC,OAA7C;MACA,IAAMC,IAAI,GAAG;QAAEC,YAAY,EAAE,KAAKA;MAArB,CAAb;MACA,IAAMC,KAAK,GAAGjC,IAAI,CAACkC,KAAL,CAAW,KAAKC,KAAL,CAAWC,aAAX,CAAyBR,SAAzB,EAAoCG,IAApC,CAAX,CAAd;;MACA,KAAKM,YAAL,CAAkBJ,KAAlB;IACH,CA/B2C;;IAiC5C;AACJ;AACA;AACA;AACA;AACA;AACA;IACII,YAxC4C,wBAwC/BJ,KAxC+B,EAwCxB;MAAA;;MAChB,IAAMK,GAAG,GAAGL,KAAK,CAAC/B,GAAN,CAAU,UAAAqC,IAAI;QAAA,OAAI,MAAI,CAACd,YAAL,CAAkB;UAC5Ce,SAAS,EAAED,IAAI,CAACC,SAD4B;UAE5CC,WAAW,EAAEF,IAAI,CAACG,YAF0B;UAG5CC,MAAM,EAAEJ,IAAI,CAACK,GAH+B;UAI5CC,WAAW,EAAEN,IAAI,CAAC/C,IAJ0B;UAK5CsD,OAAO,EAAE;QALmC,CAAlB,CAAJ;MAAA,CAAd,CAAZ;MAQA,KAAKC,GAAL,CAASC,IAAT,eAAqBV,GAAG,CAACW,IAAJ,CAAS,EAAT,CAArB;IACH,CAlD2C;;IAoD5C;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,qBA3D4C,mCA2DpB;MACpB,OAAOrE,qBAAP;IACH,CA7D2C;;IA+D5C;AACJ;AACA;IACIsE,kBAlE4C,gCAkEvB;MAAA;;MACjB,IAAMC,aAAa,GAAG,KAAKjB,KAAL,CAAWkB,GAAX,CAAe,eAAf,CAAtB;MACA,IAAMC,SAAS,GAAGF,aAAa,CAACC,GAAd,CAAkB,iBAAlB,CAAlB;MACA,IAAME,eAAe,GAAGH,aAAa,CAACC,GAAd,CAAkB,IAAlB,CAAxB;MACA,IAAMG,GAAG,aAAMC,SAAN,kCAAuCH,SAAvC,yBAA+DC,eAA/D,MAAT;MACA,IAAM1D,MAAM,GAAG,KAAK6D,gBAAL,CAAsB7D,MAArC;MACA,IAAMoC,KAAK,GAAG,KAAKc,GAAL,CAASY,IAAT,CAAc,WAAd,CAAd;MAEA1B,KAAK,CAAC2B,OAAN,CAAc,UAAArB,IAAI,EAAI;QAClB,IAAIA,IAAI,CAACK,GAAL,KAAaiB,SAAjB,EAA4B;UACxBtB,IAAI,CAACK,GAAL,GAAWkB,MAAM,CAACvB,IAAI,CAACwB,EAAN,CAAjB;QACH;MACJ,CAJD;;MAMA,KAAK1B,YAAL,CAAkBJ,KAAK,IAAI,EAA3B;;MAEApC,MAAM,CAACD,SAAP,CAAiB;QACboE,qBAAqB,EAAE,IADV;QAEbC,cAAc,EAAE,MAFH;QAGbC,UAAU,EAAE,MAHC;QAIbC,UAAU,EAAE,KAJC;QAKbC,QAAQ,EAAE,IALG;QAMblF,OAAO,EAAE+C,KANI;QAOboC,KAAK,EAAEpC,KAAK,CAAC/B,GAAN,CAAU,UAAAqC,IAAI;UAAA,OAAIA,IAAI,CAACK,GAAT;QAAA,CAAd,CAPM;QAQb0B,kBAAkB,EAAE,WARP;QASbC,WAAW,EAAE,MATA;QAUbC,SAAS,EAAE,CACP;UAAE,SAAS;QAAX,CADO,EAEP;UAAE,SAAS;QAAX,CAFO,CAVE;QAcbC,MAAM,EAAE;UACJC,MAAM,EAAE,gBAACf,IAAD,EAAOgB,MAAP,EAAkB;YACtB,OAAO,MAAI,CAAClD,YAAL,CAAkB;cACrBe,SAAS,EAAEmB,IAAI,CAACnB,SADK;cAErBC,WAAW,EAAEkB,IAAI,CAACjB,YAFG;cAGrBC,MAAM,EAAEgB,IAAI,CAACf,GAHQ;cAIrBC,WAAW,EAAEc,IAAI,CAACnE,IAJG;cAKrBsD,OAAO,EAAE;YALY,CAAlB,CAAP;UAOH;QATG,CAdK;QAyBb8B,IAzBa,gBAyBRC,KAzBQ,EAyBDC,QAzBC,EAyBS;UAAA;;UAClB,IAAMC,MAAM,GAAGpE,CAAC,CAACqE,KAAF,CAAQ;YAAEC,CAAC,EAAEJ;UAAL,CAAR,CAAf;UAEAlE,CAAC,CAACuE,IAAF,CAAO;YACH1B,GAAG,YAAKA,GAAL,cAAYuB,MAAZ,CADA;YAEHI,IAAI,EAAE,KAFH;YAGHC,KAAK,EAAEN,QAAQ,CAAC/D,IAAT,CAAc,IAAd,CAHJ;YAIHsE,OAAO,EAAE,iBAAAC,GAAG,EAAI;cACZ,IAAMjB,KAAK,GAAG,EAAd;;cAEA,MAAI,CAACkB,iBAAL;;cAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;gBACjC,IAAME,KAAK,GAAGJ,GAAG,CAACE,CAAD,CAAjB;;gBACA,MAAI,CAACG,cAAL,CAAoBD,KAAK,CAACE,SAA1B,EAAqCF,KAArC;;gBAEA,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACzD,KAAN,CAAYwD,MAAhC,EAAwCI,CAAC,EAAzC,EAA6C;kBACzC,IAAMtD,IAAI,GAAGmD,KAAK,CAACzD,KAAN,CAAY4D,CAAZ,CAAb;kBACAtD,IAAI,CAACuD,QAAL,GAAgBJ,KAAK,CAACE,SAAtB;kBACArD,IAAI,CAACG,YAAL,GAAoBgD,KAAK,CAAChD,YAA1B;kBAEA,IAAMqD,UAAU,GAAGxD,IAAI,CAACyD,KAAL,CAAWC,KAAX,CAAiB,IAAjB,CAAnB;kBACA1D,IAAI,CAACyD,KAAL,GAAaD,UAAU,CAACG,MAAX,CAAkB,CAAlB,EAAqBjD,IAArB,CAA0B,IAA1B,CAAb;kBAEAoB,KAAK,CAAC8B,IAAN,CAAW5D,IAAX;gBACH;cACJ;;cAED,MAAI,CAAC6D,cAAL;;cACAtB,QAAQ,CAACT,KAAD,CAAR;YACH;UA3BE,CAAP;QA6BH;MAzDY,CAAjB;IA2DH;EA7I2C,CAA5C,CADJ;AAkJC,CAvOD"}