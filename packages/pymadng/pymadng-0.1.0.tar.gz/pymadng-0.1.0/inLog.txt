assert(loadfile("/tmp/tmpfm7rha_u"))()

        sharedata, sharetable, readSharedMemory, openSharedMemory, closeSharedMemory = require ("madl_mmap").sharedata, require ("madl_mmap").sharetable, require ("madl_mmap").readSharedMemory, require ("madl_mmap").openSharedMemory, require ("madl_mmap").closeSharedMemory

        assert(loadfile("/tmp/tmpm1jdc9s3"))()

        local tostring = tostring
        function getModName(modname, mod)
            io.write(modname .. "|" .. tostring(mod) .. ";")
        end
        io.write("Modules:\n")
        for modname, mod in pairs(MAD) do pcall(getModName, modname, mod) end io.write("\n")assert(loadfile("/tmp/tmpg_u3p1qy"))()
mtable = MAD.mtableassert(loadfile("/tmp/tmph3xbrvp0"))()
object = MAD.objectassert(loadfile("/tmp/tmpfes2hbwh"))()
sequence = MAD.sequenceassert(loadfile("/tmp/tmpbdzjty_8"))()
survey = MAD.surveyassert(loadfile("/tmp/tmpyjr9d3jc"))()
track = MAD.trackassert(loadfile("/tmp/tmpq0yn7mgm"))()
twiss = MAD.twissassert(loadfile("/tmp/tmpczwc3em2"))()
MAD = MAD.MADassert(loadfile("/tmp/tmpiln0k5uz"))()
match = MAD.matchassert(loadfile("/tmp/tmpx42dj353"))()
beam = MAD.beamassert(loadfile("/tmp/tmpjtfzx5jm"))()
beta0 = MAD.beta0assert(loadfile("/tmp/tmpr7xxkbok"))()

        local tostring = tostring
        function getModName(modname, mod)
            io.write(modname .. "|" .. tostring(mod) .. ";")
        end
        io.write("Modules:\n")
        for modname, mod in pairs(MAD.element) do pcall(getModName, modname, mod) end io.write("\n")assert(loadfile("/tmp/tmp5k8xhdkl"))()
thin_element = MAD.element.thin_elementassert(loadfile("/tmp/tmp74tcjp1o"))()
monitor = MAD.element.monitorassert(loadfile("/tmp/tmpy02zmw1f"))()
crabcavity = MAD.element.crabcavityassert(loadfile("/tmp/tmp9nlxlq38"))()
rfmultipole = MAD.element.rfmultipoleassert(loadfile("/tmp/tmp2_d8iw9c"))()
nllens = MAD.element.nllensassert(loadfile("/tmp/tmpgzfwuzj9"))()
beambeam = MAD.element.beambeamassert(loadfile("/tmp/tmpd_txj4mx"))()
multipole = MAD.element.multipoleassert(loadfile("/tmp/tmpcmp21scq"))()
genmap = MAD.element.genmapassert(loadfile("/tmp/tmpokme7meh"))()
flags = MAD.element.flagsassert(loadfile("/tmp/tmp2wir8uck"))()
rfcavity = MAD.element.rfcavityassert(loadfile("/tmp/tmpjueak1hl"))()
elseparator = MAD.element.elseparatorassert(loadfile("/tmp/tmpj9wh_lkc"))()
wiggler = MAD.element.wigglerassert(loadfile("/tmp/tmppdks_3kq"))()
tkicker = MAD.element.tkickerassert(loadfile("/tmp/tmpg0etrlty"))()
solenoid = MAD.element.solenoidassert(loadfile("/tmp/tmpykh14ue6"))()
dodecapole = MAD.element.dodecapoleassert(loadfile("/tmp/tmph7eu5m88"))()
sequence = MAD.element.sequenceassert(loadfile("/tmp/tmpwdsdh7sc"))()
decapole = MAD.element.decapoleassert(loadfile("/tmp/tmpkp0tzq1c"))()
octupole = MAD.element.octupoleassert(loadfile("/tmp/tmp2uhmah6g"))()
sextupole = MAD.element.sextupoleassert(loadfile("/tmp/tmphcluxem1"))()
vkicker = MAD.element.vkickerassert(loadfile("/tmp/tmptyol7zzm"))()
hkicker = MAD.element.hkickerassert(loadfile("/tmp/tmphi1bvzss"))()
translate = MAD.element.translateassert(loadfile("/tmp/tmp18s58vfb"))()
quadrupole = MAD.element.quadrupoleassert(loadfile("/tmp/tmp4qybp924"))()
bline = MAD.element.blineassert(loadfile("/tmp/tmp883x_83o"))()
rbend = MAD.element.rbendassert(loadfile("/tmp/tmp1zmwmn2p"))()
sbend = MAD.element.sbendassert(loadfile("/tmp/tmpmvyzur48"))()
placeholder = MAD.element.placeholderassert(loadfile("/tmp/tmpbwcmad8j"))()
instrument = MAD.element.instrumentassert(loadfile("/tmp/tmpq4idqp1i"))()
collimator = MAD.element.collimatorassert(loadfile("/tmp/tmp806qecyw"))()
drift = MAD.element.driftassert(loadfile("/tmp/tmpz1m9sdm6"))()
vmonitor = MAD.element.vmonitorassert(loadfile("/tmp/tmpr7wt0fki"))()
slink = MAD.element.slinkassert(loadfile("/tmp/tmpwsin7429"))()
srotation = MAD.element.srotationassert(loadfile("/tmp/tmpdlostc9t"))()
marker = MAD.element.markerassert(loadfile("/tmp/tmpxg6l5uh_"))()
assembly = MAD.element.assemblyassert(loadfile("/tmp/tmptfe_r_hd"))()
changeref = MAD.element.changerefassert(loadfile("/tmp/tmp8w0zegg_"))()
specl_element = MAD.element.specl_elementassert(loadfile("/tmp/tmpd4i74pdq"))()
yrotation = MAD.element.yrotationassert(loadfile("/tmp/tmpz3byeoak"))()
extrn_element = MAD.element.extrn_elementassert(loadfile("/tmp/tmp63m9bcuo"))()
changenrj = MAD.element.changenrjassert(loadfile("/tmp/tmpisyfys8d"))()
patch_element = MAD.element.patch_elementassert(loadfile("/tmp/tmpz4fkr770"))()
changedir = MAD.element.changedirassert(loadfile("/tmp/tmp8m8pjdvr"))()
thick_element = MAD.element.thick_elementassert(loadfile("/tmp/tmp_q6g7r6q"))()
kicker = MAD.element.kickerassert(loadfile("/tmp/tmpn9pq9i5_"))()
drift_element = MAD.element.drift_elementassert(loadfile("/tmp/tmp69bykfq2"))()
hmonitor = MAD.element.hmonitorassert(loadfile("/tmp/tmpmfj02vvt"))()
xrotation = MAD.element.xrotationassert(loadfile("/tmp/tmp0wgi2d76"))()
element = MAD.element.elementassert(loadfile("/tmp/tmpvpp5e12f"))()

        local tostring = tostring
        function getModName(modname, mod)
            io.write(modname .. "|" .. tostring(mod) .. ";")
        end
        io.write("Modules:\n")
        for modname, mod in pairs(MAD) do pcall(getModName, modname, mod) end io.write("\n")assert(loadfile("/tmp/tmpv7r9_u_z"))()
MAD = MAD.MAD