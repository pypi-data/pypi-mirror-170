import { S as SvelteComponent, i as init, s as safe_not_equal, p as create_slot, e as element, b as attr, d as toggle_class, f as insert, u as update_slot_base, q as get_all_dirty_from_scope, r as get_slot_changes, j as transition_in, k as transition_out, n as detach } from './index.17b0663f.js';

/* src/components/Row/Row.svelte generated by Svelte v3.49.0 */

function create_fragment(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr(div, "class", "flex row w-full flex-wrap gap-4");
			attr(div, "id", /*elem_id*/ ctx[1]);
			toggle_class(div, "gr-compact", /*variant*/ ctx[3] === "compact");
			toggle_class(div, "gr-panel", /*variant*/ ctx[3] === "panel");
			toggle_class(div, "unequal-height", /*style*/ ctx[0].equal_height === false);
			toggle_class(div, "items-stretch", /*style*/ ctx[0].equal_height);
			toggle_class(div, "!hidden", !/*visible*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*elem_id*/ 2) {
				attr(div, "id", /*elem_id*/ ctx[1]);
			}

			if (dirty & /*variant*/ 8) {
				toggle_class(div, "gr-compact", /*variant*/ ctx[3] === "compact");
			}

			if (dirty & /*variant*/ 8) {
				toggle_class(div, "gr-panel", /*variant*/ ctx[3] === "panel");
			}

			if (dirty & /*style*/ 1) {
				toggle_class(div, "unequal-height", /*style*/ ctx[0].equal_height === false);
			}

			if (dirty & /*style*/ 1) {
				toggle_class(div, "items-stretch", /*style*/ ctx[0].equal_height);
			}

			if (dirty & /*visible*/ 4) {
				toggle_class(div, "!hidden", !/*visible*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { style = {} } = $$props;
	let { elem_id } = $$props;
	let { visible = true } = $$props;
	let { variant = "default" } = $$props;

	$$self.$$set = $$props => {
		if ('style' in $$props) $$invalidate(0, style = $$props.style);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('variant' in $$props) $$invalidate(3, variant = $$props.variant);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [style, elem_id, visible, variant, $$scope, slots];
}

class Row extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			style: 0,
			elem_id: 1,
			visible: 2,
			variant: 3
		});
	}
}

var Row$1 = Row;

const modes = ["static"];

export { Row$1 as Component, modes };
