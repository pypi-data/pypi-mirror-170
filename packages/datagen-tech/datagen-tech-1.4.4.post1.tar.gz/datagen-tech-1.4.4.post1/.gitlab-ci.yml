#include:
#  - project: 'datagen1/devops/aws-dev-ops'
#    file: 'pipelines/gitlab/workflow.yaml'


stages:          # List of stages for jobs, and their order of execution
  - test
  - deploy

test:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  image: python:3.9
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  script:
    - |
      set -ex
      pip install -U setuptools
      pip install -e .
      pip install unittest-xml-reporting
      echo "Running xmlrunner tests"
      echo python -m xmlrunner discover ./tests/ -o ./test-reports/report.xml --verbose

  after_script:
    - echo after script
    - ls -al test-reports/
   # - cp -r test-reports $CI_PROJECT_DIR/test-reports2
  artifacts:
    expire_in: 1 month
    when: always
    reports:
      junit: test-reports/report.xml/*.xml

deploy:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  image: python:3.9
  script:
    - |
      set -ex
      echo "Deploying application..."
      echo "Application successfully deployed."
      pip install --upgrade twine build
      # bump package version
      echo "__version__ = '0.0-${CI_COMMIT_REF_NAM}-${CI_COMMIT_SHORT_SHA}'" >> src/datagen/__init__.py
      echo updated project version to $CI_JOB_ID
      # Publish python package to PyPI Gitlab Pypi server
      echo building version $CI_JOB_ID
      #python -m build
      python3 setup.py sdist bdist_wheel
      echo uploading package to ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
      TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --verbose --skip-existing --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*