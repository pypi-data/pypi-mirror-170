{"version":3,"file":"textCommentRowSelector.js","names":["RB","TextCommentRowSelector","Backbone","View","extend","ghostCommentFlagTemplate","events","initialize","options","_$begin","_$end","_beginLineNum","_endLineNum","_lastSeenIndex","_selectionClass","_supportsSetClipboard","window","getSelection","undefined","Range","prototype","cloneContents","_newlineChar","_$ghostCommentFlag","_$ghostCommentFlagCell","remove","call","render","$","on","mousedown","_","bind","_onMouseDown","mouseup","_onMouseUp","mouseover","_onMouseOver","mouseout","_onMouseOut","hide","appendTo","createComment","beginLineNum","endLineNum","beginNode","endNode","_getActualLineNumCell","parent","_isLineNumCell","_end","_reset","getRowsForRange","minRowIndex","beginRowEl","findLineNumRow","rowIndex","endRowEl","lineNum","startRow","endRow","table","el","rowOffset","row","rows","length","getLineNum","low","high","Math","min","i","round","value","found","j","guessRowNum","guessRow","oldHigh","oldLow","_begin","$row","addClass","$el","disableSelection","$commentFlag","find","click","reviewableView","createAndEditCommentBlock","$beginRow","$endRow","_addRow","max","_highlightRow","$lineNumCell","cells","css","offset","top","show","removeClass","_removeOldRows","destRowIndex","_removeSelectionClasses","enableSelection","startRowIndex","endRowIndex","cell","tagName","parentNode","getAttribute","$node","hasClass","_onCopy","e","clipboardData","originalEvent","_copySelectionToClipboard","preventDefault","stopPropagation","_findPreTags","result","parentEl","tdClass","excludeTBodyClass","children","node","nodeType","Node","ELEMENT_NODE","push","findPreTags","navigator","appVersion","includes","_selectedCellIndex","sel","textParts","rangeCount","range","getRangeAt","collapsed","nodes","doc","textContent","text","setData","join","target","parentsUntil","cellIndex","stopImmediatePropagation","relTarget","relatedTarget","_onTouchStart","firstTouch","targetTouches","_onTouchEnd","changedTouches","document","elementFromPoint","clientX","clientY","_onTouchMove","_onTouchCancel","parseInt"],"sources":["../../../../../static/rb/js/views/textCommentRowSelector.es6.js"],"sourcesContent":["/*\n * Provides multi-line commenting capabilities for a diff.\n *\n * This tacks on commenting capabilities onto a DiffReviewableView's\n * element. It listens for mouse events that begin/end the creation of\n * a new comment.\n */\nRB.TextCommentRowSelector = Backbone.View.extend({\n    ghostCommentFlagTemplate: dedent`\n        <span class=\"commentflag ghost-commentflag\">\n         <span class=\"commentflag-shadow\"></span>\n         <span class=\"commentflag-inner\"></span>\n        </span>\n    `,\n\n    events: {\n        'copy': '_onCopy',\n        'mousedown': '_onMouseDown',\n        'mouseup': '_onMouseUp',\n        'mouseover': '_onMouseOver',\n        'mouseout': '_onMouseOut',\n        'touchstart': '_onTouchStart',\n        'touchend': '_onTouchEnd',\n        'touchmove': '_onTouchMove',\n        'touchcancel': '_onTouchCancel',\n    },\n\n    /**\n     * Initialize the commenting selector.\n     *\n     * Args:\n     *     options (object):\n     *         Options for initializing the view.\n     *\n     * Option Args:\n     *     reviewableView (RB.AbstractReviewableView):\n     *         The view that will create the comment based on the selection we\n     *         provide.\n     */\n    initialize(options) {\n        this.options = options;\n        this._$begin = null;\n        this._$end = null;\n        this._beginLineNum = 0;\n        this._endLineNum = 0;\n        this._lastSeenIndex = 0;\n        this._selectionClass = null;\n\n        /*\n         * Support setting the clipboard only if we have the necessary\n         * functions. This may still be turned off later if we can't\n         * actually set the data.\n         */\n        this._supportsSetClipboard = (\n            window.getSelection !== undefined &&\n            window.Range !== undefined &&\n            window.Range.prototype.cloneContents !== undefined);\n\n        this._newlineChar = null;\n\n        this._$ghostCommentFlag = null;\n        this._$ghostCommentFlagCell = null;\n    },\n\n    /**\n     * Remove the selector from the DOM.\n     */\n    remove() {\n        Backbone.View.prototype.remove.call(this);\n\n        this._$ghostCommentFlag.remove();\n    },\n\n    /**\n     * Render the selector.\n     *\n     * Returns:\n     *     RB.TextCommentRowSelector:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$ghostCommentFlag = $(this.ghostCommentFlagTemplate)\n            .on({\n                mousedown: _.bind(this._onMouseDown, this),\n                mouseup: _.bind(this._onMouseUp, this),\n                mouseover: _.bind(this._onMouseOver, this),\n                mouseout: _.bind(this._onMouseOut, this)\n            })\n            .hide()\n            .appendTo('body');\n\n        return this;\n    },\n\n   /**\n    * Create a comment for a chunk of a diff.\n    *\n    * Args:\n    *     beginLineNum (number):\n    *         The first line number of the range being commented upon.\n    *\n    *     endLineNum (number):\n    *         The last line number of the range being commented upon.\n    *\n    *     beginNode (Element):\n    *         The element for the first row of the range being commented on.\n    *\n    *     endNode (Element):\n    *         The element of the last row of the range being commented on.\n    */\n    createComment(beginLineNum, endLineNum, beginNode, endNode) {\n        this._beginLineNum = beginLineNum;\n        this._endLineNum = endLineNum;\n        this._$begin = this._getActualLineNumCell($(beginNode)).parent();\n        this._$end = this._getActualLineNumCell($(endNode)).parent();\n\n        if (this._isLineNumCell(endNode)) {\n            this._end(this._getActualLineNumCell($(endNode)).parent());\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Return the beginning and end rows for a given line number range.\n     *\n     * Args:\n     *      beginLineNum (number):\n     *         The first line number of the range.\n     *\n     *      endLineNum (number):\n     *         The last line number of the range.\n     *\n     *      minRowIndex (number):\n     *         A minimum row index to constrain the search to.\n     *\n     *         No rows with indices less than this will be searched.\n     *\n     * Returns:\n     *     array of Element:\n     *     If the row corresponding to ``beginLineNum`` cannot be found, the\n     *     return value with be ``null``.\n     *\n     *     Otherwise, this will be a 2 element array containing:\n     *\n     *     * The :js:class:`Element` for the row corresponding to\n     *       ``beginLineNum``.\n     *     * The :js:class:`Element` for the row corresponding to\n     *       ``endLineNum``, or ``null`` if it cannot be found.\n     */\n    getRowsForRange(beginLineNum, endLineNum, minRowIndex) {\n        const beginRowEl = this.findLineNumRow(beginLineNum, minRowIndex);\n\n        if (beginRowEl) {\n            const rowIndex = beginRowEl.rowIndex;\n            const endRowEl = (\n                endLineNum === beginLineNum\n                ? beginRowEl\n                : this.findLineNumRow(\n                    endLineNum,\n                    rowIndex,\n                    rowIndex + endLineNum - beginLineNum)\n            );\n\n            return [beginRowEl, endRowEl];\n        } else {\n            return null;\n        }\n    },\n\n    /**\n     * Find the row in a table matching the specified line number.\n     *\n     * This will perform a binary search of the lines trying to find\n     * the matching line number. It will then return the row element,\n     * if found.\n     *\n     * Args:\n     *     lineNum (number):\n     *         The line number to find.\n     *\n     *     startRow (number):\n     *         The index of the row to start the search at.\n     *\n     *     endRow (number):\n     *         The index of the row to end the sarch at.\n     */\n    findLineNumRow(lineNum, startRow, endRow) {\n        const table = this.el;\n        const rowOffset = 1; // Get past the headers.\n        let row = null;\n\n        if (table.rows.length - rowOffset > lineNum) {\n            row = table.rows[rowOffset + lineNum];\n\n            // Account for the \"x lines hidden\" row.\n            if (row && this.getLineNum(row) === lineNum) {\n                return row;\n            }\n        }\n\n        if (startRow) {\n            // startRow already includes the offset, so we need to remove it.\n            startRow -= rowOffset;\n        }\n\n        let low = startRow || 0;\n        let high = Math.min(endRow || table.rows.length, table.rows.length);\n\n        if (endRow !== undefined && endRow < table.rows.length) {\n            // See if we got lucky and found it in the last row.\n            if (this.getLineNum(table.rows[endRow]) === lineNum) {\n                return table.rows[endRow];\n            }\n        } else if (row !== null) {\n            /*\n             * We collapsed the rows (unless someone mucked with the DB),\n             * so the desired row is less than the row number retrieved.\n             */\n            high = Math.min(high, rowOffset + lineNum);\n        }\n\n        // Binary search for this cell.\n        for (let i = Math.round((low + high) / 2); low < high - 1;) {\n            row = table.rows[rowOffset + i];\n\n            if (!row) {\n                // This should not happen, unless we miscomputed high.\n                high--;\n\n                /*\n                 * This won't do much if low + high is odd, but we'll catch\n                 * up on the next iteration.\n                 */\n                i = Math.round((low + high) / 2);\n                continue;\n            }\n\n            let value = this.getLineNum(row);\n\n            if (!value) {\n                /*\n                 * Bad luck, let's look around.\n                 *\n                 * We'd expect to find a value on the first try, but the\n                 * following makes sure we explore all rows.\n                 */\n                let found = false;\n\n                for (let j = 1; j <= (high - low) / 2; j++) {\n                    row = table.rows[rowOffset + i + j];\n\n                    if (row && this.getLineNum(row)) {\n                        i = i + j;\n                        found = true;\n                        break;\n                    } else {\n                        row = table.rows[rowOffset + i - j];\n\n                        if (row && this.getLineNum(row)) {\n                            i = i - j;\n                            found = true;\n                            break;\n                        }\n                    }\n                }\n\n                if (found) {\n                    value = this.getLineNum(row);\n                } else {\n                    return null;\n                }\n            }\n\n            // See if we can use simple math to find the row quickly.\n            const guessRowNum = lineNum - value + rowOffset + i;\n\n            if (guessRowNum >= 0 && guessRowNum < table.rows.length) {\n                const guessRow = table.rows[guessRowNum];\n\n                if (guessRow && this.getLineNum(guessRow) === lineNum) {\n                    // We found it using maths!\n                    return guessRow;\n                }\n            }\n\n            const oldHigh = high;\n            const oldLow = low;\n\n            if (value > lineNum) {\n                high = i;\n            } else if (value < lineNum) {\n                low = i;\n            } else {\n                return row;\n            }\n\n            /*\n             * Make sure we don't get stuck in an infinite loop. This can happen\n             * when a comment is placed in a line that isn't being shown.\n             */\n            if (oldHigh === high && oldLow === low) {\n                break;\n            }\n\n            i = Math.round((low + high) / 2);\n        }\n\n        // Well.. damn. Ignore this then.\n        return null;\n    },\n\n    /**\n     * Begin the selection of line numbers.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The selected row.\n     */\n    _begin($row) {\n        const lineNum = this.getLineNum($row[0]);\n\n        this._$begin = $row;\n        this._$end = $row;\n        this._beginLineNum = lineNum;\n        this._endLineNum = lineNum;\n        this._lastSeenIndex = $row[0].rowIndex;\n\n        $row.addClass('selected');\n        this.$el.disableSelection();\n    },\n\n    /**\n     * Finalize the selection and pop up a comment dialog.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The selected row.\n     */\n    _end($row) {\n        if (this._beginLineNum === this._endLineNum) {\n            /* See if we have a comment flag on the selected row. */\n            const $commentFlag = $row.find('.commentflag');\n\n            if ($commentFlag.length === 1) {\n                $commentFlag.click();\n                return;\n            }\n        }\n\n        /*\n         * Selection was finalized. Create the comment block\n         * and show the comment dialog.\n         */\n        this.options.reviewableView.createAndEditCommentBlock({\n            beginLineNum: this._beginLineNum,\n            endLineNum: this._endLineNum,\n            $beginRow: this._$begin,\n            $endRow: this._$end\n        });\n    },\n\n    /**\n     * Add a row to the selection.\n     *\n     * This will update the selection range and mark the rows as selected.\n     *\n     * This row is assumed to be the most recently selected row, and\n     * will mark the new beginning or end of the selection.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The row to add to the selection.\n     */\n    _addRow($row) {\n        /* We have an active selection. */\n        const lineNum = this.getLineNum($row[0]);\n\n        if (lineNum < this._beginLineNum) {\n            this._$begin = $row;\n            this._beginLineNum = lineNum;\n        } else if (lineNum > this._beginLineNum) {\n            this._$end = $row;\n            this._endLineNum = lineNum;\n        }\n\n        const min = Math.min(this._lastSeenIndex, $row[0].rowIndex);\n        const max = Math.max(this._lastSeenIndex, $row[0].rowIndex);\n\n        for (let i = min; i <= max; i++) {\n            $(this.el.rows[i]).addClass('selected');\n        }\n\n        this._lastSeenIndex = $row[0].rowIndex;\n    },\n\n    /**\n     * Highlight a row.\n     *\n     * This will highlight a row and show a ghost comment flag. This is done\n     * when the mouse hovers over the row.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The row to highlight.\n     */\n    _highlightRow($row) {\n        const $lineNumCell = $($row[0].cells[0]);\n\n        /* See if we have a comment flag in here. */\n        if ($lineNumCell.find('.commentflag').length === 0) {\n            this._$ghostCommentFlag\n                .css('top', $row.offset().top - 1)\n                .show()\n                .parent()\n                    .removeClass('selected');\n            this._$ghostCommentFlagCell = $lineNumCell;\n        }\n\n        $row.addClass('selected');\n    },\n\n    /**\n     * Remove old rows from the selection based on the most recent selection.\n     *\n     * Args:\n     *     $row (jQuery):\n     *         The most recent row selection.\n     */\n    _removeOldRows($row) {\n        const destRowIndex = $row[0].rowIndex;\n\n        if (destRowIndex >= this._$begin[0].rowIndex) {\n            if (this._lastSeenIndex !== this._$end[0].rowIndex &&\n                this._lastSeenIndex < destRowIndex) {\n                /*\n                 * We're removing from the top of the range. The beginning\n                 * location will need to be moved.\n                 */\n                this._removeSelectionClasses(this._lastSeenIndex, destRowIndex);\n                this._$begin = $row;\n                this._beginLineNum = this.getLineNum($row[0]);\n            } else {\n                /*\n                 * We're removing from the bottom of the selection. The end\n                 * location will need to be moved.\n                 */\n                this._removeSelectionClasses(destRowIndex,\n                                             this._lastSeenIndex);\n\n                this._$end = $row;\n                this._endLineNum = this.getLineNum($row[0]);\n            }\n\n            this._lastSeenIndex = destRowIndex;\n        }\n    },\n\n    /**\n     * Reset the selection information.\n     */\n    _reset() {\n        if (this._$begin) {\n            /* Reset the selection. */\n            this._removeSelectionClasses(this._$begin[0].rowIndex,\n                                         this._$end[0].rowIndex);\n\n            this._$begin = null;\n            this._$end = null;\n            this._beginLineNum = 0;\n            this._endLineNum = 0;\n            this._lastSeenIndex = 0;\n        }\n\n        this._$ghostCommentFlagCell = null;\n\n        /* Re-enable text selection on IE */\n        this.$el.enableSelection();\n    },\n\n    /**\n     * Remove the selection classes on a range of rows.\n     *\n     * Args:\n     *     startRowIndex (number):\n     *         The row index to start removing selection classes at.\n     *\n     *     endRowIndex (number):\n     *         The row index to stop removing selection classes at.\n     */\n    _removeSelectionClasses(startRowIndex, endRowIndex) {\n        for (let i = startRowIndex; i <= endRowIndex; i++) {\n            $(this.el.rows[i]).removeClass('selected');\n        }\n    },\n\n    /**\n     * Return whether a particular cell is a line number cell.\n     *\n     * Args:\n     *     cell (Element):\n     *         The cell to inspect.\n     */\n    _isLineNumCell(cell) {\n        return cell.tagName === 'TH' &&\n               cell.parentNode.getAttribute('line');\n    },\n\n    /**\n     * Return the actual cell node in the table.\n     *\n     * If the node specified is the ghost flag, this will return the\n     * cell the ghost flag represents.\n     *\n     * If this is a comment flag inside a cell, this will return the\n     * comment flag's parent cell.\n     *\n     * If this is a code warning indicator, this will return its parent cell.\n     *\n     * Returns:\n     *     jQuery:\n     *     The row.\n     */\n    _getActualLineNumCell($node) {\n        if ($node.hasClass('commentflag')) {\n            if ($node[0] === this._$ghostCommentFlag[0]) {\n                return this._$ghostCommentFlagCell;\n            } else {\n                return $node.parent();\n            }\n        } else if ($node.hasClass('fa-warning')) {\n            return $node.parent();\n        }\n\n        return $node;\n    },\n\n    /**\n     * Handler for when the user copies text in a column.\n     *\n     * This will begin the process of capturing any selected text in\n     * a column to the clipboard in a cross-browser way.\n     */\n    _onCopy(e) {\n        const clipboardData = e.originalEvent.clipboardData ||\n                              window.clipboardData;\n\n        if (clipboardData && this._supportsSetClipboard &&\n            this._copySelectionToClipboard(clipboardData)) {\n            /*\n             * Prevent the default copy action from occurring.\n             */\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    },\n\n    /**\n     * Find the pre tags and push them into the result array.\n     *\n     * Args:\n     *     result (array):\n     *         The array for which all matching ``<pre>`` elements will be\n     *         pushed into.\n     *\n     *     parentEl (Element):\n     *         The parent element to search under.\n     *\n     *     tdClass (string):\n     *         The class of ``<td>`` elements to search.\n     *\n     *     excludeTBodyClass (string):\n     *         The class of the ``<tbody>`` to exclude.\n     */\n    _findPreTags(result, parentEl, tdClass, excludeTBodyClass) {\n        for (let i = 0; i < parentEl.children.length; i++) {\n            const node = parentEl.children[i];\n\n            if (node.nodeType === Node.ELEMENT_NODE) {\n                if (node.tagName === 'PRE') {\n                    result.push(node);\n                } else if ((node.tagName !== 'TD' ||\n                            $(node).hasClass(tdClass)) &&\n                           (node.tagName !== 'TBODY' ||\n                            !$(node).hasClass(excludeTBodyClass))) {\n                    findPreTags(result, node, tdClass, excludeTBodyClass);\n                }\n            }\n        }\n    },\n\n    /**\n     * Copy the current selection to the clipboard.\n     *\n     * This will locate the desired text to copy, based on the selection\n     * range within the column where selection started. It will then\n     * extract the code from the ``<pre>`` tags and build a string to set in\n     * the clipboard.\n     *\n     * This requires support in the browser for setting clipboard contents\n     * on copy. If the browser does not support this, the default behavior\n     * will be used.\n     *\n     * Args:\n     *     clipboardData (DataTransfer):\n     *         The clipboard data from the copy event.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether or not we successfully set the clipboard data.\n     */\n    _copySelectionToClipboard(clipboardData) {\n        let excludeTBodyClass;\n        let tdClass;\n\n        if (this._newlineChar === null) {\n            /*\n             * Figure out what newline character should be used on this\n             * platform. Ideally, we'd determine this from some browser\n             * behavior, but it doesn't seem that can be consistently\n             * determined.\n             */\n            if (navigator.appVersion.includes('Win')) {\n                this._newlineChar = '\\r\\n';\n            } else {\n                this._newlineChar = '\\n';\n            }\n        }\n\n        if (this._selectedCellIndex === 3 || this.$el.hasClass('newfile')) {\n            tdClass = 'r';\n            excludeTBodyClass = 'delete';\n        } else {\n            tdClass = 'l';\n            excludeTBodyClass = 'insert';\n        }\n\n        const sel = window.getSelection();\n        const textParts = [];\n\n        for (let i = 0; i < sel.rangeCount; i++) {\n            const range = sel.getRangeAt(i);\n\n            if (range.collapsed) {\n                continue;\n            }\n\n            const nodes = [];\n            const doc = range.cloneContents();\n            findPreTags(nodes, doc, tdClass, excludeTBodyClass);\n\n            if (nodes.length > 0) {\n                /*\n                 * The selection spans multiple rows. Find the blocks of text\n                 * in the column we want, and copy those to the clipboard.\n                 */\n                for (let j = 0; j < nodes.length; j++) {\n                    textParts.push(nodes[j].textContent);\n                }\n            } else {\n                /*\n                 * If we're here, then we selected a subset of a single\n                 * cell. There was only one Range, and no <pre> tags as\n                 * part of it. We can just grab the text of the document.\n                 *\n                 * (We don't really need to break here, but we're going to\n                 * in order to be clear that we're completely done.)\n                 */\n                textParts.push($(doc).text());\n                break;\n            }\n        }\n\n        try {\n            clipboardData.setData('text', textParts.join(this._newlineChar));\n        } catch (e) {\n            /* Let the native behavior take over. */\n            this._supportsSetClipboard = false;\n            return false;\n        }\n\n        return true;\n    },\n\n    /**\n     * Handle the mouse down event, which begins selection for comments.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mousedown`` event.\n     */\n    _onMouseDown(e) {\n        if (this._selectionClass) {\n            this.$el.removeClass(this._selectionClass);\n        }\n\n        const node = this._$ghostCommentFlagCell\n                   ? this._$ghostCommentFlagCell[0]\n                   : e.target;\n\n        if (this._isLineNumCell(node)) {\n            this._begin($(node.parentNode));\n        } else {\n            const $node = node.tagName === 'TD'\n                      ? $(node)\n                      : $(node).parentsUntil('tr', 'td');\n\n            if ($node.length > 0) {\n                this._selectionClass = 'selecting-col-' + $node[0].cellIndex;\n                this._selectedCellIndex = $node[0].cellIndex;\n                this.$el.addClass(this._selectionClass);\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse up event.\n     *\n     * This will finalize the selection of a range of lines, creating a new\n     * comment block and displaying the dialog.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseup`` event.\n     */\n    _onMouseUp(e) {\n        const node = this._$ghostCommentFlagCell\n                   ? this._$ghostCommentFlagCell[0]\n                   : e.target;\n\n        if (this._isLineNumCell(node)) {\n            this._end(this._getActualLineNumCell($(node)).parent());\n            e.stopImmediatePropagation();\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Handle the mouse over event.\n     *\n     * This will update the selection, if there is one, to include this row\n     * in the range, and set the \"selected\" class on the new row.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseover`` event.\n     */\n    _onMouseOver(e) {\n        const $node = this._getActualLineNumCell($(e.target));\n        const $row = $node.parent();\n\n        if (this._isLineNumCell($node[0])) {\n            if (this._$begin) {\n                this._addRow($row);\n            } else {\n                this._highlightRow($row);\n            }\n        } else if (this._$ghostCommentFlagCell &&\n                   $node[0] !== this._$ghostCommentFlagCell[0]) {\n            $row.removeClass('selected');\n        }\n    },\n\n    /**\n     * Handle the mouse out event.\n     *\n     * This will remove any lines outside the new range from the selection.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseout`` event.\n     */\n    _onMouseOut(e) {\n        const relTarget = e.relatedTarget;\n\n        if (relTarget !== this._$ghostCommentFlag[0]) {\n            this._$ghostCommentFlag.hide();\n            this._$ghostCommentFlagCell = null;\n        }\n\n        const $node = this._getActualLineNumCell($(e.target));\n\n        if (this._$begin) {\n            if (relTarget && this._isLineNumCell(relTarget)) {\n                this._removeOldRows($(relTarget.parentNode));\n            }\n        } else if ($node && this._isLineNumCell($node[0])) {\n            /*\n             * Opera seems to generate lots of spurious mouse-out\n             * events, which would cause us to get all sorts of\n             * errors in here unless we check the target above.\n             */\n            $node.parent().removeClass('selected');\n        }\n    },\n\n    /**\n     * Handle the beginning of a touch event.\n     *\n     * If the user is touching a line number, then this will begin tracking\n     * a new comment selection state, allowing them to either open an existing\n     * comment or create a new one.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchstart`` event.\n     */\n    _onTouchStart(e) {\n        const firstTouch = e.originalEvent.targetTouches[0];\n        const $node = this._getActualLineNumCell($(firstTouch.target));\n\n        if ($node !== null && this._isLineNumCell($node[0])) {\n            e.preventDefault();\n            this._begin($node.parent());\n        }\n    },\n\n    /**\n     * Handle the end of a touch event.\n     *\n     * If the user ended on a line number, then this will either open an\n     * existing comment (if the result was a single-line selection on the\n     * line of an existing comment) or create a new comment spanning all\n     * selected lines.\n     *\n     * If they ended outside of the line numbers column, then this will\n     * simply reset the selection.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchend`` event.\n     */\n    _onTouchEnd(e) {\n        const firstTouch = e.originalEvent.changedTouches[0];\n        const target = document.elementFromPoint(firstTouch.clientX,\n                                                 firstTouch.clientY);\n        const $node = this._getActualLineNumCell($(target));\n\n        if ($node !== null && this._isLineNumCell($node[0])) {\n            e.preventDefault();\n            this._end($node.parent());\n        }\n\n        this._reset();\n    },\n\n    /**\n     * Handle touch movement events.\n     *\n     * If selecting up or down line numbers, this will update the selection\n     * to span all rows from the original line number first touched and the\n     * line number currently being touched.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``touchmove`` event.\n     */\n    _onTouchMove(e) {\n        const firstTouch = e.originalEvent.targetTouches[0];\n        const target = document.elementFromPoint(firstTouch.clientX,\n                                                 firstTouch.clientY);\n        const $node = this._getActualLineNumCell($(target));\n\n        if ($node !== null) {\n            const $row = $node.parent();\n\n            if (this._lastSeenIndex !== $row[0].rowIndex &&\n                this._isLineNumCell($node[0])) {\n                e.preventDefault();\n\n                this._removeOldRows($row);\n                this._addRow($row);\n            }\n        }\n    },\n\n    /**\n     * Handle touch cancellation events.\n     *\n     * This resets the line number selection. The user will need to begin the\n     * selection again.\n     */\n    _onTouchCancel() {\n        this._reset();\n    },\n\n    /**\n     * Return the line number for a row.\n     *\n     * Args:\n     *     row (Element):\n     *         The element to get the line number for.\n     *\n     * Returns:\n     *     number:\n     *     The line number.\n     */\n    getLineNum(row) {\n        return parseInt(row.getAttribute('line'), 10);\n    },\n});\n"],"mappings":"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"}