{"version":3,"file":"dialogView.js","names":["RB","DialogView","Backbone","View","extend","title","body","buttons","defaultOptions","events","initialize","options","visible","render","show","_","result","$el","append","_makeButtons","modalBox","defaults","$buttonsList","destroy","closest","on","_onDialogKeyDown","bind","hide","data","remove","prototype","call","$buttonsMap","map","buttonInfo","$button","$","val","label","attr","id","class","addClass","disabled","primary","_$primaryButton","danger","onClick","isFunction","click","_onFormSubmit","e","target","preventDefault","stopPropagation","which","ui","keyCode","ESCAPE"],"sources":["../../../../../../static/rb/js/ui/views/dialogView.es6.js"],"sourcesContent":["/**\n * Displays a modal dialog box with content and buttons.\n *\n * The dialog box can have a title and a list of buttons. It can be shown\n * or hidden on demand.\n *\n * This view can either be subclassed (with the contents in render() being\n * used to populate the dialog), or it can be tied to an element that already\n * contains content.\n *\n * Under the hood, this is a wrapper around $.modalBox.\n *\n * Subclasses of DialogView can specify a default title, list of buttons,\n * and default options for modalBox. The title and buttons can be overridden\n * when constructing the view by passing them as options.\n */\nRB.DialogView = Backbone.View.extend({\n    /** The default title to show for the dialog. */\n    title: null,\n\n    /** The default body to show in the dialog. */\n    body: null,\n\n    /** The default list of buttons to show for the dialog. */\n    buttons: [],\n\n    /** Default options to pass to $.modalBox(). */\n    defaultOptions: {},\n\n    /** Events handled by the view. */\n    events: {\n        'submit form': '_onFormSubmit',\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * The available options are 'title' and 'buttons'.\n     *\n     * options.title specifies the title shown on the dialog, overriding\n     * the title on the class.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     body (string or function, optional):\n     *         The body to show in the dialog.\n     *\n     *     buttons (Array of object):\n     *         A list of buttons. Each button may have the following keys:\n     *\n     *         danger (boolean, optional):\n     *             Whether the button performs a dangerous operation (such as\n     *             deleting user data).\n     *\n     *         disabled (boolean, optional):\n     *             Whether the button is disabled.\n     *\n     *         id (string, required):\n     *             The ID for the button.\n     *\n     *         label (string, required):\n     *             The label for the button.\n     *\n     *         onClick (function or string, optional):\n     *             The handler to invoke when the button is clicked. If set to\n     *             a function, that function will be called. If set to a\n     *             string, it will resolve to a function with that name on the\n     *             DialogView instance. If unset, the dialog will simply close\n     *             without invoking any actions.\n     *\n     *             The callback function can return ``false`` to prevent the\n     *             dialog from being closed.\n     *\n     *         primary (boolean, optional):\n     *             Whether the button is the primary action for the dialog.\n     *\n     *     title (string):\n     *         The title for the dialog.\n     */\n    initialize(options={}) {\n        this.options = options;\n\n        if (options.title) {\n            this.title = options.title;\n        }\n\n        if (options.body) {\n            this.body = options.body;\n        }\n\n        if (options.buttons) {\n            this.buttons = options.buttons;\n        }\n\n        this.visible = false;\n    },\n\n    /**\n     * Render the content of the dialog.\n     *\n     * By default, this does nothing. Subclasses can override to render\n     * custom content.\n     *\n     * Note that this will be called every time the dialog is shown, not just\n     * when it's first constructed.\n     *\n     * Returns:\n     *     RB.DialogView:\n     *     This object, for chaining.\n     */\n    render() {\n        return this;\n    },\n\n    /**\n     * Show the dialog.\n     */\n    show() {\n        if (!this.visible) {\n            const body = _.result(this, 'body');\n\n            if (body) {\n                this.$el.append(body);\n            }\n\n            this._makeButtons();\n            this.render();\n\n            this.$el.modalBox(_.defaults({\n                title: _.result(this, 'title'),\n                buttons: this.$buttonsList,\n                destroy: () => this.visible = false,\n            }, this.options, this.defaultOptions));\n\n            this.$el.closest('.modalbox-inner')\n                .on('keydown', this._onDialogKeyDown.bind(this));\n\n            this.visible = true;\n        }\n    },\n\n    /**\n     * Hide the dialog.\n     */\n    hide() {\n        if (this.visible) {\n            /*\n             * The jQuery-UI widget can self-destruct in some cases depending\n             * on how events bubble. If that's the case, we skip an extra\n             * destroy call because otherwise we get errors on the console.\n             */\n            if (this.$el.data('uiModalBox')) {\n                this.$el.modalBox('destroy');\n            }\n\n            this.visible = false;\n        }\n    },\n\n    /**\n     * Remove the dialog from the DOM.\n     */\n    remove() {\n        this.hide();\n\n        Backbone.View.prototype.remove.call(this);\n    },\n\n    /**\n     * Return a list of button elements for rendering.\n     *\n     * This will take the button list that was provided when constructing\n     * the dialog and turn each into an element. The elements are also saved to\n     * a map to allow child components to access the buttons.\n     *\n     * Returns:\n     *     Array of jQuery:\n     *     An array of button elements.\n     */\n    _makeButtons() {\n        this.$buttonsMap = {};\n        this.$buttonsList = this.buttons.map(buttonInfo => {\n            const $button = $('<input type=\"button\" />')\n                .val(buttonInfo.label)\n                .attr('id', buttonInfo.id);\n\n            if (buttonInfo.class) {\n                $button.addClass(buttonInfo.class);\n            }\n\n            if (buttonInfo.disabled) {\n                $button.attr('disabled', true);\n            }\n\n            if (buttonInfo.primary) {\n                $button.addClass('primary');\n                this._$primaryButton = $button;\n            }\n\n            if (buttonInfo.danger) {\n                $button.addClass('danger');\n            }\n\n            if (buttonInfo.onClick) {\n                if (_.isFunction(buttonInfo.onClick)) {\n                    $button.click(buttonInfo.onClick);\n                } else {\n                    $button.click(this[buttonInfo.onClick].bind(this));\n                }\n            }\n\n            this.$buttonsMap[buttonInfo.id] = $button;\n\n            return $button;\n        });\n    },\n\n    /**\n     * Handle form submission events for the dialog.\n     *\n     * This will trigger the primary button if the form in the dialog does not\n     * have an explicit action.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onFormSubmit(e) {\n        if (!$(e.target).attr('action')) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if (this._$primaryButton) {\n                this._$primaryButton[0].click();\n            }\n        }\n    },\n\n    /**\n     * Handle keydown events for the dialog.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the callback.\n     */\n    _onDialogKeyDown(e) {\n        if (e.which === $.ui.keyCode.ESCAPE) {\n            e.stopPropagation();\n            e.preventDefault();\n\n            this.hide();\n        }\n    },\n});\n"],"mappings":"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"}