{"version":3,"file":"resourceCollection.js","names":["RB","ResourceCollection","BaseCollection","extend","initialize","models","options","parentResource","extraQueryData","maxResults","hasPrev","hasNext","currentPage","totalResults","undefined","_fetchURL","_links","url","links","get","listKey","_","result","model","prototype","link","href","parse","rsp","total_results","fetchingAll","prev","next","page","fetch","context","isFunction","success","error","complete","console","warn","promiseToCallbacks","newOptions","data","start","reset","remove","expandedFields","length","expand","join","defaults","ready","call","fetchPrev","Promise","resolve","fetchNext","enforceHasNext","fetchAll","fetchOptions","_prepareModel","apply","arguments","set"],"sources":["../../../../../../static/rb/js/resources/collections/resourceCollection.es6.js"],"sourcesContent":["/**\n * Base collection for resource models.\n *\n * ResourceCollection handles the fetching of models from resource lists\n * in the API.\n *\n * It can do pagination by using fetchNext/fetchPrev. Callers can check\n * hasNext/hasPrev to determine if they've reached the end.\n *\n * To fetch one page at a time, use fetch(). This can take an optional\n * starting point.\n *\n * Use fetchAll to automatically paginate through all items and store them\n * all within the collection.\n */\nRB.ResourceCollection = RB.BaseCollection.extend({\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial set of models for the collection.\n     *\n     *     options (object):\n     *         Options for the collection.\n     *\n     * Option Args:\n     *     parentResource (RB.BaseResource):\n     *         The parent API resource.\n     *\n     *     extraQueryData (object):\n     *         Additional attributes to include in the API request query\n     *         string.\n     */\n    initialize(models, options) {\n        this.parentResource = options.parentResource;\n        this.extraQueryData = options.extraQueryData;\n        this.maxResults = options.maxResults;\n        this.hasPrev = false;\n        this.hasNext = false;\n        this.currentPage = 0;\n\n        /*\n         * Undefined means \"we don't know how many results there are.\"\n         * This is a valid value when parsing the payload later. It\n         * may also be a number.\n         */\n        this.totalResults = undefined;\n\n        this._fetchURL = null;\n        this._links = null;\n    },\n\n    /**\n     * Return the URL for fetching models.\n     *\n     * This will make use of a URL provided by fetchNext/fetchPrev/fetchAll,\n     * if provided.\n     *\n     * Otherwise, this will try to get the URL from the parent resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL to fetch.\n     */\n    url() {\n        if (this._fetchURL) {\n            return this._fetchURL;\n        }\n\n        if (this.parentResource) {\n            const links = this.parentResource.get('links');\n            const listKey = _.result(this.model.prototype, 'listKey');\n            const link = links[listKey];\n\n            return link ? link.href : null;\n        }\n\n        return null;\n    },\n\n    /**\n     * Parse the results from the list payload.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     *     options (object):\n     *         The options that were used for the fetch operation.\n     *\n     * Option Args:\n     *     fetchingAll (boolean):\n     *         Whether we're in the process of fetching all the items.\n     *\n     *     page (number):\n     *         The page of results that were fetched.\n     */\n    parse(rsp, options={}) {\n        const listKey = _.result(this.model.prototype, 'listKey');\n\n        this._links = rsp.links || null;\n        this.totalResults = rsp.total_results;\n\n        if (options.fetchingAll) {\n            this.hasPrev = false;\n            this.hasNext = false;\n            this.currentPage = 0;\n        } else {\n            this.totalResults = rsp.total_results;\n            this.hasPrev = (this._links !== null &&\n                            this._links.prev !== undefined);\n            this.hasNext = (this._links !== null &&\n                            this._links.next !== undefined);\n            this.currentPage = options.page;\n        }\n\n        return rsp[listKey];\n    },\n\n    /**\n     * Fetch models from the list.\n     *\n     * By default, this will replace the list of models in this collection.\n     * That can be changed by providing `reset: false` in options.\n     *\n     * The first page of resources will be fetched unless options.start is\n     * set. The value is the start position for the number of objects, not\n     * pages.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to be used when calling callbacks.\n     *\n     * Option Args:\n     *     start (string):\n     *         The start position to use when fetching paginated results.\n     *\n     *     maxResults (number):\n     *         The number of results to return.\n     *\n     *     reset (boolean):\n     *         Whether the collection should be reset with the newly-fetched\n     *         items, or those items should be appended to the collection.\n     *\n     *     data (object):\n     *         Data to pass to the API request.\n     *\n     *     success (function):\n     *         Callback to be called when the fetch is successful.\n     *\n     *     error (function):\n     *         Callback to be called when the fetch fails.\n     *\n     *     complete (function):\n     *         Callback to be called after either success or error.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the fetch operation is complete.\n     */\n    fetch: async function(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ResourceCollection.fetch was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.fetch(newOptions));\n        }\n\n        const data = _.extend({}, options.data);\n\n        if (options.start !== undefined) {\n            data.start = options.start;\n        }\n\n        /*\n         * There's a couple different ways that the max number of results\n         * can be specified. We'll want to support them all.\n         *\n         * If a value is passed in extraQueryData, it takes precedence.\n         * We'll just set it further down. Otherwise, options.maxResults\n         * will be used if passed, falling back on the maxResults passed\n         * during collection construction.\n         */\n        if (!this.extraQueryData ||\n            this.extraQueryData['max-results'] === undefined) {\n            if (options.maxResults !== undefined) {\n                data['max-results'] = options.maxResults;\n            } else if (this.maxResults) {\n                data['max-results'] = this.maxResults;\n            }\n        }\n\n        if (options.reset === undefined) {\n            options.reset = true;\n        }\n\n        /*\n         * Versions of Backbone prior to 1.1 won't respect the reset option,\n         * instead requiring we use 'remove'. Support this for compatibility,\n         * until we move to Backbone 1.1.\n         */\n        options.remove = options.reset;\n\n        const expandedFields = this.model.prototype.expandedFields;\n        if (expandedFields.length > 0) {\n            data.expand = expandedFields.join(',');\n        }\n\n        if (this.extraQueryData) {\n            _.defaults(data, this.extraQueryData);\n        }\n\n        options.data = data;\n\n        if (this.parentResource) {\n            await this.parentResource.ready();\n        }\n\n        await RB.BaseCollection.prototype.fetch.call(this, options);\n    },\n\n    /**\n     * Fetch the previous batch of models from the resource list.\n     *\n     * This requires hasPrev to be true, from a prior fetch.\n     *\n     * The collection's list of models will be replaced with the new list\n     * after the fetch succeeds. Each time fetchPrev is called, the collection\n     * will consist only of that page's batch of models. This can be overridden\n     * by providing `reset: false` in options.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    fetchPrev(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ResourceCollection.fetchPrev was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.fetchPrev(newOptions));\n        }\n\n        if (!this.hasPrev) {\n            return Promise.resolve();\n        }\n\n        this._fetchURL = this._links.prev.href;\n\n        return this.fetch(\n            _.defaults({\n                page: this.currentPage - 1\n            }, options));\n    },\n\n    /**\n     * Fetch the next batch of models from the resource list.\n     *\n     * This requires hasNext to be true, from a prior fetch.\n     *\n     * The collection's list of models will be replaced with the new list\n     * after the fetch succeeds. Each time fetchNext is called, the collection\n     * will consist only of that page's batch of models. This can be overridden\n     * by providing `reset: false` in options.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    fetchNext(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ResourceCollection.fetchNext was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.fetchNext(newOptions));\n        }\n\n        if (!this.hasNext && options.enforceHasNext !== false) {\n            return Promise.resolve();\n        }\n\n        this._fetchURL = this._links.next.href;\n\n        return this.fetch(\n            _.defaults({\n                page: this.currentPage + 1\n            }, options));\n    },\n\n    /**\n     * Fetch all models from the resource list.\n     *\n     * This will fetch all the models from a resource list on a server,\n     * paginating automatically until all models are fetched. The result is\n     * a list of models on the server.\n     *\n     * This differs from fetch/fetchPrev/fetchNext, which will replace the\n     * collection each time a page of resources are loaded.\n     *\n     * This can end up slowing down the server. Use it carefully.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the fetch operation.\n     *\n     *     context (object):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async fetchAll(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ResourceCollection.fetchNext was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.fetchAll(newOptions));\n        }\n\n        const fetchOptions = _.defaults({\n            reset: false,\n            fetchingAll: true,\n            enforceHasNext: false,\n            maxResults: 50,\n        }, options);\n\n        this._fetchURL = null;\n\n        this.reset();\n\n        await this.fetch(fetchOptions);\n\n        while (this._links.next) {\n            await this.fetchNext(fetchOptions);\n        }\n    },\n\n    /**\n     * Prepare the model for the collection.\n     *\n     * This overrides Collection's _prepareModel to ensure that the resource\n     * has the proper parentObject set.\n     *\n     * Returns:\n     *     Backbone.Model:\n     *     The new model.\n     */\n    _prepareModel() {\n        const model = RB.BaseCollection.prototype._prepareModel.apply(this, arguments);\n\n        model.set('parentObject', this.parentResource);\n\n        return model;\n    },\n});\n"],"mappings":"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"}