{"version":3,"file":"diffCommentBlockModel.js","names":["RB","DiffCommentBlock","AbstractCommentBlock","extend","defaults","_","fileDiffID","interFileDiffID","baseFileDiffID","beginLineNum","endLineNum","$beginRow","$endRow","prototype","getNumLines","get","createComment","id","createDiffComment"],"sources":["../../../../../../static/rb/js/diffviewer/models/diffCommentBlockModel.es6.js"],"sourcesContent":["/**\n * Represents the comments on a region of a diff.\n *\n * DiffCommentBlock deals with creating and representing comments that exist\n * in a specific line range of a diff.\n *\n * Model Attributes:\n *     baseFileDiffID (number):\n *         The ID of the base FileDiff that this comment is on.\n *\n *         This attribute is mutually exclusive with interFileDiffID.\n *\n *     fileDiffID (number):\n *         The ID of the FileDiff that this comment is on.\n *\n *     interFileDiffID (number):\n *         The ID of the inter-FileDiff that this comment is on, if any.\n *\n *         This attribute is mutually exclusive with baseFileDiffID.\n *\n *     beginLineNum (number):\n *         The first line number in the file that this comment is on.\n *\n *     endLineNUm (number):\n *         The last line number in the file that this comment is on.\n *\n *     $beginRow (jQuery):\n *         The first row in the diffviewer that this comment is on.\n *\n *     $endRow (jQuery):\n *         The last row in the diffviewer that this comment is on.\n *\n * See Also:\n *     :js:class:`RB.AbstractCommentBlock`:\n *         For the attributes defined by the base model.\n */\nRB.DiffCommentBlock = RB.AbstractCommentBlock.extend({\n    defaults: _.defaults({\n        fileDiffID: null,\n        interFileDiffID: null,\n        baseFileDiffID: null,\n        beginLineNum: null,\n        endLineNum: null,\n        $beginRow: null,\n        $endRow: null,\n    }, RB.AbstractCommentBlock.prototype.defaults),\n\n    /**\n     * Return the number of lines this comment block spans.\n     *\n     * Returns:\n     *     number:\n     *     The number of lines spanned by this comment.\n     */\n    getNumLines() {\n        return this.get('endLineNum') + this.get('beginLineNum') + 1;\n    },\n\n    /**\n     * Create a DiffComment for the given comment ID.\n     *\n     * Args:\n     *     id (number):\n     *         The ID of the comment to instantiate the model for.\n     *\n     * Returns:\n     *     RB.DiffComment:\n     *     The new comment model.\n     */\n    createComment(id) {\n        return this.get('review').createDiffComment({\n            id: id,\n            fileDiffID: this.get('fileDiffID'),\n            interFileDiffID: this.get('interFileDiffID'),\n            beginLineNum: this.get('beginLineNum'),\n            endLineNum: this.get('endLineNum'),\n            baseFileDiffID: this.get('baseFileDiffID'),\n        });\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,gBAAH,GAAsBD,EAAE,CAACE,oBAAH,CAAwBC,MAAxB,CAA+B;EACjDC,QAAQ,EAAEC,CAAC,CAACD,QAAF,CAAW;IACjBE,UAAU,EAAE,IADK;IAEjBC,eAAe,EAAE,IAFA;IAGjBC,cAAc,EAAE,IAHC;IAIjBC,YAAY,EAAE,IAJG;IAKjBC,UAAU,EAAE,IALK;IAMjBC,SAAS,EAAE,IANM;IAOjBC,OAAO,EAAE;EAPQ,CAAX,EAQPZ,EAAE,CAACE,oBAAH,CAAwBW,SAAxB,CAAkCT,QAR3B,CADuC;;EAWjD;AACJ;AACA;AACA;AACA;AACA;AACA;EACIU,WAAW,GAAG;IACV,OAAO,KAAKC,GAAL,CAAS,YAAT,IAAyB,KAAKA,GAAL,CAAS,cAAT,CAAzB,GAAoD,CAA3D;EACH,CApBgD;;EAsBjD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,aAAa,CAACC,EAAD,EAAK;IACd,OAAO,KAAKF,GAAL,CAAS,QAAT,EAAmBG,iBAAnB,CAAqC;MACxCD,EAAE,EAAEA,EADoC;MAExCX,UAAU,EAAE,KAAKS,GAAL,CAAS,YAAT,CAF4B;MAGxCR,eAAe,EAAE,KAAKQ,GAAL,CAAS,iBAAT,CAHuB;MAIxCN,YAAY,EAAE,KAAKM,GAAL,CAAS,cAAT,CAJ0B;MAKxCL,UAAU,EAAE,KAAKK,GAAL,CAAS,YAAT,CAL4B;MAMxCP,cAAc,EAAE,KAAKO,GAAL,CAAS,gBAAT;IANwB,CAArC,CAAP;EAQH;;AA1CgD,CAA/B,CAAtB"}