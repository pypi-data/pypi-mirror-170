{"version":3,"file":"reviewRequestEditorModel.js","names":["RB","ReviewRequestEditor","Backbone","Model","extend","defaults","commitMessages","changeDescriptionRenderedText","closeDescriptionRenderedText","commentIssueManager","editable","editCount","hasDraft","fileAttachments","fileAttachmentComments","mutableByUser","pendingSaveCount","publishing","reviewRequest","screenshots","showSendEmail","statusEditable","statusMutableByUser","initialize","get","Collection","model","FileAttachment","set","listenTo","_onFileAttachmentOrScreenshotAdded","each","bind","Screenshot","draft","trigger","_computeEditable","parse","attrs","_","commits","DiffCommitCollection","createFileAttachment","attributes","fileAttachment","attachmentHistoryID","oldAttachment","findWhere","index","indexOf","remove","add","at","getDraftField","fieldName","options","useExtraData","data","useRawTextValue","rawTextFields","extra_data","setDraftField","value","context","undefined","isFunction","success","error","complete","console","warn","promiseToCallbacks","newOptions","jsonFieldName","assert","allowMarkdown","jsonTextTypeFieldName","richText","force_text_type","include_text_types","save","then","decr","publishDraft","err","message","rsp","xhr","errorPayload","fields","fieldValue","fieldValueLen","length","i","interpolate","Promise","reject","ensureCreated","links","submitter","title","confirm","publish","trivial","incr","attr","isNumber","validate","strings","has","UNBALANCED_EDIT_COUNT","state","pending","ReviewRequest","PENDING","attachment"],"sources":["../../../../../static/rb/js/models/reviewRequestEditorModel.es6.js"],"sourcesContent":["/**\n * Handles all operations and state related to editing review requests.\n *\n * This manages the editing of all fields and objects on a review request,\n * the publishing workflow, and validation.\n *\n * Model Attributes:\n *     commits (RB.DiffCommitCollection):\n *         The collection of commits on this review request.\n *\n *     changeDescriptionRenderedText (string):\n *         The rendered change description text, if any.\n *\n *     closeDescriptionRenderedText (string):\n *         The rendered close description text, if any.\n *\n *     commentIssueManager (RB.CommentIssueManager):\n *         The issue manager for the editor.\n *\n *     editable (boolean):\n *         Whether or not the review request is currently editable.\n *\n *         This is derived from the ``mutableByUser`` attribute and the review\n *         request's ``state`` attribute.\n *\n *     editCount (number):\n *         The number of outstanding edits.\n *\n *     hasDraft (boolean):\n *         Whether or not a draft currently exists.\n *\n *     fileAttachemnts (Backbone.Collection of RB.FileAttachment):\n *         The files attached to this review request.\n *\n *     fileAttachmentComments (object):\n *         A mapping of file attachment IDs to their comments.\n *\n *     mutableByUser (boolean):\n *         Whether or not the user can mutate the review request.\n *\n *     pendingSaveCount (number):\n *         The number of fields that have yet to be saved.\n *\n *     publishing (boolean):\n *         Whether or not we are currently publishing the review request.\n *\n *     reviewRequest (RB.ReviewRequest):\n *         The review request model.\n *\n *     screenshots (Backbone.Collection of RB.Screenshot):\n *         The legacy screenshots attached to this review request.\n *\n *     showSendEmail (boolean):\n *         Whether or not to show the \"Send e-mail\" checkbox for this review\n *         request.\n *\n *     statusEditable (boolean):\n *         Whether or not the status is currently editable.\n *\n *     statusMutableByUser (boolean):\n *         Whether or not the status is mutable by the current user.\n */\nRB.ReviewRequestEditor = Backbone.Model.extend({\n    defaults() {\n        return {\n            commitMessages: [],\n            changeDescriptionRenderedText: '',\n            closeDescriptionRenderedText: '',\n            commentIssueManager: null,\n            editable: false,\n            editCount: 0,\n            hasDraft: false,\n            fileAttachments: null,\n            fileAttachmentComments: {},\n            mutableByUser: false,\n            pendingSaveCount: 0,\n            publishing: false,\n            reviewRequest: null,\n            screenshots: null,\n            showSendEmail: false,\n            statusEditable: false,\n            statusMutableByUser: false,\n        };\n    },\n\n    /**\n     * Initialize the editor.\n     */\n    initialize() {\n        const reviewRequest = this.get('reviewRequest');\n\n        // Set up file attachments.\n        let fileAttachments = this.get('fileAttachments');\n\n        if (fileAttachments === null) {\n            fileAttachments = new Backbone.Collection([], {\n                model: RB.FileAttachment,\n            });\n            this.set('fileAttachments', fileAttachments);\n        }\n\n        this.listenTo(fileAttachments, 'add',\n                      this._onFileAttachmentOrScreenshotAdded);\n        fileAttachments.each(\n            this._onFileAttachmentOrScreenshotAdded.bind(this));\n\n        // Set up screenshots.\n        let screenshots = this.get('screenshots');\n\n        if (screenshots === null) {\n            screenshots = new Backbone.Collection([], {\n                model: RB.Screenshot,\n            });\n            this.set('screenshots', screenshots);\n        }\n\n        this.listenTo(screenshots, 'add',\n                      this._onFileAttachmentOrScreenshotAdded);\n        screenshots.each(\n            this._onFileAttachmentOrScreenshotAdded.bind(this));\n\n        // Connect to other signals.\n        this.listenTo(reviewRequest.draft, 'saving',\n                      () => this.trigger('saving'));\n        this.listenTo(reviewRequest.draft, 'saved',\n                      () => this.trigger('saved'));\n        this.listenTo(reviewRequest, 'change:state', this._computeEditable);\n        this._computeEditable();\n    },\n\n    /**\n     * Parse the given attributes into model attributes.\n     *\n     * Args:\n     *     attrs (object):\n     *        The attributes to parse.\n     *\n     * Returns:\n     *     object:\n     *     The parsed attributes.\n     */\n    parse(attrs) {\n        return _.defaults({\n            commits: new RB.DiffCommitCollection(\n                attrs.commits || [],\n                {parse: true}\n            ),\n        }, attrs);\n    },\n\n    /**\n     * Create a file attachment tracked by the editor.\n     *\n     * This wraps RB.ReviewRequestDraft.createFileAttachment and stores the\n     * file attachment in the fileAttachments collection.\n     *\n     * This should be used instead of\n     * RB.ReviewRequestDraft.createFileAttachment for any existing or newly\n     * uploaded file attachments.\n     *\n     * Args:\n     *     attributes (object, optional):\n     *         Model attributes for the new file attachment.\n     *\n     * Returns:\n     *     RB.FileAttachment:\n     *     The new file attachment model.\n     */\n    createFileAttachment(attributes={}) {\n        const draft = this.get('reviewRequest').draft;\n        const fileAttachment = draft.createFileAttachment(attributes);\n\n        const fileAttachments = this.get('fileAttachments');\n\n        if (attributes.attachmentHistoryID) {\n            const oldAttachment = fileAttachments.findWhere({\n                attachmentHistoryID: attributes.attachmentHistoryID,\n            });\n            const index = fileAttachments.indexOf(oldAttachment);\n\n            fileAttachments.remove(oldAttachment);\n            fileAttachments.add(fileAttachment, { at: index, });\n        } else {\n            fileAttachments.add(fileAttachment);\n        }\n\n        return fileAttachment;\n    },\n\n    /**\n     * Return a field from the draft.\n     *\n     * This will look either in the draft's data or in the extraData (for\n     * custom fields), returning the value provided either when the page\n     * was generated or when it was last edited.\n     *\n     * Args:\n     *     fieldName (string):\n     *         The name of the field to get.\n     *\n     *     options (object, optional):\n     *         Options for the operation.\n     *\n     * Option Args:\n     *     jsonFieldName (string, optional):\n     *         The key to use for the field name in the API. This is required\n     *         if ``useExtraData`` is set.\n     *\n     *     useExtraData (boolean, optional):\n     *         Whether the field is stored as part of the extraData or is a\n     *         regular attribute. This requires ``jsonFieldName`` to be set.\n     *\n     *     useRawTextValue (boolean, optional):\n     *         Whether to return the raw text value for a field. This requires\n     *         ``useExtraData`` to be set to ``true``.\n     *\n     * Returns:\n     *     *:\n     *     The value of the field.\n     */\n    getDraftField(fieldName, options={}) {\n        const reviewRequest = this.get('reviewRequest');\n        const draft = reviewRequest.draft;\n\n        if (options.useExtraData) {\n            let data;\n\n            if (options.useRawTextValue) {\n                const rawTextFields = draft.get('rawTextFields');\n\n                if (rawTextFields && rawTextFields.extra_data) {\n                    data = rawTextFields.extra_data;\n                }\n            }\n\n            if (!data) {\n                data = draft.get('extraData');\n            }\n\n            return data[fieldName];\n        } else if (fieldName === 'closeDescription' ||\n                   fieldName === 'closeDescriptionRichText') {\n            return reviewRequest.get(fieldName);\n        } else {\n            return draft.get(fieldName);\n        }\n    },\n\n    /**\n     * Set a field in the draft.\n     *\n     * If we're in the process of publishing, this will check if we have saved\n     * all fields before publishing the draft.\n     *\n     * Once the field has been saved, two events will be triggered:\n     *\n     *     * fieldChanged(fieldName, value)\n     *     * fieldChanged:<fieldName>(value)\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     fieldName (string):\n     *         The name of the field to set.\n     *\n     *     value (*):\n     *         The value to set in the field.\n     *\n     *     options (object, optional):\n     *         Options for the set operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Option Args:\n     *     allowMarkdown (boolean, optional):\n     *         Whether the field can support rich text (Markdown).\n     *         This requires that ``jsonTextTypeFieldName`` is set.\n     *\n     *     jsonFieldName (string):\n     *         The key to use for the field name in the API. This is required.\n     *\n     *     jsonTextTypeFieldName (string, optional):\n     *         The key to use for the name of the field indicating the text\n     *         type (rich text or plain) in the API.\n     *\n     *     richText (boolean, optional):\n     *         Whether the field is rich text (Markdown) formatted.\n     *\n     *     useExtraData (boolean, optional):\n     *         Whether the field should be set as a key in extraData or as a\n     *         direct attribute.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    setDraftField: function(fieldName, value, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewRequestEditor.setDraftField was called ' +\n                         'using callbacks. Callers should be updated to ' +\n                         'use promises instead.');\n            return RB.promiseToCallbacks(\n                options, context,\n                newOptions => this.setDraftField(fieldName, value, newOptions));\n        }\n\n        const reviewRequest = this.get('reviewRequest');\n        const data = {};\n\n        let jsonFieldName = options.jsonFieldName;\n\n        console.assert(\n            jsonFieldName,\n            `jsonFieldName must be set when setting draft ` +\n            `field \"${fieldName}\".`);\n\n        if (options.useExtraData) {\n            jsonFieldName = `extra_data.${jsonFieldName}`;\n        }\n\n        if (options.allowMarkdown) {\n            let jsonTextTypeFieldName = options.jsonTextTypeFieldName;\n\n            console.assert(jsonTextTypeFieldName,\n                           'jsonTextTypeFieldName must be set.');\n\n            if (options.useExtraData) {\n                jsonTextTypeFieldName = `extra_data.${jsonTextTypeFieldName}`;\n            }\n\n            const richText = !!options.richText;\n            data[jsonTextTypeFieldName] = richText ? 'markdown' : 'plain';\n\n            data.force_text_type = 'html';\n            data.include_text_types = 'raw';\n        }\n\n        data[jsonFieldName] = value;\n\n        return reviewRequest.draft.save({ data }).then(\n            () => {\n                this.set('hasDraft', true);\n\n                this.trigger('fieldChanged:' + fieldName, value);\n                this.trigger('fieldChanged', fieldName, value);\n\n                if (this.get('publishing')) {\n                    this.decr('pendingSaveCount');\n\n                    if (this.get('pendingSaveCount') === 0) {\n                        this.set('publishing', false);\n                        this.publishDraft();\n                    }\n                }\n            },\n            err => {\n                let message = '';\n\n                this.set('publishing', false);\n\n                const rsp = err.xhr.errorPayload;\n\n                /*\n                 * An error can be caused by a 503 when the site is in\n                 * read-only mode, in which case the fields will be\n                 * empty.\n                 */\n                if (rsp.fields !== undefined) {\n                    const fieldValue = rsp.fields[jsonFieldName];\n                    const fieldValueLen = fieldValue.length;\n\n                    /* Wrap each term in quotes or a leading 'and'. */\n                    _.each(fieldValue, (value, i) => {\n                        // XXX: This method isn't localizable.\n                        if (i === fieldValueLen - 1 && fieldValueLen > 1) {\n                            if (i > 2) {\n                                message += ', ';\n                            }\n\n                            message += ` and \"${value}\"`;\n                        } else {\n                            if (i > 0) {\n                                message += ', ';\n                            }\n\n                            message += `\"${value}\"`;\n                        }\n                    });\n\n                    if (fieldName === 'targetGroups') {\n                        message = interpolate(\n                            ngettext('Group %s does not exist.',\n                                     'Groups %s do not exist.',\n                                     fieldValue.length),\n                            [message]);\n                    } else if (fieldName === 'targetPeople') {\n                        message = interpolate(\n                            ngettext('User %s does not exist.',\n                                     'Users %s do not exist.',\n                                     fieldValue.length),\n                            [message]);\n                    } else if (fieldName === 'submitter') {\n                        message = interpolate(\n                            gettext('User %s does not exist.'),\n                            [message]);\n                    } else if (fieldName === 'dependsOn') {\n                        message = interpolate(\n                            ngettext('Review Request %s does not exist.',\n                                     'Review Requests %s do not exist.',\n                                     fieldValue.length),\n                            [message]);\n                    }\n                }\n\n                err.message = message;\n                return Promise.reject(err);\n            });\n    },\n\n    /**\n     * Publish the draft to the server.\n     *\n     * This assumes all fields have been saved.\n     *\n     * If there's an error during saving or validation, the \"publishError\"\n     * event will be triggered with the error message. Otherwise, upon\n     * success, the \"publish\" event will be triggered. However, users will\n     * have the chance to cancel the publish in the event that the submitter\n     * has been changed.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the publish operation.\n     *\n     * Option Args:\n     *     trivial (boolean):\n     *         Whether the publish is \"trivial\" (if true, no e-mail\n     *         notifications will be sent).\n     */\n    async publishDraft(options={}) {\n        const reviewRequest = this.get('reviewRequest');\n\n        try {\n            await reviewRequest.draft.ensureCreated();\n\n            if (reviewRequest.attributes.links.submitter.title !==\n                reviewRequest.draft.attributes.links.submitter.title) {\n                if (!confirm(gettext('Are you sure you want to change the ownership of this review request? Doing so may prevent you from editing the review request afterwards.'))) {\n                    return;\n                }\n            }\n\n            await reviewRequest.draft.publish({\n                trivial: options.trivial ? 1 : 0,\n            });\n            this.trigger('published');\n        } catch (err) {\n            this.trigger('publishError', err.message);\n        }\n    },\n\n    /**\n     * Increment an attribute by 1.\n     *\n     * The attribute must be an integer.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to increment.\n     */\n    incr(attr) {\n        const value = this.get(attr);\n        console.assert(_.isNumber(value));\n        this.set(attr, value + 1, {\n            validate: true,\n        });\n    },\n\n    /**\n     * Decrement an attribute by 1.\n     *\n     * The attribute must be an integer.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to decrement.\n     */\n    decr(attr) {\n        const value = this.get(attr);\n        console.assert(_.isNumber(value));\n        this.set(attr, value - 1, {\n            validate: true,\n        });\n    },\n\n    /**\n     * Validate the given attributes.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes to validate.\n     */\n    validate(attrs) {\n        const strings = RB.ReviewRequestEditor.strings;\n\n        if (_.has(attrs, 'editCount') && attrs.editCount < 0) {\n            return strings.UNBALANCED_EDIT_COUNT;\n        }\n    },\n\n    /**\n     * Compute the editable state of the review request and open/close states.\n     *\n     * The review request is editable if the user has edit permissions and it's\n     * not closed.\n     *\n     * The close state and accompanying description is editable if the user\n     * has the ability to close the review request and it's currently closed.\n     */\n    _computeEditable() {\n        const state = this.get('reviewRequest').get('state');\n        const pending = (state === RB.ReviewRequest.PENDING);\n\n        this.set({\n            editable: this.get('mutableByUser') && pending,\n            statusEditable: this.get('statusMutableByUser') && !pending,\n        });\n    },\n\n    /**\n     * Handle when a FileAttachment or Screenshot is added.\n     *\n     * Listens for events on the FileAttachment or Screenshot and relays\n     * them to the editor.\n     *\n     * Args:\n     *     attachment (RB.FileAttachment or RB.Screenshot):\n     *         The new file attachment or screenshot.\n     */\n    _onFileAttachmentOrScreenshotAdded(attachment) {\n        this.listenTo(attachment, 'saving',\n                      () => this.trigger('saving'));\n\n        this.listenTo(attachment, 'saved destroy', () => {\n            this.set('hasDraft', true);\n            this.trigger('saved');\n        });\n    },\n}, {\n    strings: {\n        UNBALANCED_EDIT_COUNT:\n            gettext('There is an internal error balancing the edit count'),\n    },\n});\n"],"mappings":"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"}