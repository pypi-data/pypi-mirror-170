{"version":3,"file":"urlUtils.js","names":["RB","getLocationHash","url","undefined","window","location","href","rawHash","split","decodedHash","decodeURIComponent","match","console","warn"],"sources":["../../../../../static/rb/js/utils/urlUtils.es6.js"],"sourcesContent":["/**\n * Return the location hash in a safe manner.\n *\n * If the hash does not look like it can be trusted, we will instead return\n * the empty string.\n *\n * Args:\n *     url (string, optional):\n *         An optional URL to parse the hash out of. If not provided,\n *         ``window.location.href`` is used instead.\n *\n * Returns:\n *     string:\n *     The location hash.\n */\nRB.getLocationHash = function(url) {\n    if (url === undefined) {\n        url = window.location.href;\n    }\n\n    const rawHash = url.split('#')[1] || '';\n    const decodedHash = decodeURIComponent(rawHash);\n\n    if (!decodedHash.match(/^[A-Za-z0-9,_\\.-]*$/)) {\n        /*\n         * This hash contains characters we cannot necessarily trust.\n         * Instead of hoping we can trust it or attempting to sanitize it,\n         * we are going to ignore it.\n         */\n        console.warn('Ignoring location hash \"%s\".', rawHash);\n        return '';\n    }\n\n    return decodedHash;\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,eAAH,GAAqB,UAASC,GAAT,EAAc;EAC/B,IAAIA,GAAG,KAAKC,SAAZ,EAAuB;IACnBD,GAAG,GAAGE,MAAM,CAACC,QAAP,CAAgBC,IAAtB;EACH;;EAED,MAAMC,OAAO,GAAGL,GAAG,CAACM,KAAJ,CAAU,GAAV,EAAe,CAAf,KAAqB,EAArC;EACA,MAAMC,WAAW,GAAGC,kBAAkB,CAACH,OAAD,CAAtC;;EAEA,IAAI,CAACE,WAAW,CAACE,KAAZ,CAAkB,qBAAlB,CAAL,EAA+C;IAC3C;AACR;AACA;AACA;AACA;IACQC,OAAO,CAACC,IAAR,CAAa,8BAAb,EAA6CN,OAA7C;IACA,OAAO,EAAP;EACH;;EAED,OAAOE,WAAP;AACH,CAnBD"}