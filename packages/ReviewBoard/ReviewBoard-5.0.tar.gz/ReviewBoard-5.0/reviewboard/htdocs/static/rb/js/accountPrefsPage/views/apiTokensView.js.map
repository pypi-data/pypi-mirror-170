{"version":3,"file":"apiTokensView.js","names":["POLICY_READ_WRITE","POLICY_READ_ONLY","POLICY_CUSTOM","POLICY_LABELS","APITokenItem","RB","Config","ResourceListItem","extend","defaults","_","policyType","lastUsed","localSiteName","showRemove","prototype","syncAttrs","initialize","_super","apply","arguments","on","_onPolicyTypeChanged","policy","get","_guessPolicyType","_policyMenuAction","id","label","children","_makePolicyAction","dispatchOnClick","actions","unshift","set","createResource","attrs","APIToken","userName","UserSession","instance","localSitePrefix","collection","saveExpires","expires","_saveAttribute","saveNote","note","savePolicy","attr","value","resource","ready","save","isEqual","defaultPolicies","readOnly","readWrite","options","type","name","propName","radioValue","trigger","newPolicy","console","assert","APITokenItemCollection","Backbone","Collection","model","models","PolicyEditorView","View","template","join","prevPolicyType","_codeMirror","_$policy","_$saveButtons","render","isEmpty","custom","$el","html","instructions","interpolate","MANUAL_URL","$","val","JSON","stringify","modalBox","title","buttons","click","bind","cancel","find","CodeMirror","fromTextArea","mode","lineNumbers","lineWrapping","matchBrackets","lint","onUpdateLinting","_onUpdateLinting","gutters","focus","remove","closeOnSave","policyStr","getValue","strip","parse","e","SyntaxError","alert","err","xhr","errorPayload","code","fields","msg","annotationsNotSorted","prop","length","APITokenItemView","Djblets","ListItemView","EMPTY_NOTE_PLACEHOLDER","events","actionHandlers","_$expires","_$note","_$tokenState","listenTo","_updateExpires","_updateNote","call","not","inlineEditor","editIconClass","beginEdit","complete","tomorrow","moment","local","add","expiresView","DateInlineEditorView","el","descriptorText","formatResult","startOf","format","minDate","rawValue","getActionsParent","getRenderContext","expiresTimeHTML","timesince","toggleClass","text","_onCopyClicked","preventDefault","stopPropagation","select","document","execCommand","_onCustomPolicyClicked","view","_onRemoveClicked","destroy","SiteAPITokensView","className","generateTokenTemplate","apiTokens","apiTokensList","List","_listView","ListView","ItemView","animateItems","prependTo","_$generateTokenItem","generateText","appendTo","getBody","_onGenerateClicked","apiToken","detach","APITokensView","_$listsContainer","_apiTokenViews","info","Object","entries","tokens","push"],"sources":["../../../../../../static/rb/js/accountPrefsPage/views/apiTokensView.es6.js"],"sourcesContent":["(function() {\n\n\nconst POLICY_READ_WRITE = 'rw';\nconst POLICY_READ_ONLY = 'ro';\nconst POLICY_CUSTOM = 'custom';\nconst POLICY_LABELS = {\n    [POLICY_READ_WRITE]: gettext('Full access'),\n    [POLICY_READ_ONLY]: gettext('Read-only'),\n    [POLICY_CUSTOM]: gettext('Custom')\n};\n\n\n/**\n * Represents an API token in the list.\n *\n * This provides actions for editing the policy type for the token and\n * removing the token.\n */\nconst APITokenItem = RB.Config.ResourceListItem.extend({\n    defaults: _.defaults({\n        policyType: POLICY_READ_WRITE,\n        lastUsed: null,\n        localSiteName: null,\n        showRemove: true,\n    }, RB.Config.ResourceListItem.prototype.defaults),\n\n    syncAttrs: ['expired', 'expires', 'id', 'invalidReason', 'invalidDate',\n                'lastUsed', 'note', 'policy', 'tokenValue', 'valid'],\n\n    /**\n     * Initialize the item.\n     *\n     * This computes the type of policy used, for display, and builds the\n     * policy actions menu.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this.on('change:policyType', this._onPolicyTypeChanged, this);\n\n        const policy = this.get('policy') || {};\n        const policyType = this._guessPolicyType(policy);\n\n        this._policyMenuAction = {\n            id: 'policy',\n            label: POLICY_LABELS[policyType],\n            children: [\n                this._makePolicyAction(POLICY_READ_WRITE),\n                this._makePolicyAction(POLICY_READ_ONLY),\n                this._makePolicyAction(POLICY_CUSTOM, {\n                    id: 'policy-custom',\n                    dispatchOnClick: true\n                })\n            ]\n        };\n        this.actions.unshift(this._policyMenuAction);\n\n        this.set('policyType', policyType);\n    },\n\n    /**\n     * Create an APIToken resource for the given attributes.\n     *\n     * Args:\n     *     attrs (object):\n     *         Additional attributes for the APIToken.\n     */\n    createResource(attrs) {\n        return new RB.APIToken(_.defaults({\n            userName: RB.UserSession.instance.get('username'),\n            localSitePrefix: this.collection.localSitePrefix\n        }, attrs));\n    },\n\n    /**\n     * Set the provided expiration date on the token and save it.\n     *\n     * Args:\n     *     expires (string):\n     *         The new expiration date for the token. If this is an\n     *         empty string, the token will be set to have no expiration.\n     */\n    saveExpires(expires) {\n        this._saveAttribute('expires', expires);\n    },\n\n    /**\n     * Set the provided note on the token and save it.\n     *\n     * Args:\n     *     note (string):\n     *         The new note for the token.\n     */\n    saveNote(note) {\n        this._saveAttribute('note', note);\n    },\n\n    /**\n     * Set the provided policy on the token and save it.\n     *\n     * Args:\n     *     policy (object):\n     *         The new policy for the token.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    savePolicy(policy) {\n        return this._saveAttribute('policy', policy);\n    },\n\n    /**\n     * Set an attribute on the token and save it.\n     *\n     * This is a helper function that will set an attribute on the token\n     * and save it, but only after the token is ready.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to set.\n     *\n     *     value (object or string):\n     *         The new value for the attribute.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async _saveAttribute(attr, value) {\n        await this.resource.ready();\n        this.resource.set(attr, value);\n        await this.resource.save();\n    },\n\n    /**\n     * Guess the policy type for a given policy definition.\n     *\n     * This compares the policy against the built-in versions that\n     * RB.APIToken provides. If one of them matches, the appropriate\n     * policy type will be returned. Otherwise, this assumes it's a\n     * custom policy.\n     *\n     * Args:\n     *     policy (object):\n     *         A policy object.\n     *\n     * Returns:\n     *     string:\n     *     The policy type enumeration corresponding to the policy.\n     */\n    _guessPolicyType(policy) {\n        if (_.isEqual(policy, RB.APIToken.defaultPolicies.readOnly)) {\n            return POLICY_READ_ONLY;\n        } else if (_.isEqual(policy, RB.APIToken.defaultPolicies.readWrite)) {\n            return POLICY_READ_WRITE;\n        } else {\n            return POLICY_CUSTOM;\n        }\n    },\n\n    /**\n     * Create and return an action for the policy menu.\n     *\n     * This takes a policy type and any options to include with the\n     * action definition. It will then return a suitable action,\n     * for display in the policy menu.\n     *\n     * Args:\n     *     policyType (string):\n     *         The policy type to create.\n     *\n     *     options (object):\n     *         Additional options to include in the new action definition.\n     */\n    _makePolicyAction(policyType, options) {\n        return _.defaults({\n            label: POLICY_LABELS[policyType],\n            type: 'radio',\n            name: 'policy-type',\n            propName: 'policyType',\n            radioValue: policyType\n        }, options);\n    },\n\n    /**\n     * Handler for when the policy type changes.\n     *\n     * This will set the policy menu's label to that of the selected\n     * policy and rebuild the menu.\n     *\n     * Then, if not using a custom policy, the built-in policy definition\n     * matching the selected policy will be saved to the server.\n     */\n    _onPolicyTypeChanged() {\n        const policyType = this.get('policyType');\n\n        this._policyMenuAction.label = POLICY_LABELS[policyType];\n        this.trigger('actionsChanged');\n\n        let newPolicy = null;\n\n        if (policyType === POLICY_READ_ONLY) {\n            newPolicy = RB.APIToken.defaultPolicies.readOnly;\n        } else if (policyType === POLICY_READ_WRITE) {\n            newPolicy = RB.APIToken.defaultPolicies.readWrite;\n        } else {\n            return;\n        }\n\n        console.assert(newPolicy !== null);\n\n        if (!_.isEqual(newPolicy, this.get('policy'))) {\n            this.savePolicy(newPolicy);\n        }\n    }\n});\n\n\n/**\n * A collection of APITokenItems.\n *\n * This works like a standard Backbone.Collection, but can also have\n * a LocalSite URL prefix attached to it, for use in API calls in\n * APITokenItem.\n */\nconst APITokenItemCollection = Backbone.Collection.extend({\n    model: APITokenItem,\n\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial models for the collection.\n     *\n     *     options (object):\n     *         Additional options for the collection.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the current local site, if any.\n     */\n    initialize(models, options) {\n        this.localSitePrefix = options.localSitePrefix;\n    }\n});\n\n\n/**\n * Provides an editor for constructing or modifying a custom policy definition.\n *\n * This renders as a modalBox with a CodeMirror editor inside of it. The\n * editor is set to allow easy editing of a JSON payload, complete with\n * lintian checking. Only valid policy payloads can be saved to the server.\n */\nconst PolicyEditorView = Backbone.View.extend({\n    id: 'custom_policy_editor',\n\n    template: _.template([\n        '<p><%= instructions %></p>',\n        '<textarea/>'\n    ].join('')),\n\n    /**\n     * Initialize the editor.\n     *\n     * Args:\n     *     options (object):\n     *         Additional options for view construction.\n     *\n     * Option Args:\n     *     prevPolicyType (string):\n     *         The previous policy type, to use when restoring the value after\n     *         the edit has been cancelled.\n     */\n    initialize(options) {\n        this.prevPolicyType = options.prevPolicyType;\n\n        this._codeMirror = null;\n        this._$policy = null;\n        this._$saveButtons = null;\n    },\n\n    /**\n     * Render the editor.\n     *\n     * The CodeMirror editor will be set up and configured, and then the\n     * view will be placed inside a modalBox.\n     *\n     * Returns:\n     *     PolicyEditorView:\n     *     This object, for chaining.\n     */\n    render() {\n        let policy = this.model.get('policy');\n\n        if (_.isEmpty(policy)) {\n            policy = RB.APIToken.defaultPolicies.custom;\n        }\n\n        this.$el.html(this.template({\n            instructions: interpolate(\n                gettext('You can limit access to the API through a custom policy. See the <a href=\"%s\" target=\"_blank\">documentation</a> on how to write policies.'),\n                [MANUAL_URL + 'webapi/2.0/api-token-policy/'])\n        }));\n\n\n        this._$policy = this.$('textarea')\n            .val(JSON.stringify(policy, null, '  '));\n\n        this.$el.modalBox({\n            title: gettext('Custom Token Access Policy'),\n            buttons: [\n                $('<input type=\"button\"/>')\n                    .val(gettext('Cancel'))\n                    .click(_.bind(this.cancel, this)),\n                $('<input type=\"button\" class=\"save-button\"/>')\n                    .val(gettext('Save and continue editing'))\n                    .click(() => {\n                        this.save(false);\n                        return false;\n                    }),\n                $('<input type=\"button\" class=\"btn primary save-button\"/>')\n                    .val(gettext('Save'))\n                    .click(() => {\n                        this.save(true);\n                        return false;\n                    })\n            ]\n        });\n\n        this._$saveButtons = this.$el.modalBox('buttons').find('.save-button');\n\n        this._codeMirror = CodeMirror.fromTextArea(this._$policy[0], {\n            mode: 'application/json',\n            lineNumbers: true,\n            lineWrapping: true,\n            matchBrackets: true,\n            lint: {\n                onUpdateLinting: _.bind(this._onUpdateLinting, this)\n            },\n            gutters: ['CodeMirror-lint-markers']\n        });\n        this._codeMirror.focus();\n    },\n\n    /**\n     * Remove the policy editor from the page.\n     */\n    remove() {\n        this.$el.modalBox('destroy');\n    },\n\n    /**\n     * Cancel the editor.\n     *\n     * The previously-selected policy type will be set on the model.\n     */\n    cancel() {\n        this.model.set('policyType', this.prevPolicyType);\n    },\n\n    /**\n     * Save the editor.\n     *\n     * The policy will be saved to the server for immediate use.\n     *\n     * Args:\n     *     closeOnSave (boolean):\n     *         Whether the editor should close after saving.\n     */\n    async save(closeOnSave) {\n        const policyStr = this._codeMirror.getValue().strip();\n        let policy;\n\n        try {\n            policy = JSON.parse(policyStr);\n        } catch (e) {\n            if (e instanceof SyntaxError) {\n                alert(interpolate(\n                    gettext('There is a syntax error in your policy: %s'),\n                    [e]));\n\n                return;\n            } else {\n                throw e;\n            }\n        }\n\n        try {\n            await this.model.savePolicy(policy);\n\n            this.model.set('policyType', POLICY_CUSTOM);\n\n            if (closeOnSave) {\n                this.remove();\n            }\n        } catch (err) {\n            if (err.xhr.errorPayload.err.code === 105 &&\n                err.xhr.errorPayload.fields.policy) {\n                alert(err.xhr.errorPayload.fields.policy);\n            } else {\n                alert(err.xhr.errorPayload.err.msg);\n            }\n        }\n    },\n\n    /**\n     * Handler for when lintian checking has run.\n     *\n     * This will disable the save buttons if there are any lintian errors.\n     *\n     * Args:\n     *     annotationsNotSorted (Array):\n     *         An array of the linter annotations.\n     */\n    _onUpdateLinting(annotationsNotSorted) {\n        this._$saveButtons.prop('disabled', annotationsNotSorted.length > 0);\n    }\n});\n\n\n/**\n * Renders an APITokenItem to the page, and handles actions.\n *\n * This will display the information on the given token. Specifically,\n * the token value, the note, the expiration date and the actions.\n *\n * This also handles deleting the token when the Remove action is clicked,\n * and displaying the policy editor when choosing a custom policy.\n */\nconst APITokenItemView = Djblets.Config.ListItemView.extend({\n    EMPTY_NOTE_PLACEHOLDER: gettext('Click to describe this token'),\n\n    template: _.template(gettext`\n        <div class=\"rb-c-config-api-tokens__main\">\n         <div class=\"rb-c-config-api-tokens__value\">\n          <input readonly=\"readonly\" value=\"<%- tokenValue %>\">\n         </div>\n         <span class=\"fa fa-clipboard js-copy-token\" title=\"Copy to clipboard\"></span>\n        </div>\n        <div class=\"rb-c-config-api-tokens__info\">\n         <% if (expired) { %>\n          <p class=\"rb-c-config-api-tokens__token-state -is-expired\">\n           Expired <time class=\"timesince\" datetime=\"<%= expires %>\"></time>.\n          </p>\n         <% } else if (valid) { %>\n          <% if (lastUsed) { %>\n           <p class=\"rb-c-config-api-tokens__usage -has-last-used\">\n            Last used\n            <time class=\"timesince\" datetime=\"<%= lastUsed %>\"></time>.\n           </p>\n          <% } else { %>\n           <p class=\"rb-c-config-api-tokens__usage\">Never used.</p>\n          <% } %>\n          <% if (expires) { %>\n           <p class=\"rb-c-config-api-tokens__token-state -has-expires\">\n            <span>Expires <%= expiresTimeHTML %>.</span>\n           </p>\n          <% } else { %>\n           <p class=\"rb-c-config-api-tokens__token-state\">\n            <span>Never expires.</span>\n           </p>\n          <% } %>\n         <% } else { %>\n          <p class=\"rb-c-config-api-tokens__token-state -is-invalid\">\n           Invalidated\n           <time class=\"timesince\" datetime=\"<%= invalidDate %>\"></time>:\n           <%= invalidReason %>\n          </p>\n         <% } %>\n        </div>\n        <div class=\"rb-c-config-api-tokens__actions\"></div>\n        <span class=\"rb-c-config-api-tokens__note\"></span>\n    `),\n\n    events: {\n        'click .js-copy-token': '_onCopyClicked',\n    },\n\n    actionHandlers: {\n        'delete': '_onRemoveClicked',\n        'policy-custom': '_onCustomPolicyClicked'\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        _super(this).initialize.apply(this, arguments);\n\n        this._$expires = null;\n        this._$note = null;\n        this._$tokenState = null;\n\n        this.listenTo(this.model.resource, 'change:expires', this._updateExpires);\n        this.listenTo(this.model.resource, 'change:note', this._updateNote);\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     APITokenItemView:\n     *     This object, for chaining.\n     */\n    render() {\n        _super(this).render.call(this);\n\n        this._$tokenState = this.$('.rb-c-config-api-tokens__token-state');\n        this._$expires = this._$tokenState\n            .not('.is-expired, .is-invalid')\n            .find('span');\n\n        this._$note = this.$('.rb-c-config-api-tokens__note')\n            .inlineEditor({\n                editIconClass: 'rb-icon rb-icon-edit'\n            })\n            .on({\n                beginEdit: () => this._$note.inlineEditor(\n                    'setValue', this.model.get('note')),\n                complete: (e, value) => this.model.saveNote(value)\n            });\n\n        /**\n         * Use tomorrow as the minimum date that the expiration date\n         * can be set to.\n         */\n        const tomorrow = moment().local().add(1, 'days');\n        const expires = moment(this.model.get('expires')).local();\n\n        const expiresView = new RB.DateInlineEditorView({\n            el: this._$expires[0],\n            descriptorText: 'Expires ',\n            formatResult: value => {\n                if (value) {\n                    value = moment(value).local().startOf('day').format();\n\n                    return (dedent`\n                        Expires\n                        <time class=\"timesince\" datetime=\"${value}\"></time>.\n                    `);\n                } else {\n                    return 'Never expires.';\n                }\n            },\n            minDate: tomorrow.format('YYYY-MM-DD'),\n            rawValue: expires.format('YYYY-MM-DD'),\n        });\n        expiresView.render();\n\n        this.listenTo(expiresView, 'complete', (value) => {\n            // Set the expiration time to midnight local time.\n            value = value ? moment(value).local().startOf('day').format() :\n                    '';\n\n            this.model.saveExpires(value);\n        });\n\n        this._updateExpires();\n        this._updateNote();\n\n        return this;\n    },\n\n    /**\n     * Return the parent element for item actions.\n     *\n     * Returns:\n     *     jQuery:\n     *     The element to attach the actions to.\n     */\n    getActionsParent() {\n        return this.$('.rb-c-config-api-tokens__actions');\n    },\n\n    /**\n     * Return additional rendering context.\n     *\n     * Returns:\n     *     object:\n     *     Additional rendering context.\n     */\n    getRenderContext() {\n        const expires = this.model.get('expires');\n\n        return {\n            expiresTimeHTML:\n                `<time class=\"timesince\" datetime=\"${expires}\"></time>`,\n        };\n    },\n\n    /**\n     * Update the displayed expiration date.\n     */\n     _updateExpires() {\n        if (this._$expires) {\n            const expires = this.model.resource.get('expires');\n\n            this._$expires.find('time').attr('datetime', expires);\n            this.$('.timesince').timesince();\n        }\n    },\n\n    /**\n     * Update the displayed note.\n     *\n     * If no note is set, then a placeholder will be shown, informing the\n     * user that they can edit the note. Otherwise, their note contents\n     * will be shown.\n     */\n    _updateNote() {\n        if (this._$note) {\n            const note = this.model.resource.get('note');\n\n            this._$note\n                .toggleClass('empty', !note)\n                .text(note ? note : this.EMPTY_NOTE_PLACEHOLDER);\n        }\n    },\n\n    /**\n     * Handler for when the copy icon is clicked.\n     *\n     * Args:\n     *     e (Event):\n     *         The click event.\n     */\n    _onCopyClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.$('.rb-c-config-api-tokens__value input')\n            .focus()\n            .select();\n        document.execCommand('copy');\n    },\n\n    /**\n     * Handler for when the \"Custom\" policy action is clicked.\n     *\n     * This displays the policy editor, allowing the user to edit a\n     * custom policy for the token.\n     *\n     * The previously selected policy type is passed along to the editor,\n     * so that the editor can revert to it if the user cancels.\n     *\n     * Returns:\n     *     boolean:\n     *     false, for use as a jQuery event handler.\n     */\n    _onCustomPolicyClicked() {\n        const view = new PolicyEditorView({\n            model: this.model,\n            prevPolicyType: this.model.get('policyType'),\n        });\n        view.render();\n\n        return false;\n    },\n\n    /**\n     * Handler for when the Remove action is clicked.\n     *\n     * This will prompt for confirmation before removing the token from\n     * the server.\n     */\n    _onRemoveClicked() {\n        $('<p/>')\n            .html(gettext('This will prevent clients using this token when authenticating.'))\n            .modalBox({\n                title: gettext('Are you sure you want to remove this token?'),\n                buttons: [\n                    $('<input type=\"button\"/>')\n                        .val(gettext('Cancel')),\n                    $('<input type=\"button\" class=\"danger\" />')\n                        .val(gettext('Remove'))\n                        .click(() => this.model.resource.destroy())\n                ]\n            });\n    }\n});\n\n\n/**\n * Renders and manages a list of global or per-LocalSite API tokens.\n *\n * This will display all provided API tokens in a list, optionally labeled\n * by Local Site name. These can be removed or edited, or new tokens generated\n * through a \"Generate a new API token\" link.\n */\nconst SiteAPITokensView = Backbone.View.extend({\n    className: 'rb-c-config-api-tokens',\n\n    template: _.template(dedent`\n        <% if (name) { %>\n         <div class=\"djblets-l-config-forms-container\">\n          <h3><%- name %></h3>\n         </div>\n        <% } %>\n        <div class=\"api-tokens\">\n        </div>\n    `),\n\n    generateTokenTemplate: _.template(dedent`\n        <li class=\"generate-api-token djblets-c-config-forms-list__item\">\n         <a href=\"#\"><%- generateText %></a>\n        </li>\n    `),\n\n    events: {\n        'click .generate-api-token': '_onGenerateClicked'\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * This will construct the collection of tokens and construct\n     * a list for the ListView.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     localSiteName (string):\n     *         The name of the local site, if any.\n     *\n     *     localSitePrefix (string):\n     *         The URL prefix of the local site, if any.\n     */\n    initialize(options) {\n        this.localSiteName = options.localSiteName;\n        this.localSitePrefix = options.localSitePrefix;\n\n        this.collection = new APITokenItemCollection(options.apiTokens, {\n            localSitePrefix: this.localSitePrefix\n        });\n\n        this.apiTokensList = new Djblets.Config.List({}, {\n            collection: this.collection\n        });\n\n        this._listView = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will render the list of API token items, along with a link\n     * for generating new tokens.\n     *\n     * Returns:\n     *     SiteAPITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._listView = new Djblets.Config.ListView({\n            ItemView: APITokenItemView,\n            animateItems: true,\n            model: this.apiTokensList\n        });\n\n        this.$el.html(this.template({\n            name: this.localSiteName,\n        }));\n\n        this._listView.render().$el.prependTo(this.$('.api-tokens'));\n\n        this._$generateTokenItem =\n            $(this.generateTokenTemplate({\n                generateText: _`Generate a new API token`,\n            }))\n            .appendTo(this._listView.getBody());\n\n        return this;\n    },\n\n    /**\n     * Handler for when the \"Generate a new API token\" link is clicked.\n     *\n     * This creates a new API token on the server and displays it in the list.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    async _onGenerateClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const apiToken = new RB.APIToken({\n            localSitePrefix: this.localSitePrefix,\n            userName: RB.UserSession.instance.get('username')\n        });\n\n        await apiToken.save();\n\n        this.collection.add({\n            resource: apiToken,\n        });\n\n        this._$generateTokenItem\n            .detach()\n            .appendTo(this._listView.getBody());\n    },\n});\n\n\n/**\n * Renders and manages a page of API tokens.\n *\n * This will take the provided tokens and group them into SiteAPITokensView\n * instances, one per Local Site and one for the global tokens.\n */\nRB.APITokensView = Backbone.View.extend({\n    template: _.template(dedent`\n        <div class=\"api-tokens-list djblets-l-config-forms-container\n                    -is-recessed -is-top-flush\">\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     apiTokens (Array of object):\n     *         Initial contents of the tokens list.\n     */\n    initialize(options) {\n        this.apiTokens = options.apiTokens;\n\n        this._$listsContainer = null;\n        this._apiTokenViews = [];\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up the elements and the list of SiteAPITokensViews.\n     *\n     * Returns:\n     *     RB.APITokensView:\n     *     This object, for chaining.\n     */\n    render() {\n        this.$el.html(this.template());\n\n        this._$listsContainer = this.$('.api-tokens-list');\n\n        for (let [localSiteName, info] of Object.entries(this.apiTokens)) {\n            const view = new SiteAPITokensView({\n                localSiteName: localSiteName,\n                localSitePrefix: info.localSitePrefix,\n                apiTokens: info.tokens\n            });\n\n            view.$el.appendTo(this._$listsContainer);\n            view.render();\n\n            this._apiTokenViews.push(view);\n        }\n\n        return this;\n    }\n});\n\n\n})();\n"],"mappings":"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"}