{"version":3,"file":"reviewRequestModel.js","names":["RB","ReviewRequest","BaseResource","extend","defaults","_","approved","approvalFailure","branch","bugTrackerURL","bugsClosed","commitID","closeDescription","closeDescriptionRichText","dependsOn","description","descriptionRichText","draftReview","lastUpdated","localSitePrefix","repository","reviewURL","state","summary","targetGroups","targetPeople","testingDone","testingDoneRichText","prototype","rspNamespace","extraQueryArgs","attrToJsonMap","deserializedAttrs","initialize","attrs","options","call","reviews","Backbone","Collection","model","Review","draft","DraftReviewRequest","parentObject","get","extraDraftAttrs","url","SITE_ROOT","isNew","id","createFromCommit","optionsOrCommitID","context","isObject","console","assert","warn","promiseToCallbacks","set","save","createDiff","Diff","createReview","reviewID","extraAttrs","review","undefined","DraftReview","add","createScreenshot","screenshotID","Screenshot","createFileAttachment","attributes","FileAttachment","setStarred","starred","isFunction","success","error","complete","newOptions","watched","UserSession","instance","watchedReviewRequests","addImmediately","removeImmediately","close","data","type","CLOSE_DISCARDED","status","CLOSE_SUBMITTED","Promise","reject","Error","close_description","richText","close_description_text_type","postData","changingState","saveOptions","trigger","markUpdated","reopen","timestamp","_lastUpdateTimestamp","beginCheckForUpdates","lastUpdateTimestamp","_checkUpdatesType","ready","setTimeout","_checkForUpdates","bind","CHECK_UPDATES_MSECS","apiCall","prefix","noActivityIndicator","last_update","href","rsp","lastUpdate","toJSON","result","commit_id","create_from_commit_id","_super","apply","arguments","parseResourceData","pending","PENDING","discarded","submitted","rawTextFields","raw_text_fields","description_text_type","testing_done_text_type","VISIBILITY_VISIBLE","VISIBILITY_ARCHIVED","VISIBILITY_MUTED"],"sources":["../../../../../../static/rb/js/resources/models/reviewRequestModel.es6.js"],"sourcesContent":["/**\n * A review request.\n *\n * ReviewRequest is the starting point for much of the resource API. Through\n * it, the caller can create drafts, diffs, file attachments, and screenshots.\n *\n * Fields on a ReviewRequest are set by accessing the ReviewRequest.draft\n * object. Through there, fields can be set like any other model and then\n * saved.\n *\n * A review request can be closed by using the close() function, reopened\n * through reopen(), or even permanently destroyed by calling destroy().\n */\nRB.ReviewRequest = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            approved: false,\n            approvalFailure: null,\n            branch: null,\n            bugTrackerURL: null,\n            bugsClosed: null,\n            commitID: null,\n            closeDescription: null,\n            closeDescriptionRichText: false,\n            dependsOn: [],\n            description: null,\n            descriptionRichText: false,\n            draftReview: null,\n            lastUpdated: null,\n            localSitePrefix: null,\n            'public': null,\n            repository: null,\n            reviewURL: null,\n            state: null,\n            summary: null,\n            targetGroups: [],\n            targetPeople: [],\n            testingDone: null,\n            testingDoneRichText: false\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'review_request',\n\n    extraQueryArgs: {\n        'force-text-type': 'html',\n        'include-text-types': 'raw'\n    },\n\n    attrToJsonMap: {\n        approvalFailure: 'approval_failure',\n        bugsClosed: 'bugs_closed',\n        closeDescription: 'close_description',\n        closeDescriptionRichText: 'close_description_text_type',\n        dependsOn: 'depends_on',\n        descriptionRichText: 'description_text_type',\n        lastUpdated: 'last_updated',\n        reviewURL: 'url',\n        targetGroups: 'target_groups',\n        targetPeople: 'target_people',\n        testingDone: 'testing_done',\n        testingDoneRichText: 'testing_done_text_type'\n    },\n\n    deserializedAttrs: [\n        'approved',\n        'approvalFailure',\n        'branch',\n        'bugsClosed',\n        'closeDescription',\n        'dependsOn',\n        'description',\n        'lastUpdated',\n        'public',\n        'reviewURL',\n        'summary',\n        'targetGroups',\n        'targetPeople',\n        'testingDone'\n    ],\n\n    /**\n     * Initialize the model.\n     *\n     * Args:\n     *     attrs (object):\n     *         Initial values for the model attributes.\n     *\n     *     options (object):\n     *         Additional options for the object construction.\n     *\n     * Option Args:\n     *     extraDraftAttrs (object):\n     *         Additional attributes to include when creating a review request\n     *         draft.\n     */\n    initialize(attrs, options={}) {\n        RB.BaseResource.prototype.initialize.call(this, attrs, options);\n\n        this.reviews = new Backbone.Collection([], {\n            model: RB.Review\n        });\n\n        this.draft = new RB.DraftReviewRequest(_.defaults({\n            parentObject: this,\n            branch: this.get('branch'),\n            bugsClosed: this.get('bugsClosed'),\n            dependsOn: this.get('dependsOn'),\n            description: this.get('description'),\n            descriptionRichText: this.get('descriptionRichText'),\n            summary: this.get('summary'),\n            targetGroups: this.get('targetGroups'),\n            targetPeople: this.get('targetPeople'),\n            testingDone: this.get('testingDone'),\n            testingDoneRichText: this.get('testingDoneRichText')\n        }, options.extraDraftAttrs));\n    },\n\n    /**\n     * Return the URL for syncing this model.\n     *\n     * Returns:\n     *     string:\n     *     The URL for the API resource.\n     */\n    url() {\n        const url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                    'api/review-requests/';\n\n        return this.isNew() ? url : `${url}${this.id}/`;\n    },\n\n    /**\n     * Create the review request from an existing commit.\n     *\n     * This can only be used for new ReviewRequest instances, and requires\n     * a commitID option.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Changed the arguments to take the commit ID directly, and return a\n     *     promise rather than use callbacks.\n     *\n     * Args:\n     *     optionsOrCommitID (object or string):\n     *         If invoking in a legacy mode, this is an object with callbacks.\n     *         For new-style callers, this should be a string containing only\n     *         the commit ID to create the review request from.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    createFromCommit(optionsOrCommitID={}, context={}) {\n        if (_.isObject(optionsOrCommitID)) {\n            console.assert(optionsOrCommitID.commitID);\n            console.warn('RB.ReviewRequest.createFromCommit was called ' +\n                         'using callbacks. Callers should be updated to ' +\n                         'use promises instead.');\n            return RB.promiseToCallbacks(optionsOrCommitID, context, () =>\n                this.createFromCommit(optionsOrCommitID.commitID));\n        }\n\n        console.assert(optionsOrCommitID);\n        console.assert(this.isNew());\n\n        this.set('commitID', optionsOrCommitID);\n\n        return this.save({ createFromCommit: true });\n    },\n\n    /**\n     * Create a Diff object for this review request.\n     *\n     * Returns:\n     *     RB.Diff:\n     *     The new diff model.\n     */\n    createDiff() {\n        return new RB.Diff({\n            parentObject: this\n        });\n    },\n\n    /**\n     * Create a Review object for this review request.\n     *\n     * If an ID is specified, the Review object will reference that ID.\n     * Otherwise, it is considered a draft review, and will either return\n     * the existing one (if the draftReview attribute is set), or create\n     * a new one (and set the attribute).\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review, for existing reviews.\n     *\n     *     extraAttrs (object):\n     *         Additional attributes to set on new models.\n     *\n     * Returns:\n     *     RB.Review:\n     *     The new review object.\n     */\n    createReview(reviewID, extraAttrs={}) {\n        let review;\n\n        if (reviewID === undefined) {\n            review = this.get('draftReview');\n\n            if (review === null) {\n                review = new RB.DraftReview({\n                    parentObject: this\n                });\n\n                this.set('draftReview', review);\n            }\n        } else {\n            review = this.reviews.get(reviewID);\n\n            if (!review) {\n                review = new RB.Review(_.defaults({\n                    parentObject: this,\n                    id: reviewID\n                }, extraAttrs));\n                this.reviews.add(review);\n            }\n\n        }\n\n        return review;\n    },\n\n    /**\n     * Create a Screenshot object for this review request.\n     *\n     * Args:\n     *     screenshotID (number):\n     *         The ID of the screenshot, for existing screenshots.\n     *\n     * Returns:\n     *     RB.Screenshot:\n     *     The new screenshot object.\n     */\n    createScreenshot(screenshotID) {\n        return new RB.Screenshot({\n            parentObject: this,\n            id: screenshotID\n        });\n    },\n\n    /**\n     * Create a FileAttachment object for this review request.\n     *\n     * Args:\n     *     attributes (object):\n     *         Additional attributes to include on the new model.\n     *\n     * Returns:\n     *     RB.FileAttachment:\n     *     The new file attachment object.\n     */\n    createFileAttachment(attributes) {\n        return new RB.FileAttachment(_.defaults({\n            parentObject: this\n        }, attributes));\n    },\n\n    /**\n     * Mark a review request as starred or unstarred.\n     *\n     * Args:\n     *     starred (boolean):\n     *         Whether the review request is starred.\n     *\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    setStarred(starred, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewRequest.setStarred was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.setStarred(starred));\n        }\n\n        const watched = RB.UserSession.instance.watchedReviewRequests;\n        return starred ? watched.addImmediately(this)\n                       : watched.removeImmediately(this);\n    },\n\n    /**\n     * Close the review request.\n     *\n     * A 'type' option must be provided, which must match one of the\n     * close types (ReviewRequest.CLOSE_DISCARDED or\n     * ReviewRequest.CLOSE_SUBMITTED).\n     *\n     * An optional description can be set by passing a 'description' option.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and changed to return a promise.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async close(options, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewRequest.close was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.close(newOptions));\n        }\n\n        const data = {};\n\n        console.assert(options);\n\n        if (options.type === RB.ReviewRequest.CLOSE_DISCARDED) {\n            data.status = 'discarded';\n        } else if (options.type === RB.ReviewRequest.CLOSE_SUBMITTED) {\n            data.status = 'submitted';\n        } else {\n            return Promise.reject(new Error('Invalid close type'));\n        }\n\n        if (options.description !== undefined) {\n            data.close_description = options.description;\n        }\n\n        if (options.richText !== undefined) {\n            data.close_description_text_type =\n                (options.richText ? 'markdown' : 'plain');\n        }\n\n        if (options.postData !== undefined) {\n            _.extend(data, options.postData);\n        }\n\n        const changingState = (options.type !== this.get('state'));\n\n        const saveOptions = _.defaults({\n            data: data,\n        }, options);\n\n        delete saveOptions.type;\n        delete saveOptions.description;\n\n        await this.save(saveOptions);\n\n        if (changingState) {\n            this.trigger('closed');\n        }\n\n        this.markUpdated(this.get('lastUpdated'));\n    },\n\n    /**\n     * Reopen the review request.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and changed to return a promise.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async reopen(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewRequest.reopen was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.reopen());\n        }\n\n        await this.save({\n            data: {\n                status: 'pending',\n            },\n        });\n\n        this.trigger('reopened');\n        this.markUpdated(this.get('lastUpdated'));\n    },\n\n    /**\n     * Marks the review request as having been updated at the given timestamp.\n     *\n     * This should be used when an action will trigger an update to the\n     * review request's Last Updated timestamp, but where we don't want\n     * a notification later on. The local copy of the timestamp can be\n     * bumped to mark it as up-to-date.\n     *\n     * Args:\n     *     timestamp (string):\n     *         The timestamp to store.\n     */\n    markUpdated(timestamp) {\n        this._lastUpdateTimestamp = timestamp;\n    },\n\n    /**\n     * Begin checking for server-side updates to the review request.\n     *\n     * The 'updated' event will be triggered when there's a new update.\n     *\n     * Args:\n     *     type (string):\n     *         The type of updates to check for.\n     *\n     *     lastUpdateTimestamp (string):\n     *         The timestamp of the last known update.\n     */\n    async beginCheckForUpdates(type, lastUpdateTimestamp) {\n        this._checkUpdatesType = type;\n        this._lastUpdateTimestamp = lastUpdateTimestamp;\n\n        await this.ready();\n        setTimeout(this._checkForUpdates.bind(this),\n                   RB.ReviewRequest.CHECK_UPDATES_MSECS);\n    },\n\n    /**\n     * Check for updates.\n     *\n     * This is called periodically after an initial call to\n     * beginCheckForUpdates. It will see if there's a new update yet on the\n     * server, and if there is, trigger the 'updated' event.\n     */\n    _checkForUpdates() {\n        RB.apiCall({\n            type: 'GET',\n            prefix: this.get('sitePrefix'),\n            noActivityIndicator: true,\n            url: this.get('links').last_update.href,\n            success: rsp => {\n                const lastUpdate = rsp.last_update;\n\n                if ((!this._checkUpdatesType ||\n                     this._checkUpdatesType === lastUpdate.type) &&\n                    this._lastUpdateTimestamp !== lastUpdate.timestamp) {\n                    this.trigger('updated', lastUpdate);\n                }\n\n                this._lastUpdateTimestamp = lastUpdate.timestamp;\n\n                setTimeout(this._checkForUpdates.bind(this),\n                           RB.ReviewRequest.CHECK_UPDATES_MSECS);\n            }\n        });\n    },\n\n    /**\n     * Serialize for sending to the server.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the save operation.\n     *\n     * Option Args:\n     *     createFromCommit (boolean):\n     *         Whether this save is going to create a new review request from\n     *         an existing committed change.\n     *\n     * Returns:\n     *     object:\n     *     Data suitable for passing to JSON.stringify.\n     */\n    toJSON(options={}) {\n        if (this.isNew()) {\n            const commitID = this.get('commitID');\n            const repository = this.get('repository');\n            const result = {};\n\n            if (commitID) {\n                result.commit_id = commitID;\n\n                if (options.createFromCommit) {\n                    result.create_from_commit_id = true;\n                }\n            }\n\n            if (repository) {\n                result.repository = repository;\n            }\n\n            return result;\n        } else {\n            return _super(this).toJSON.apply(this, arguments);\n        }\n    },\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const state = {\n            pending: RB.ReviewRequest.PENDING,\n            discarded: RB.ReviewRequest.CLOSE_DISCARDED,\n            submitted: RB.ReviewRequest.CLOSE_SUBMITTED\n        }[rsp.status];\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.state = state;\n        data.closeDescriptionRichText =\n            (rawTextFields.close_description_text_type === 'markdown');\n        data.descriptionRichText =\n            (rawTextFields.description_text_type === 'markdown');\n        data.testingDoneRichText =\n            (rawTextFields.testing_done_text_type === 'markdown');\n\n        return data;\n    }\n}, {\n    CHECK_UPDATES_MSECS: 5 * 60 * 1000, // Every 5 minutes\n\n    CLOSE_DISCARDED: 1,\n    CLOSE_SUBMITTED: 2,\n    PENDING: 3,\n\n    VISIBILITY_VISIBLE: 1,\n    VISIBILITY_ARCHIVED: 2,\n    VISIBILITY_MUTED: 3\n});\n"],"mappings":"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"}