{"version":3,"file":"repositoryModel.js","names":["RB","Repository","BaseResource","extend","defaults","_","filesOnly","localSitePrefix","name","requiresBasedir","requiresChangeNumber","scmtoolName","supportsPostCommit","prototype","rspNamespace","listKey","attrToJsonMap","deserializedAttrs","initialize","apply","arguments","branches","RepositoryBranches","url","result","getCommits","options","RepositoryCommits","urlBase","start","branch","SITE_ROOT","get","isNew","id"],"sources":["../../../../../../static/rb/js/resources/models/repositoryModel.es6.js"],"sourcesContent":["/**\n * A client-side representation of a repository on the server.\n *\n * Model Attributes:\n *     filesOnly (boolean):\n *         Whether this repository is the fake \"file attachments only\" entry.\n *\n *     localSitePrefix (string):\n *         The URL prefix for the local site, if any.\n *\n *     name (string):\n *         The name of the repository.\n *\n *     requiresBasedir (boolean):\n *         Whether posting diffs against this repository requires the\n *         specification of a \"base directory\" (the relative path between the\n *         repository root and the filenames in the diff file).\n *\n *     requiresChangeNumber (boolean):\n *         Whether posting diffs against this repository requires the\n *         specification of the associated change number.\n *\n *     scmtoolName (string):\n *         The name of the SCM that this repository uses.\n *\n *     supportsPostCommit (boolean):\n *         Whether this repository supports the APIs necessary to enable the\n *         post-commit UI.\n */\nRB.Repository = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            filesOnly: false,\n            localSitePrefix: null,\n            name: null,\n            requiresBasedir: false,\n            requiresChangeNumber: false,\n            scmtoolName: null,\n            supportsPostCommit: false\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'repository',\n    listKey: 'repositories',\n\n    attrToJsonMap: {\n        name: 'name',\n        requiresBasedir: 'requires_basedir',\n        requiresChangeNumber: 'requires_change_number',\n        scmtoolName: 'tool',\n        supportsPostCommit: 'supports_post_commit',\n    },\n\n    deserializedAttrs: [\n        'name',\n        'requiresBasedir',\n        'requiresChangeNumber',\n        'scmtoolName',\n        'supportsPostCommit',\n    ],\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        RB.BaseResource.prototype.initialize.apply(this, arguments);\n\n        this.branches = new RB.RepositoryBranches();\n        this.branches.url = _.result(this, 'url') + 'branches/';\n    },\n\n    /**\n     * Get a collection of commits from a given starting point.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the commits collection.\n     *\n     * Option Args:\n     *     start (string):\n     *         The starting commit (which will be the most recent commit\n     *         listed).\n     *\n     *     branch (string):\n     *         The branch to fetch commits from.\n     *\n     * Returns:\n     *     RB.RepositoryCommits:\n     *     The commits collection.\n     */\n    getCommits(options) {\n        return new RB.RepositoryCommits([], {\n            urlBase: _.result(this, 'url') + 'commits/',\n            start: options.start,\n            branch: options.branch\n        });\n    },\n\n    /**\n     * Return the URL for syncing the model.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        const url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                    'api/repositories/';\n\n        return this.isNew() ? url : `${url}${this.id}/`;\n    }\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,UAAH,GAAgBD,EAAE,CAACE,YAAH,CAAgBC,MAAhB,CAAuB;EACnCC,QAAQ,GAAG;IACP,OAAOC,CAAC,CAACD,QAAF,CAAW;MACdE,SAAS,EAAE,KADG;MAEdC,eAAe,EAAE,IAFH;MAGdC,IAAI,EAAE,IAHQ;MAIdC,eAAe,EAAE,KAJH;MAKdC,oBAAoB,EAAE,KALR;MAMdC,WAAW,EAAE,IANC;MAOdC,kBAAkB,EAAE;IAPN,CAAX,EAQJZ,EAAE,CAACE,YAAH,CAAgBW,SAAhB,CAA0BT,QAA1B,EARI,CAAP;EASH,CAXkC;;EAanCU,YAAY,EAAE,YAbqB;EAcnCC,OAAO,EAAE,cAd0B;EAgBnCC,aAAa,EAAE;IACXR,IAAI,EAAE,MADK;IAEXC,eAAe,EAAE,kBAFN;IAGXC,oBAAoB,EAAE,wBAHX;IAIXC,WAAW,EAAE,MAJF;IAKXC,kBAAkB,EAAE;EALT,CAhBoB;EAwBnCK,iBAAiB,EAAE,CACf,MADe,EAEf,iBAFe,EAGf,sBAHe,EAIf,aAJe,EAKf,oBALe,CAxBgB;;EAgCnC;AACJ;AACA;EACIC,UAAU,GAAG;IACTlB,EAAE,CAACE,YAAH,CAAgBW,SAAhB,CAA0BK,UAA1B,CAAqCC,KAArC,CAA2C,IAA3C,EAAiDC,SAAjD;IAEA,KAAKC,QAAL,GAAgB,IAAIrB,EAAE,CAACsB,kBAAP,EAAhB;IACA,KAAKD,QAAL,CAAcE,GAAd,GAAoBlB,CAAC,CAACmB,MAAF,CAAS,IAAT,EAAe,KAAf,IAAwB,WAA5C;EACH,CAxCkC;;EA0CnC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAU,CAACC,OAAD,EAAU;IAChB,OAAO,IAAI1B,EAAE,CAAC2B,iBAAP,CAAyB,EAAzB,EAA6B;MAChCC,OAAO,EAAEvB,CAAC,CAACmB,MAAF,CAAS,IAAT,EAAe,KAAf,IAAwB,UADD;MAEhCK,KAAK,EAAEH,OAAO,CAACG,KAFiB;MAGhCC,MAAM,EAAEJ,OAAO,CAACI;IAHgB,CAA7B,CAAP;EAKH,CAnEkC;;EAqEnC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIP,GAAG,GAAG;IACF,MAAMA,GAAG,GAAGQ,SAAS,IAAI,KAAKC,GAAL,CAAS,iBAAT,KAA+B,EAAnC,CAAT,GACA,mBADZ;IAGA,OAAO,KAAKC,KAAL,KAAeV,GAAf,GAAsB,GAAEA,GAAI,GAAE,KAAKW,EAAG,GAA7C;EACH;;AAjFkC,CAAvB,CAAhB"}