{"version":3,"file":"baseStatusUpdatesEntryView.js","names":["ParentView","RB","ReviewRequestPage","EntryView","BaseStatusUpdatesEntryView","extend","CHECK_UPDATES_MS","events","_","defaults","prototype","initialize","apply","arguments","_reviewViews","beforeApplyUpdate","model","stopWatchingUpdates","diffFragmentQueue","PageManager","getPage","diffCommentsData","get","i","length","saveFragment","render","call","map","review","$reviewEl","$","id","view","ReviewView","el","entryModel","$bannerFloatContainer","$bannerParent","children","bannerNoFloatContainerClass","setupReviewView","watchUpdates","_onRequestRunClicked","e","$target","target","updateId","data","reviewRequestId","apiCall","type","prefix","path","buttons","state","success"],"sources":["../../../../../../static/rb/js/reviewRequestPage/views/baseStatusUpdatesEntryView.es6.js"],"sourcesContent":["(function() {\n\n\nconst ParentView = RB.ReviewRequestPage.EntryView;\n\n\n/**\n * Base class for an entry that can contain status updates.\n *\n * This manages the views for each review on the status updates, and watches\n * for updates to the entry so that any completed status updates can be\n * shown without a page reload.\n */\nRB.ReviewRequestPage.BaseStatusUpdatesEntryView = ParentView.extend({\n    CHECK_UPDATES_MS: 10 * 1000,  // 10 seconds\n\n    events: _.defaults({\n        'click .status-update-request-run': '_onRequestRunClicked',\n    }, ParentView.prototype.events),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        ParentView.prototype.initialize.apply(this, arguments);\n\n        this._reviewViews = null;\n    },\n\n    /**\n     * Save state before applying an update.\n     *\n     * This will save all the loaded diff fragments on the entry so that\n     * they'll be loaded from cache when processing the fragments again for\n     * the entry after reload.\n     */\n    beforeApplyUpdate() {\n        /*\n         * Stop watching for any updates. If there are still status updates\n         * pending, render() will re-register for updates.\n         */\n        this.model.stopWatchingUpdates();\n\n        /*\n         * Store any diff fragments for the reload, so we don't have to\n         * fetch them again from the server.\n         */\n        const diffFragmentQueue = RB.PageManager.getPage().diffFragmentQueue;\n        const diffCommentsData = this.model.get('diffCommentsData') || [];\n\n        for (let i = 0; i < diffCommentsData.length; i++) {\n            diffFragmentQueue.saveFragment(diffCommentsData[i][0]);\n        }\n    },\n\n    /**\n     * Render the entry.\n     *\n     * This will construct a view for each review associated with a status\n     * update.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.BaseStatusUpdatesEntryView:\n     *     This object, for chaining.\n     */\n    render() {\n        ParentView.prototype.render.call(this);\n\n        this._reviewViews = this.model.get('reviews').map(review => {\n            const $reviewEl = this.$(`#review${review.id}`);\n\n            const view = new RB.ReviewRequestPage.ReviewView({\n                el: $reviewEl,\n                model: review,\n                entryModel: this.model,\n                $bannerFloatContainer: $reviewEl,\n                $bannerParent: $reviewEl.children('.banners'),\n                bannerNoFloatContainerClass: 'collapsed',\n            });\n            view.render();\n\n            this.setupReviewView(view);\n\n            return view;\n        });\n\n        if (this.model.get('pendingStatusUpdates')) {\n            this.model.watchUpdates(this.CHECK_UPDATES_MS);\n        }\n\n        return this;\n    },\n\n    /**\n     * Set up a review view.\n     *\n     * Subclasses can override this to provide additional setup for review\n     * views rendered on the page.\n     *\n     * Args:\n     *     view (RB.ReviewRequestPage.ReviewView):\n     *         The review view being set up.\n     */\n    setupReviewView(view) {\n    },\n\n    /**\n     * Run the tool associated with this status update.\n     *\n     * This will request a run/re-run using the status update API and\n     * immediately force an update of the model to check for the newly pending\n     * status updates.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The event that triggered the action.\n     */\n    _onRequestRunClicked(e) {\n        const $target = $(e.target);\n        const updateId = $target.data('statusUpdateId');\n        const reviewRequestId = this.model.get('reviewRequestId');\n\n        RB.apiCall({\n            type: 'PUT',\n            prefix: this.model.get('localSitePrefix') || '',\n            path: `/review-requests/${reviewRequestId}/status-updates/${updateId}/`,\n            buttons: $target,\n            data: {\n                state: 'request-run',\n            },\n            success: () => {\n                /*\n                 * Force at least one update immediately to fetch the new\n                 * pending state.\n                 */\n                this.model.stopWatchingUpdates();\n                this.model.watchUpdates(0);\n            },\n        });\n    },\n});\n\n\n})();\n"],"mappings":"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"}