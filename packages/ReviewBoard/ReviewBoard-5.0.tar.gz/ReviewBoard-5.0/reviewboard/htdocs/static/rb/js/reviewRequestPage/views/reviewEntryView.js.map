{"version":3,"file":"reviewEntryView.js","names":["ParentView","RB","ReviewRequestPage","EntryView","ReviewEntryView","extend","events","_","defaults","prototype","initialize","call","_reviewView","_draftBannerShown","_$boxStatus","_$fixItLabel","_$shipItLabel","beforeApplyUpdate","diffFragmentQueue","PageManager","getPage","diffCommentsData","model","get","i","length","saveFragment","render","ReviewView","el","entryModel","$bannerFloatContainer","_$box","$bannerParent","$","bannerNoFloatContainerClass","find","listenTo","hasDraft","$el","toggleClass","_updateLabels","getReviewReplyEditorView","contextType","contextID","_updateLabel","hasOpenIssues","$label","visible","boxClassName","addClass","show","css","opacity","left","removeClass","_revokeShipIt","confirmation","strings","revokeShipItConfirm","confirm","_clearRevokingShipIt","review","ready","set","save","attrs","err","alert","xhr","responseJSON","msg","setTimeout"],"sources":["../../../../../../static/rb/js/reviewRequestPage/views/reviewEntryView.es6.js"],"sourcesContent":["(function() {\n\n\nconst ParentView = RB.ReviewRequestPage.EntryView;\n\n\n/**\n * Displays a review with discussion on the review request page.\n *\n * Review boxes contain discussion on parts of a review request. This includes\n * comments, screenshots, and file attachments.\n */\nRB.ReviewRequestPage.ReviewEntryView = ParentView.extend({\n    events: _.defaults({\n        'click .revoke-ship-it': '_revokeShipIt',\n    }, ParentView.prototype.events),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        ParentView.prototype.initialize.call(this);\n\n        this._reviewView = null;\n        this._draftBannerShown = false;\n        this._$boxStatus = null;\n        this._$fixItLabel = null;\n        this._$shipItLabel = null;\n    },\n\n    /**\n     * Save state before applying an update from the server.\n     *\n     * This will save all the loaded diff fragments on the entry so that\n     * they'll be loaded from cache when processing the fragments again for\n     * the entry after reload.\n     */\n    beforeApplyUpdate() {\n        const diffFragmentQueue = RB.PageManager.getPage().diffFragmentQueue;\n        const diffCommentsData = this.model.get('diffCommentsData');\n\n        for (let i = 0; i < diffCommentsData.length; i++) {\n            diffFragmentQueue.saveFragment(diffCommentsData[i][0]);\n        }\n    },\n\n    /**\n     * Render the review box.\n     *\n     * This will prepare a reply draft banner, used if the user is replying\n     * to any comments on the review.\n     *\n     * Each comment section will be set up to allow discussion.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewEntryView:\n     *     This object, for chaining.\n     */\n    render() {\n        ParentView.prototype.render.call(this);\n\n        this._reviewView = new RB.ReviewRequestPage.ReviewView({\n            el: this.el,\n            model: this.model.get('review'),\n            entryModel: this.model,\n            $bannerFloatContainer: this._$box,\n            $bannerParent: this.$('.banners'),\n            bannerNoFloatContainerClass: 'collapsed',\n        });\n\n        this._$boxStatus = this.$('.box-status');\n        this._$fixItLabel = this._$boxStatus.find('.fix-it-label');\n        this._$shipItLabel = this._$boxStatus.find('.ship-it-label');\n\n        this.listenTo(this._reviewView, 'hasDraftChanged',\n                      hasDraft => this.$el.toggleClass('has-draft', hasDraft));\n        this.listenTo(this._reviewView, 'openIssuesChanged',\n                      this._updateLabels);\n\n        this._reviewView.render();\n        this._updateLabels();\n\n        return this;\n    },\n\n    /**\n     * Return the ReviewReplyEditorView with the given context type and ID.\n     *\n     * Args:\n     *     contextType (string):\n     *         The type of object being replied to (such as ``body_top`` or\n     *         ``diff_comments``)\n     *\n     *     contextID (number, optional):\n     *         The ID of the comment being replied to, if appropriate.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewReplyEditorView:\n     *     The matching editor view.\n     */\n    getReviewReplyEditorView(contextType, contextID) {\n        return this._reviewView.getReviewReplyEditorView(contextType,\n                                                         contextID);\n    },\n\n    /**\n     * Update the \"Ship It\" and \"Fix It\" labels based on the open issue counts.\n     *\n     * If there are open issues, there will be a \"Fix it!\" label.\n     *\n     * If there's a Ship It, there will be a \"Ship it!\" label.\n     *\n     * If there's both a Ship It and open issues, the \"Fix it!\" label will\n     * be shown overlaid on top of the \"Ship it!\" label, and will go away\n     * once the issues are resolved.\n     */\n    _updateLabels() {\n        this._updateLabel(this._$fixItLabel,\n                          this._reviewView.hasOpenIssues(),\n                          'has-issues');\n        this._updateLabel(this._$shipItLabel,\n                          this.model.get('review').get('shipIt'),\n                          'ship-it');\n    },\n\n    /**\n     * Update the visibility of a label.\n     *\n     * The label's position and opacity will be set based on whether the\n     * label is intended to be visible. The label status box's CSS classes will\n     * also be updated based on the visibility and the provided CSS class name.\n     *\n     * Combined with CSS rules, the label will transition the opacity and\n     * the position.\n     *\n     * Args:\n     *     $label (jQuery):\n     *         The label element.\n     *\n     *     visible (boolean):\n     *         Whether the label should be shown as visible.\n     *\n     *     boxClassName (string):\n     *         The CSS class to add to or remove from the status box.\n     */\n    _updateLabel($label, visible, boxClassName) {\n        if (visible) {\n            this._$boxStatus.addClass(boxClassName);\n            $label\n                .show()\n                .css({\n                    opacity: 1,\n                    left: 0,\n                });\n        } else {\n            $label.css({\n                opacity: 0,\n                left: '-100px',\n            });\n            this._$boxStatus.removeClass(boxClassName);\n        }\n    },\n\n    /**\n     * Revoke the Ship It on the review.\n     *\n     * This will first confirm that the user does want to revoke the Ship It.\n     * If they confirm, the Ship It will be removed via an API call.\n     */\n    async _revokeShipIt() {\n        this._$boxStatus.addClass('revoking-ship-it');\n\n        const confirmation =\n            RB.ReviewRequestPage.ReviewEntryView.strings.revokeShipItConfirm;\n\n        if (!confirm(confirmation)) {\n            this._clearRevokingShipIt();\n            return;\n        }\n\n        const review = this.model.get('review');\n\n        await review.ready();\n        review.set('shipIt', false);\n\n        try {\n            await review.save({ attrs: ['shipIt', 'includeTextTypes'] });\n        } catch (err) {\n            review.set('shipIt', true);\n            this._clearRevokingShipIt();\n\n            alert(err.xhr.responseJSON.err.msg);\n            return;\n        }\n\n        this._updateLabels();\n\n        /*\n         * Add a delay before removing this, so that the animation won't be\n         * impacted. This will encompass the length of the animation.\n         */\n        setTimeout(() => this._clearRevokingShipIt(), 900);\n    },\n\n    /**\n     * Clear the Revoke Ship It state.\n     *\n     * This will clear the CSS classes related to the revokation.\n     */\n    _clearRevokingShipIt() {\n        this._$boxStatus.removeClass('revoking-ship-it');\n    },\n}, {\n    strings: {\n        revokeShipItConfirm: gettext('Are you sure you want to revoke this Ship It?\\n\\nThis cannot be undone.'),\n    },\n});\n\n\n})();\n"],"mappings":"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"}