{"version":3,"file":"inlineFormGroupView.js","names":["RB","Admin","InlineFormGroupView","Backbone","View","extend","events","initialize","_$addButton","_$inlineTemplate","_$inlines","_inlineViews","render","model","prefix","get","$inlines","$el","children","console","assert","length","$actions","$addButton","detach","removeClass","$initialForms","$maxNumForms","$minNumForms","$totalForms","maxInlines","val","set","initialInlines","parseInt","minInlines","listenTo","inlines","setVisible","canAddInline","_onInlineRemoved","each","index","el","_setupInlineForm","isInitial","addInlineForm","newIndex","$inline","clone","view","append","trigger","attrs","inline","InlineForm","_","inlineView","InlineFormView","push","add","splice","remove","forEach","i","_onAddClicked","e","preventDefault","stopPropagation"],"sources":["../../../../../../static/rb/js/admin/views/inlineFormGroupView.es6.js"],"sourcesContent":["/**\n * A view for managing a group of inline forms for related model objects.\n *\n * This takes care of managing the form data and rendering of multiple inline\n * forms, allowing the addition of new inline forms (up to the configured\n * limit for the model), ensuring there's a minimum available, and tracking\n * what needs to be sent to the server when saving the model.\n *\n * There's an expectation that the last form provided in the group is going to\n * be a template used for any new forms that are added.\n */\nRB.Admin.InlineFormGroupView = Backbone.View.extend({\n    events: {\n        'click .rb-c-admin-form-inline-group__add-action': '_onAddClicked',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this._$addButton = null;\n        this._$inlineTemplate = null;\n        this._$inlines = null;\n        this._inlineViews = [];\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.Admin.InlineFormGroupView:\n     *     This object, for chaining.\n     */\n    render() {\n        const model = this.model;\n        const prefix = model.get('prefix');\n\n        const $inlines = this.$el.children(\n            '.rb-c-admin-form-inline-group__inlines');\n        console.assert($inlines.length === 1);\n\n        const $actions = this.$el.children(\n            '.rb-c-admin-form-inline-group__actions');\n        console.assert($actions.length === 1);\n\n        const $addButton = $actions.children(\n            '.rb-c-admin-form-inline-group__add-action');\n        console.assert($addButton.length === 1);\n\n        this._$inlines = $inlines;\n\n        /*\n         * Set up and store the template for later use. We'll remove it from\n         * the DOM so we don't end up binding anything to it.\n         */\n        this._$inlineTemplate = $inlines.children('.-is-template')\n            .detach()\n            .removeClass('-is-template');\n        console.assert(this._$inlineTemplate.length === 1);\n\n        /*\n         * Populate the state in the model.\n         *\n         * The form field names come from Django's own ManagementForm\n         * (django.forms.formsets), and are outside our control. They may need\n         * to be updated if Django reworks their naming or logic, though this\n         * is probably unlikely.\n         */\n        const $initialForms = $inlines.children(`#id_${prefix}-INITIAL_FORMS`);\n        const $maxNumForms = $inlines.children(`#id_${prefix}-MAX_NUM_FORMS`);\n        const $minNumForms = $inlines.children(`#id_${prefix}-MIN_NUM_FORMS`);\n        const $totalForms = $inlines.children(`#id_${prefix}-TOTAL_FORMS`);\n\n        console.assert($initialForms.length === 1);\n        console.assert($maxNumForms.length === 1);\n        console.assert($minNumForms.length === 1);\n        console.assert($totalForms.length === 1);\n\n        const maxInlines = $maxNumForms.val();\n\n        model.set({\n            initialInlines: parseInt($initialForms.val(), 10),\n            maxInlines: maxInlines === '' ? null : parseInt(maxInlines, 10),\n            minInlines: parseInt($minNumForms.val(), 10),\n        });\n\n        /*\n         * Update the total forms state and the visibility of the Add button\n         * whenever we change the number of inlines in the group. This will also\n         * update just below when we first populate the value on the model.\n         */\n        this.listenTo(model.inlines, 'update', () => {\n            $addButton.setVisible(model.canAddInline());\n            $totalForms.val(model.inlines.length);\n        });\n\n        this.listenTo(model.inlines, 'remove', this._onInlineRemoved);\n\n        /*\n         * Create and track views for every inline.\n         */\n        $inlines.children('.rb-c-admin-form-inline').each((index, el) => {\n            this._setupInlineForm(el, {\n                index: index,\n                isInitial: true,\n            });\n        });\n\n        console.assert(\n            parseInt($totalForms.val(), 10) === model.inlines.length);\n\n        return this;\n    },\n\n    /**\n     * Add a new inline form.\n     *\n     * This will add a new inline form and register it, scheduling it to be\n     * sent to the server when the main form is submitted.\n     *\n     * Returns:\n     *     RB.Admin.InlineFormView:\n     *     The new inline form view.\n     */\n    addInlineForm() {\n        const newIndex = this.model.inlines.length;\n\n        const $inline = this._$inlineTemplate.clone();\n        const view = this._setupInlineForm($inline[0]);\n        view.model.set('index', newIndex);\n\n        this._$inlines.append($inline);\n\n        this.trigger('inlineFormAdded', view);\n\n        return view;\n    },\n\n    /**\n     * Set up an inline form.\n     *\n     * This will construct a :js:class:`RB.Admin.InlineFormView` for the\n     * element, show it, and update any form state.\n     *\n     * Args:\n     *     el (Element):\n     *         The element representing the inline form.\n     *\n     *     attrs (object):\n     *         Attributes for the model.\n     *\n     * Returns:\n     *     RB.Admin.InlineFormView:\n     *     The new view for the element.\n     */\n    _setupInlineForm(el, attrs) {\n        const model = this.model;\n\n        const inline = new RB.Admin.InlineForm(_.extend({\n            prefix: model.get('prefix'),\n        }, attrs));\n\n        const inlineView = new RB.Admin.InlineFormView({\n            el: el,\n            model: inline,\n        });\n        inlineView.render();\n\n        this._inlineViews.push(inlineView);\n        model.inlines.add(inline);\n\n        return inlineView;\n    },\n\n    /**\n     * Handle the removal of an inline form.\n     *\n     * This will remove the inline form and its view from the page, and update\n     * the indexes of all other inline forms.\n     *\n     * Args:\n     *     inline (RB.Admin.InlineForm):\n     *         The inline form that was removed.\n     */\n    _onInlineRemoved(inline) {\n        const index = inline.get('index');\n        const inlineView = this._inlineViews[index];\n\n        this._inlineViews.splice(index, 1);\n        inlineView.remove();\n\n        /* Update the indexes of all remaining form views. */\n        this._inlineViews.forEach((view, i) => view.model.set('index', i));\n\n        this.trigger('inlineFormRemoved', inlineView);\n    },\n\n    /**\n     * Handle an click on Add <inline name>.\n     *\n     * This will add a new inline form view.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The click event.\n     */\n    _onAddClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.addInlineForm();\n    },\n});\n"],"mappings":"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"}