{"version":3,"file":"reviewablePageModel.js","names":["RB","ReviewablePage","Page","extend","defaults","_","checkForUpdates","checkUpdatesType","lastActivityTimestamp","pendingReview","reviewRequest","prototype","initialize","attributes","apply","arguments","get","console","assert","commentIssueManager","CommentIssueManager","editorData","fileAttachments","Backbone","Collection","map","mutableByUser","attrs","draft","createFileAttachment","model","FileAttachment","reviewRequestEditor","ReviewRequestEditor","parse","listenTo","info","trigger","_registerForUpdates","markShipIt","ready","set","shipIt","bodyTop","publish","rsp","reviewRequestData","state","ReviewRequest","visibility","repository","Repository","localSitePrefix","extraDraftAttrs","extraReviewRequestDraftData","createReview","beginCheckForUpdates"],"sources":["../../../../../../static/rb/js/pages/models/reviewablePageModel.es6.js"],"sourcesContent":["/**\n * A page used for editing, viewing, or reviewing review requests.\n *\n * This is responsible for setting up objects needed for manipulating a\n * review request or related state, for performing reviews, or otherwise\n * handling review-related tasks.\n *\n * This can be used directly or can be subclassed in order to provide\n * additional logic.\n *\n * Attributes:\n *     commentIssueManager (RB.CommentIssueManager):\n *         Manages the issue states for published comments.\n *\n *     reviewRequestEditor (RB.ReviewRequestEditor):\n *         Manages the edit states and capabilities for the review request\n *         for the page.\n *\n * Model Attributes:\n *     checkForUpdates (boolean):\n *         Whether the page should periodically check the server for updates\n *         made to the page.\n *\n *     checkUpdatesType (string):\n *         A type identifier used to represent the page for any update checks.\n *         This corresponds to strings used server-side. Arbitrary values\n *         have undefined behavior.\n *\n *     lastActivityTimestamp (string):\n *         A string-encoded timestamp representing the last time there was\n *         known activity on the review request.\n *\n *     pendingReview (RB.Review):\n *         The pending review (which may or may not yet have a server-side\n *         representation) used for any new review content.\n *\n *     reviewRequest (RB.ReviewRequest):\n *         The review request that this page is for.\n */\nRB.ReviewablePage = RB.Page.extend({\n    defaults: _.defaults({\n        checkForUpdates: false,\n        checkUpdatesType: null,\n        lastActivityTimestamp: null,\n        pendingReview: null,\n        reviewRequest: null,\n    }, RB.Page.prototype.defaults),\n\n    /**\n     * Initialize the page.\n     *\n     * This will construct a series of objects needed to work with reviews\n     * and the review request. It will also begin checking for updates made\n     * to the page, notifying the user if anything has changed.\n     *\n     * Args:\n     *     attributes (object):\n     *         Initial attributes passed to the constructor. This is used to\n     *         access initial state that won't otherwise be stored in this\n     *         page.\n     */\n    initialize(attributes) {\n        RB.Page.prototype.initialize.apply(this, arguments);\n\n        const reviewRequest = this.get('reviewRequest');\n\n        console.assert(\n            reviewRequest,\n            'The reviewRequest attribute or parse=true must be provided.');\n        console.assert(\n            this.get('pendingReview'),\n            'The pendingReview attribute or parse=true must be provided.');\n\n        this.commentIssueManager = new RB.CommentIssueManager({\n            reviewRequest: reviewRequest,\n        });\n\n        const editorData = attributes.editorData || {};\n        const fileAttachments = new Backbone.Collection(\n            _.map(editorData.fileAttachments,\n                  (editorData.mutableByUser\n                   ? attrs => reviewRequest.draft.createFileAttachment(attrs)\n                   : attrs => reviewRequest.createFileAttachment(attrs))),\n            {\n                model: RB.FileAttachment,\n            });\n\n        this.reviewRequestEditor = new RB.ReviewRequestEditor(\n            _.defaults({\n                commentIssueManager: this.commentIssueManager,\n                reviewRequest: reviewRequest,\n                fileAttachments: fileAttachments,\n            }, editorData),\n            {parse: true});\n\n        this.listenTo(reviewRequest, 'updated',\n                      info => this.trigger('reviewRequestUpdated', info));\n\n        if (this.get('checkForUpdates')) {\n            this._registerForUpdates();\n        }\n    },\n\n    /**\n     * Post a review marked as Ship It.\n     *\n     * This will create and publish a review, setting the Ship It state and\n     * changing the text to say \"Ship It!\".\n     */\n    async markShipIt() {\n        const pendingReview = this.get('pendingReview');\n\n        await pendingReview.ready();\n\n        pendingReview.set({\n            shipIt: true,\n            bodyTop: gettext('Ship It!'),\n        });\n        await pendingReview.publish();\n    },\n\n    /**\n     * Parse the data for the page.\n     *\n     * This will take data from the server and turn it into a series of\n     * objects and attributes needed for parts of the page.\n     *\n     * Args:\n     *     rsp (object):\n     *         The incoming data provided for the page.\n     *\n     * Returns:\n     *     object:\n     *     The resulting attributes for the page.\n     */\n    parse(rsp) {\n        let reviewRequestData;\n\n        if (rsp.reviewRequestData) {\n            reviewRequestData = _.defaults({\n                state: RB.ReviewRequest[rsp.reviewRequestData.state],\n                visibility: RB.ReviewRequest['VISIBILITY_' +\n                                             rsp.reviewRequestData.visibility],\n            }, rsp.reviewRequestData);\n\n            if (reviewRequestData.repository) {\n                reviewRequestData.repository = new RB.Repository(\n                    _.defaults({\n                        localSitePrefix: rsp.reviewRequestData.localSitePrefix,\n                    }, rsp.reviewRequestData.repository));\n            }\n        }\n\n        const reviewRequest = new RB.ReviewRequest(\n            reviewRequestData,\n            {\n                extraDraftAttrs: rsp.extraReviewRequestDraftData,\n            });\n\n        return {\n            reviewRequest: reviewRequest,\n            pendingReview: reviewRequest.createReview(),\n            lastActivityTimestamp: rsp.lastActivityTimestamp,\n            checkForUpdates: rsp.checkForUpdates,\n            checkUpdatesType: rsp.checkUpdatesType,\n        };\n    },\n\n    /**\n     * Register for update notification to the review request from the server.\n     *\n     * The server will be periodically checked for new updates. When a new\n     * update arrives, an update bubble will be displayed in the bottom-right\n     * of the page, and if the user has allowed desktop notifications in their\n     * account settings, a desktop notification will be shown with the update\n     * information.\n     */\n    _registerForUpdates() {\n        this.get('reviewRequest').beginCheckForUpdates(\n            this.get('checkUpdatesType'),\n            this.get('lastActivityTimestamp'));\n    },\n});\n"],"mappings":"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"}