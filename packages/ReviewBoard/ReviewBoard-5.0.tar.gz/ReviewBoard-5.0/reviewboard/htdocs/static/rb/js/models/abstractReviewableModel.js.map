{"version":3,"file":"abstractReviewableModel.js","names":["RB","AbstractReviewable","Backbone","Model","extend","defaults","caption","renderedInline","reviewRequest","review","serializedCommentBlocks","commentBlockModel","defaultCommentBlockFields","initialize","get","console","assert","set","createReview","commentBlocks","Collection","model","_","each","loadSerializedCommentBlock","createCommentBlock","attrs","add","serializedCommentBlock"],"sources":["../../../../../static/rb/js/models/abstractReviewableModel.es6.js"],"sourcesContent":["/**\n * Abstract model for reviewable content.\n *\n * This is the basis for subclasses that handle review capabilities for\n * some form of content, such as a file attachment.\n *\n * All subclasses must provide a 'commentBlockModel' object type and an\n * loadSerializedCommentBlock() function.\n *\n * Model Attributes:\n *     caption (string):\n *         The caption of the reviewed object, if any.\n *\n *     renderedInline (boolean):\n *         Whether or not the comment is rendered inline.\n *\n *     reviewRequest (RB.ReviewRequest):\n *         The review request that the object being reviewed is associated\n *         with.\n *\n *     review (RB.Review):\n *         The current review that new comments will be added to.\n *\n *     serializedCommentBlocks (Array of object):\n *         Serialized comment blocks.\n */\nRB.AbstractReviewable = Backbone.Model.extend({\n    defaults: {\n        caption: null,\n        renderedInline: false,\n        reviewRequest: null,\n        review: null,\n        serializedCommentBlocks: [],\n    },\n\n    /**\n     * The AbstractCommentBlock subclass for this content type's comment\n     * blocks.\n     */\n    commentBlockModel: null,\n\n    /**\n     * The list of fields from this model to populate in each new instance\n     * of a commentBlockModel.\n     *\n     * This can also be a function, if anything more custom is required.\n     */\n    defaultCommentBlockFields: [],\n\n    /**\n     * Initialize the reviewable.\n     */\n    initialize() {\n        const reviewRequest = this.get('reviewRequest');\n\n        console.assert(this.commentBlockModel,\n                       \"'commentBlockModel' must be defined in the \" +\n                       \"reviewable's object definition\");\n        console.assert(reviewRequest,\n                       \"'reviewRequest' must be provided when constructing \" +\n                       \"the reviewable\");\n\n        if (!this.get('review')) {\n            this.set('review', reviewRequest.createReview());\n        }\n\n        this.commentBlocks = new Backbone.Collection();\n        this.commentBlocks.model = this.commentBlockModel;\n\n        /*\n         * Add all existing comment regions to the page.\n         *\n         * This intentionally doesn't use forEach because some review UIs (such\n         * as the image review UI) return their serialized comments as an\n         * object instead of an array.\n         */\n        _.each(this.get('serializedCommentBlocks'),\n               this.loadSerializedCommentBlock,\n               this);\n    },\n\n    /**\n     * Create a CommentBlock for this reviewable.\n     *\n     * The CommentBlock will be stored in the list of comment blocks.\n     *\n     * Args:\n     *     attrs (object):\n     *         The attributes for the comment block;\n     */\n    createCommentBlock(attrs) {\n        this.commentBlocks.add(_.defaults({\n            reviewRequest: this.get('reviewRequest'),\n            review: this.get('review'),\n        }, attrs));\n    },\n\n    /**\n     * Load a serialized comment and add comment blocks for it.\n     *\n     * This should parse the serializedCommentBlock and add one or more\n     * comment blocks (using createCommentBlock).\n     *\n     * This must be implemented by subclasses.\n     *\n     * Args:\n     *     serializedCommentBlock (object):\n     *         The serialized data for the new comment block(s).\n     */\n    loadSerializedCommentBlock(serializedCommentBlock) {\n        console.assert(false, 'loadSerializedCommentBlock must be ' +\n                              'implemented by a subclass');\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,kBAAH,GAAwBC,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsB;EAC1CC,QAAQ,EAAE;IACNC,OAAO,EAAE,IADH;IAENC,cAAc,EAAE,KAFV;IAGNC,aAAa,EAAE,IAHT;IAINC,MAAM,EAAE,IAJF;IAKNC,uBAAuB,EAAE;EALnB,CADgC;;EAS1C;AACJ;AACA;AACA;EACIC,iBAAiB,EAAE,IAbuB;;EAe1C;AACJ;AACA;AACA;AACA;AACA;EACIC,yBAAyB,EAAE,EArBe;;EAuB1C;AACJ;AACA;EACIC,UAAU,GAAG;IACT,MAAML,aAAa,GAAG,KAAKM,GAAL,CAAS,eAAT,CAAtB;IAEAC,OAAO,CAACC,MAAR,CAAe,KAAKL,iBAApB,EACe,gDACA,gCAFf;IAGAI,OAAO,CAACC,MAAR,CAAeR,aAAf,EACe,wDACA,gBAFf;;IAIA,IAAI,CAAC,KAAKM,GAAL,CAAS,QAAT,CAAL,EAAyB;MACrB,KAAKG,GAAL,CAAS,QAAT,EAAmBT,aAAa,CAACU,YAAd,EAAnB;IACH;;IAED,KAAKC,aAAL,GAAqB,IAAIjB,QAAQ,CAACkB,UAAb,EAArB;IACA,KAAKD,aAAL,CAAmBE,KAAnB,GAA2B,KAAKV,iBAAhC;IAEA;AACR;AACA;AACA;AACA;AACA;AACA;;IACQW,CAAC,CAACC,IAAF,CAAO,KAAKT,GAAL,CAAS,yBAAT,CAAP,EACO,KAAKU,0BADZ,EAEO,IAFP;EAGH,CArDyC;;EAuD1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,kBAAkB,CAACC,KAAD,EAAQ;IACtB,KAAKP,aAAL,CAAmBQ,GAAnB,CAAuBL,CAAC,CAACjB,QAAF,CAAW;MAC9BG,aAAa,EAAE,KAAKM,GAAL,CAAS,eAAT,CADe;MAE9BL,MAAM,EAAE,KAAKK,GAAL,CAAS,QAAT;IAFsB,CAAX,EAGpBY,KAHoB,CAAvB;EAIH,CArEyC;;EAuE1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIF,0BAA0B,CAACI,sBAAD,EAAyB;IAC/Cb,OAAO,CAACC,MAAR,CAAe,KAAf,EAAsB,wCACA,2BADtB;EAEH;;AAtFyC,CAAtB,CAAxB"}