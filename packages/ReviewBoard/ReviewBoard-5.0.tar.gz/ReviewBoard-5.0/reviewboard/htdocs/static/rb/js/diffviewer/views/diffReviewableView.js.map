{"version":3,"file":"diffReviewableView.js","names":["RB","DiffReviewableView","AbstractReviewableView","extend","tagName","commentBlockView","DiffCommentBlockView","commentsListName","events","initialize","prototype","call","_selector","TextCommentRowSelector","el","reviewableView","_hiddenCommentBlockViews","_visibleCommentBlockViews","_$filenameRow","_$revisionRow","_filenameReservedWidths","_colReservedWidths","_numColumns","_numFilenameColumns","_prevContentWidth","_prevFilenameWidth","_prevFullWidth","_$window","$","window","_$parent","$el","parent","on","_placeCommentBlockView","remove","render","_centered","CenteredElementManager","$thead","tHead","children","_","each","thumbnailEl","$thumbnail","id","data","$caption","find","reviewRequest","model","get","fileAttachment","createFileAttachment","hasClass","set","text","_precalculateContentWidths","_updateColumnSizes","toggleWhitespaceOnlyChunks","toggleClass","chunk","$chunk","dimming","$children","first","last","chunkID","split","trigger","siblings","addBack","toggle","createComment","beginLineNum","endLineNum","beginNode","endNode","prevBeginRowIndex","commentBlock","rowEls","getRowsForRange","beginRowEl","endRowEl","setRows","appendTo","$beginRow","cells","push","rowIndex","_placeHiddenCommentBlockViews","hiddenCommentBlockViews","i","length","_hideRemovedCommentBlockViews","visibleCommentBlockViews","is","sortBy","_updateCollapseButtonPos","updatePosition","_expandOrCollapse","$btn","expanding","chunkIndex","linesOfContext","html","getRenderedDiffFragment","$tbody","closest","tbodyID","$scrollAnchor","scrollAnchorID","exec","scrollOffsetTop","offset","top","scrollTop","prev","next","replaceWith","undefined","newEl","document","getElementById","setElements","Map","Array","map","$top","cellPadding","containerExtents","getExtents","$cells","querySelector","eq","outerWidth","$parent","fullWidth","width","contentWidth","filenameWidth","css","Math","ceil","updateLayout","_onDownloadLinkClicked","e","stopPropagation","_onFileHeaderClicked","preventDefault","_onMovedLineClicked","target","_onMouseUp","node","anchor","name","_onExpandChunkClicked","$target","_onCollapseChunkClicked","_onShowDeletedClicked","_onToggleUnicodeCharsClicked","$button","ducsShown","addClass","removeClass"],"sources":["../../../../../../static/rb/js/diffviewer/views/diffReviewableView.es6.js"],"sourcesContent":["/*\n * Handles reviews of the diff for a file.\n *\n * This provides commenting abilities for ranges of lines on a diff, as well\n * as showing existing comments, and handling other interaction around\n * per-file diffs.\n */\nRB.DiffReviewableView = RB.AbstractReviewableView.extend({\n    tagName: 'table',\n\n    commentBlockView: RB.DiffCommentBlockView,\n    commentsListName: 'diff_comments',\n\n    events: {\n        'click .download-link': '_onDownloadLinkClicked',\n        'click thead tr': '_onFileHeaderClicked',\n        'click .moved-to, .moved-from': '_onMovedLineClicked',\n        'click .diff-collapse-btn': '_onCollapseChunkClicked',\n        'click .diff-expand-btn': '_onExpandChunkClicked',\n        'click .show-deleted-content-action': '_onShowDeletedClicked',\n        'click .rb-o-toggle-ducs': '_onToggleUnicodeCharsClicked',\n        'mouseup': '_onMouseUp'\n    },\n\n    /**\n     * Initialize the reviewable for a file's diff.\n     */\n    initialize() {\n        RB.AbstractReviewableView.prototype.initialize.call(this);\n\n        this._selector = new RB.TextCommentRowSelector({\n            el: this.el,\n            reviewableView: this,\n        });\n\n        this._hiddenCommentBlockViews = [];\n        this._visibleCommentBlockViews = [];\n\n        /* State for keeping consistent column widths for diff content. */\n        this._$filenameRow = null;\n        this._$revisionRow = null;\n        this._filenameReservedWidths = 0;\n        this._colReservedWidths = 0;\n        this._numColumns = 0;\n        this._numFilenameColumns = 0;\n        this._prevContentWidth = null;\n        this._prevFilenameWidth = null;\n        this._prevFullWidth = null;\n\n        /*\n         * Wrap this only once so we don't have to re-wrap every time\n         * the page scrolls.\n         */\n        this._$window = $(window);\n        this._$parent = this.$el.parent();\n\n        this.on('commentBlockViewAdded', this._placeCommentBlockView, this);\n    },\n\n    /**\n     * Remove the reviewable from the DOM.\n     */\n    remove() {\n        RB.AbstractReviewableView.prototype.remove.call(this);\n\n        this._selector.remove();\n    },\n\n    /**\n     * Render the reviewable.\n     *\n     * Returns:\n     *     RB.DiffReviewableView:\n     *     This object, for chaining.\n     */\n    render() {\n        RB.AbstractReviewableView.prototype.render.call(this);\n\n        this._centered = new RB.CenteredElementManager();\n\n        const $thead = $(this.el.tHead);\n\n        this._$revisionRow = $thead.children('.revision-row');\n        this._$filenameRow = $thead.children('.filename-row');\n\n        this._selector.render();\n\n        _.each(this.$el.children('tbody.binary'), thumbnailEl => {\n            const $thumbnail = $(thumbnailEl);\n            const id = $thumbnail.data('file-id');\n            const $caption = $thumbnail.find('.file-caption .edit');\n            const reviewRequest = this.model.get('reviewRequest');\n            const fileAttachment = reviewRequest.createFileAttachment({\n                id: id,\n            });\n\n            if (!$caption.hasClass('empty-caption')) {\n                fileAttachment.set('caption', $caption.text());\n            }\n        });\n\n        this._precalculateContentWidths();\n        this._updateColumnSizes();\n\n        return this;\n    },\n\n    /*\n     * Toggles the display of whitespace-only chunks.\n     */\n    toggleWhitespaceOnlyChunks() {\n        this.$('tbody tr.whitespace-line').toggleClass('dimmed');\n\n        _.each(this.$el.children('tbody.whitespace-chunk'), chunk => {\n            const $chunk = $(chunk);\n            const dimming = $chunk.hasClass('replace');\n\n            $chunk.toggleClass('replace');\n\n            const $children = $chunk.children();\n            $children.first().toggleClass('first');\n            $children.last().toggleClass('last');\n\n            const chunkID = chunk.id.split('chunk')[1];\n\n            if (dimming) {\n                this.trigger('chunkDimmed', chunkID);\n            } else {\n                this.trigger('chunkUndimmed', chunkID);\n            }\n        });\n\n        /*\n         * Swaps the visibility of the \"This file has whitespace changes\"\n         * tbody and the chunk siblings.\n         */\n        this.$el.children('tbody.whitespace-file')\n            .siblings('tbody')\n            .addBack()\n                .toggle();\n    },\n\n   /**\n    * Create a comment for a chunk of a diff.\n    *\n    * Args:\n    *     beginLineNum (number)\n    *         The first line of the diff to comment on.\n    *\n    *     endLineNum (number):\n    *         The last line of the diff to comment on.\n    *\n    *     beginNode (Element):\n    *         The row corresponding to the first line of the diff being\n    *         commented upon.\n    *\n    *     endNode (Element):\n    *         The row corresponding to the last line of the diff being\n    *         commented upon.\n    */\n    createComment(beginLineNum, endLineNum, beginNode, endNode) {\n        this._selector.createComment(beginLineNum, endLineNum, beginNode,\n                                     endNode);\n    },\n\n    /**\n     * Place a CommentBlockView on the page.\n     *\n     * This will compute the row range for the CommentBlockView and then\n     * render it to the screen, if the row range exists.\n     *\n     * If it doesn't exist yet, the CommentBlockView will be stored in the\n     * list of hidden comment blocks for later rendering.\n     *\n     * Args:\n     *     commentBlockView (RB.DiffCommentBlockView):\n     *         The comment block view to place.\n     *\n     *     prevBeginRowIndex (number):\n     *         The row index to begin at. This places a limit on the rows\n     *         searched.\n     */\n    _placeCommentBlockView(commentBlockView, prevBeginRowIndex) {\n        const commentBlock = commentBlockView.model;\n\n        const rowEls = this._selector.getRowsForRange(\n            commentBlock.get('beginLineNum'),\n            commentBlock.get('endLineNum'),\n            prevBeginRowIndex);\n\n        if (rowEls !== null) {\n            const beginRowEl = rowEls[0];\n            const endRowEl = rowEls[1];\n\n            /*\n             * Note that endRow might be null if it exists in a collapsed\n             * region, so we can get away with just using beginRow if we\n             * need to.\n             */\n            commentBlockView.setRows($(beginRowEl), $(endRowEl || beginRowEl));\n            commentBlockView.$el.appendTo(\n                commentBlockView.$beginRow[0].cells[0]);\n            this._visibleCommentBlockViews.push(commentBlockView);\n\n            return beginRowEl.rowIndex;\n        } else {\n            this._hiddenCommentBlockViews.push(commentBlockView);\n            return prevBeginRowIndex;\n        }\n    },\n\n    /**\n     * Place any hidden comment blocks onto the diff viewer.\n     */\n    _placeHiddenCommentBlockViews() {\n        const hiddenCommentBlockViews = this._hiddenCommentBlockViews;\n        this._hiddenCommentBlockViews = [];\n        let prevBeginRowIndex;\n\n        for (let i = 0; i < hiddenCommentBlockViews.length; i++) {\n            prevBeginRowIndex = this._placeCommentBlockView(\n                hiddenCommentBlockViews[i], prevBeginRowIndex);\n        }\n    },\n\n    /**\n     * Mark any comment block views not visible as hidden.\n     */\n    _hideRemovedCommentBlockViews() {\n        const visibleCommentBlockViews = this._visibleCommentBlockViews;\n        this._visibleCommentBlockViews = [];\n\n        for (let i = 0; i < visibleCommentBlockViews.length; i++) {\n            const commentBlockView = visibleCommentBlockViews[i];\n\n            if (commentBlockView.$el.is(':visible')) {\n                this._visibleCommentBlockViews.push(commentBlockView);\n            } else {\n                this._hiddenCommentBlockViews.push(commentBlockView);\n            }\n        }\n\n        /* Sort these by line number so we can efficiently place them later. */\n        _.sortBy(\n            this._hiddenCommentBlockViews,\n            commentBlockView => commentBlockView.model.get('beginLineNum'));\n    },\n\n    /**\n     * Update the positions of the collapse buttons.\n     *\n     * This will attempt to position the collapse buttons such that they're\n     * in the center of the exposed part of the expanded chunk in the current\n     * viewport.\n     *\n     * As the user scrolls, they'll be able to see the button scroll along\n     * with them. It will not, however, leave the confines of the expanded\n     * chunk.\n     */\n    _updateCollapseButtonPos() {\n        this._centered.updatePosition();\n    },\n\n    /**\n     * Expands or collapses a chunk in a diff.\n     *\n     * This is called internally when an expand or collapse button is pressed\n     * for a chunk. It will fetch the diff and render it, displaying any\n     * contained comments, and setting up the resulting expand or collapse\n     * buttons.\n     *\n     * Args:\n     *     $btn (jQuery):\n     *         The expand/collapse button that was clicked.\n     *\n     *     expanding (boolean):\n     *          Whether or not we are expanding.\n     */\n    async _expandOrCollapse($btn, expanding) {\n        const chunkIndex = $btn.data('chunk-index');\n        const linesOfContext = $btn.data('lines-of-context');\n\n        const html = await this.model.getRenderedDiffFragment({\n            chunkIndex: chunkIndex,\n            linesOfContext: linesOfContext,\n        });\n\n        const $tbody = $btn.closest('tbody');\n        let tbodyID;\n        let $scrollAnchor;\n        let scrollAnchorID;\n\n        /*\n         * We want to position the new chunk or collapse button at\n         * roughly the same position as the chunk or collapse button\n         * that the user pressed. Figure out what it is exactly and what\n         * the scroll offsets are so we can later reposition the scroll\n         * offset.\n         */\n        if (expanding) {\n            $scrollAnchor = this.$el;\n            scrollAnchorID = $scrollAnchor[0].id;\n\n            if (linesOfContext === 0) {\n                /*\n                 * We've expanded the entire chunk, so we'll be looking\n                 * for the collapse button.\n                 */\n                tbodyID = /collapsed-(.*)/.exec(scrollAnchorID)[1];\n            } else {\n                tbodyID = scrollAnchorID;\n            }\n        } else {\n            $scrollAnchor = $btn;\n        }\n\n        const scrollOffsetTop = ($scrollAnchor.offset().top -\n                                 this._$window.scrollTop());\n\n        /*\n         * If we already expanded, we may have one or two loaded chunks\n         * adjacent to the header. We want to remove those, since we'll\n         * be generating new ones that include that data.\n         */\n        $tbody.prev('.diff-header, .loaded').remove();\n        $tbody.next('.diff-header, .loaded').remove();\n\n        /*\n         * Replace the header with the new HTML. This may also include a\n         * new header.\n         */\n        $tbody.replaceWith(html);\n\n        if (expanding) {\n            this._placeHiddenCommentBlockViews();\n        } else {\n            this._hideRemovedCommentBlockViews();\n        }\n\n        /*\n         * Get the new tbody for the header, if any, and try to center.\n         */\n        if (tbodyID !== undefined) {\n            const newEl = document.getElementById(tbodyID);\n\n            if (newEl !== null) {\n                $scrollAnchor = $(newEl);\n\n                this._$window.scrollTop(\n                    $scrollAnchor.offset().top - scrollOffsetTop);\n            }\n        }\n\n        /* Recompute the set of buttons for later use. */\n        this._centered.setElements(new Map(\n            Array.prototype.map.call(\n                this.$('.diff-collapse-btn'),\n                el => [el, {\n                    $top: $(el).closest('tbody'),\n                }])\n        ));\n        this._updateCollapseButtonPos();\n\n        /*\n         * We'll need to update the column sizes, but first, we need\n         * to re-calculate things like the line widths, since they\n         * may be longer after expanding.\n         */\n        this._precalculateContentWidths();\n        this._updateColumnSizes();\n\n        this.trigger('chunkExpansionChanged');\n    },\n\n    /**\n     * Pre-calculate the widths and other state needed for column widths.\n     *\n     * This will store the number of columns and the reserved space that\n     * needs to be subtracted from the container width, to be used in later\n     * calculating the desired widths of the content areas.\n     */\n    _precalculateContentWidths() {\n        let cellPadding = 0;\n\n        if (!this.$el.hasClass('diff-error') && this._$revisionRow.length > 0) {\n            const containerExtents = this.$el.getExtents('p', 'lr');\n\n            /* Calculate the widths and state of the diff columns. */\n            let $cells = $(this._$revisionRow[0].cells);\n            cellPadding = $(this.el.querySelector('pre'))\n                .parent().addBack()\n                .getExtents('p', 'lr');\n\n            this._colReservedWidths = $cells.eq(0).outerWidth() + cellPadding +\n                                      containerExtents;\n            this._numColumns = $cells.length;\n\n            if (this._numColumns === 4) {\n                /* There's a left-hand side and a right-hand side. */\n                this._colReservedWidths += $cells.eq(2).outerWidth() +\n                                           cellPadding;\n            }\n\n            /* Calculate the widths and state of the filename columns. */\n            $cells = $(this._$filenameRow[0].cells);\n            this._numFilenameColumns = $cells.length;\n            this._filenameReservedWidths = containerExtents +\n                                           2 * this._numFilenameColumns;\n        } else {\n            this._colReservedWidths = 0;\n            this._filenameReservedWidths = 0;\n            this._numColumns = 0;\n            this._numFilenameColumns = 0;\n        }\n    },\n\n    /*\n     * Update the sizes of the diff content columns.\n     *\n     * This will figure out the minimum and maximum widths of the columns\n     * and set them in a stylesheet, ensuring that lines will constrain to\n     * those sizes (force-wrapping if necessary) without overflowing or\n     * causing the other column to shrink too small.\n     */\n    _updateColumnSizes() {\n        if (this.$el.hasClass('diff-error')) {\n            return;\n        }\n\n        let $parent = this._$parent;\n\n        if (!$parent.is(':visible')) {\n            /*\n             * We're still in diff loading mode, and the parent is hidden. We\n             * can get the width we need from the parent. It should be the same,\n             * or at least close enough for the first stab at column sizes.\n             */\n            $parent = $parent.parent();\n        }\n\n        const fullWidth = $parent.width();\n\n        if (fullWidth === this._prevFullWidth) {\n            return;\n        }\n\n        this._prevFullWidth = fullWidth;\n\n        /* Calculate the desired widths of the diff columns. */\n        let contentWidth = fullWidth - this._colReservedWidths;\n\n        if (this._numColumns === 4) {\n            contentWidth /= 2;\n        }\n\n        /* Calculate the desired widths of the filename columns. */\n        let filenameWidth = fullWidth - this._filenameReservedWidths;\n\n        if (this._numFilenameColumns === 2) {\n            filenameWidth /= 2;\n        }\n\n        this.$el.width(fullWidth);\n\n        /* Update the minimum and maximum widths, if they've changed. */\n        if (filenameWidth !== this._prevFilenameWidth) {\n            this._$filenameRow.children('th').css({\n                'min-width': Math.ceil(filenameWidth * 0.66),\n                'max-width': Math.ceil(filenameWidth)\n            });\n            this._prevFilenameWidth = filenameWidth;\n        }\n\n        if (contentWidth !== this._prevContentWidth) {\n            this._$revisionRow.children('.revision-col').css({\n                'min-width': Math.ceil(contentWidth * 0.66),\n                'max-width': Math.ceil(contentWidth)\n            });\n            this._prevContentWidth = contentWidth;\n        }\n    },\n\n    /**\n     * Handle a window resize.\n     *\n     * This will update the sizes of the diff columns, and the location of the\n     * collapse buttons (if one or more are visible).\n     */\n    updateLayout() {\n        this._updateColumnSizes();\n        this._updateCollapseButtonPos();\n    },\n\n    /**\n     * Handle a file download link being clicked.\n     *\n     * Prevents the event from bubbling up and being caught by\n     * _onFileHeaderClicked.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onDownloadLinkClicked(e) {\n        e.stopPropagation();\n    },\n\n    /**\n     * Handle the file header being clicked.\n     *\n     * This will highlight the file header.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onFileHeaderClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.trigger('fileClicked');\n    },\n\n    /**\n     * Handle a \"Moved to/from\" flag being clicked.\n     *\n     * This will scroll to the location on the other end of the move,\n     * and briefly highlight the line.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onMovedLineClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.trigger('moveFlagClicked', $(e.target).data('line'));\n    },\n\n    /**\n     * Handle a mouse up event.\n     *\n     * This will select any chunk that was clicked, highlight the chunk,\n     * and ensure it's cleanly scrolled into view.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``mouseup`` event that triggered this handler.\n     */\n    _onMouseUp(e) {\n        const node = e.target;\n\n        /*\n         * The user clicked somewhere else. Move the anchor point here\n         * if it's part of the diff.\n         */\n        const $tbody = $(node).closest('tbody');\n\n        if ($tbody.length > 0 &&\n            ($tbody.hasClass('delete') ||\n             $tbody.hasClass('insert') ||\n             $tbody.hasClass('replace'))) {\n            const anchor = $tbody[0].querySelector('a');\n\n            if (anchor) {\n                this.trigger('chunkClicked', anchor.name);\n            }\n        }\n    },\n\n    /**\n     * Handle an expand chunk button being clicked.\n     *\n     * The expand buttons will expand a collapsed chunk, either entirely\n     * or by certain amounts. It will fetch the new chunk contents and\n     * inject it into the diff viewer.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onExpandChunkClicked(e) {\n        e.preventDefault();\n\n        let $target = $(e.target);\n\n        if (!$target.hasClass('diff-expand-btn')) {\n            /* We clicked an image inside the link. Find the parent. */\n            $target = $target.closest('.diff-expand-btn');\n        }\n\n        this._expandOrCollapse($target, true);\n    },\n\n    /**\n     * Handle a collapse chunk button being clicked.\n     *\n     * The fully collapsed representation of that chunk will be fetched\n     * and put into the diff viewer in place of the expanded chunk.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onCollapseChunkClicked(e) {\n        e.preventDefault();\n\n        let $target = $(e.target);\n\n        if (!$target.hasClass('diff-collapse-btn')) {\n            /* We clicked an image inside the link. Find the parent. */\n            $target = $target.closest('.diff-collapse-btn');\n        }\n\n        this._expandOrCollapse($target, false);\n    },\n\n    /**\n     * Handler for when show content is clicked.\n     *\n     * This requeues the corresponding diff to show its deleted content.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onShowDeletedClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        /*\n         * Replace the current contents (\"This file was deleted ... \") with a\n         * spinner. This will be automatically replaced with the file contents\n         * once loaded from the server.\n         */\n        $(e.target).parent()\n            .html('<span class=\"fa fa-spinner fa-pulse\"></span>');\n\n        this.trigger('showDeletedClicked');\n    },\n\n    /**\n     * Handler for the suspicious characters toggle button.\n     *\n     * This will toggle the ``-hide-ducs`` CSS class on the main element, and\n     * toggle the show/hide text on the button that triggered this handler.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The ``click`` event that triggered this handler.\n     */\n    _onToggleUnicodeCharsClicked(e) {\n        const $el = this.$el;\n        const $button = $(e.target);\n        const ducsShown = !$el.hasClass('-hide-ducs');\n\n        if (ducsShown) {\n            $el.addClass('-hide-ducs');\n            $button.text($button.data('show-chars-label'));\n        } else {\n            $el.removeClass('-hide-ducs');\n            $button.text($button.data('hide-chars-label'));\n        }\n    },\n});\n"],"mappings":"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"}