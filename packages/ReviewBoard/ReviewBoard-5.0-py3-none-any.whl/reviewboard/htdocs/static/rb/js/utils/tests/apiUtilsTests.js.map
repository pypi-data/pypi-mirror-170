{"version":3,"file":"apiUtilsTests.js","names":["suite","STATUS_TEXTS","oldEnableQueuing","oldEnableIndicator","beforeEach","RB","ajaxOptions","enableQueuing","enableIndicator","afterEach","setupAjaxCall","options","spyOn","$","and","callFake","request","expect","type","toBe","method","rsp","statusCode","xhr","_isXHR","status","statusText","undefined","responseText","JSON","stringify","success","error","complete","describe","runAPICallTest","done","$buttons","$activityIndicator","css","appendTo","$testsScratch","data","runCommonSuccessErrorChecks","not","toHaveBeenCalled","attr","hasClass","find","text","path","buttons","_$activityIndicator","_activityIndicatorHideImmediately","toBeTrue","expectedStatusText","expectSuccess","toBeUndefined","activityIndicatorHasError","activityIndicatorDisplay","expectActivityIndicatorError","toBeFalse","funcQueue","add","clear","addSuccessHandler","expectAPIErrorSuccess","arguments","length","toEqual","fail","addErrorHandler","httpStatusText","callThrough","apiCall","addAPICallTests","successText","errorText","it","stat","forEach"],"sources":["../../../../../../static/rb/js/utils/tests/apiUtilsTests.es6.js"],"sourcesContent":["/**\n * Unit tests for rb/utils/apiUtils.\n *\n * Version Added:\n *     5.0\n */\nsuite('rb/utils/apiUtils', function() {\n    const STATUS_TEXTS = {\n        200: 'OK',\n        400: 'Bad Request',\n        404: 'Not Found',\n        500: 'Internal Server Error',\n    };\n\n    let oldEnableQueuing;\n    let oldEnableIndicator;\n\n    beforeEach(function() {\n        oldEnableQueuing = RB.ajaxOptions.enableQueuing;\n        oldEnableIndicator = RB.ajaxOptions.enableIndicator;\n\n        RB.ajaxOptions.enableQueuing = true;\n        RB.ajaxOptions.enableIndicator = true;\n    });\n\n    afterEach(function() {\n        RB.ajaxOptions.enableQueuing = oldEnableQueuing;\n        RB.ajaxOptions.enableIndicator = oldEnableIndicator;\n    });\n\n\n    /**\n     * Set up a call to $.ajax.\n     *\n     * This spies on :js:func:`$.ajax`, creating a mock implementation which\n     * will prepare a mock XHR object and call the right handlers for the\n     * right HTTP status codes.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the AJAX call.\n     *\n     * Option Args:\n     *     method (string, optional):\n     *         The HTTP method expected. This defaults to \"POST\".\n     *\n     *     responseText (string, optional):\n     *         An optional string for the response, if not setting ``rsp``.\n     *\n     *     rsp (object, optional):\n     *         An optional JSON payload for the response.\n     *\n     *     statusCode (number, optional):\n     *         The optional HTTP status code for the response. This default to\n     *         200.\n     */\n    function setupAjaxCall(options) {\n        spyOn($, 'ajax').and.callFake(request => {\n            expect(request.type).toBe(options.method || 'POST');\n\n            const rsp = options.rsp;\n            const statusCode = options.statusCode || 200;\n            const xhr = {\n                _isXHR: true,\n                status: statusCode,\n                statusText: STATUS_TEXTS[statusCode],\n            };\n\n            if (rsp !== undefined) {\n                xhr.responseText = JSON.stringify(rsp);\n            } else {\n                xhr.responseText = options.responseText || '';\n            }\n\n            /*\n             * This roughly matches what $.ajax sets. It's good enough for our\n             * purposes.\n             */\n            let statusText;\n\n            if (statusCode === 204 || request.type === 'HEAD') {\n                statusText = 'nocontent';\n            } else if (statusCode === 304) {\n                statusText = 'notmodified';\n            } else if (statusCode >= 200 && statusCode < 300) {\n                statusText = 'success';\n            } else {\n                statusText = 'error';\n            }\n\n            /* Invoke the handlers. */\n            if ((statusCode >= 200 && statusCode < 300) || statusCode === 304) {\n                /* Currently, there isn't always a default success handler. */\n                if (request.success !== undefined) {\n                    request.success(\n                        (rsp !== undefined ? rsp : options.responseText),\n                        statusText,\n                        xhr);\n                }\n            } else {\n                /* Currently, there's always a default error handler. */\n                request.error(xhr, statusText, xhr.statusText);\n            }\n\n            request.complete(xhr, statusText);\n        });\n    }\n\n    describe('apiCall', function() {\n        /**\n         * Run a RB.apiCall test.\n         *\n         * This sets up a call to :js:func:`RB.apiCall` with a mock AJAX\n         * implementation and UI. It handles checking all the common state\n         * in the UI and the callbacks, matching expectations against provided\n         * arguments.\n         *\n         * Args:\n         *     done (function):\n         *         The done handler for the test.\n         *\n         *     options (object):\n         *         Options for the test.\n         *\n         * Option Args:\n         *     addErrorHandler (boolean, optional):\n         *         Whether to register an error handler. The default is\n         *         ``true``.\n         *\n         *     addSuccessHandler (boolean, optional):\n         *         Whether to register a success handler. The default is\n         *         ``true``.\n         *\n         *     expectedStatusText (string):\n         *         The expected status text for callbacks.\n         *\n         *     expectActivityIndicatorError (boolean, optional):\n         *         Whether to expect that the activity indicator will display\n         *         an error. The default is ``false``.\n         *\n         *     expectAPIErrorSuccess (boolean, optional):\n         *         Whether to expect the success handler to be called with API\n         *         error information. The default is ``false``.\n         *\n         *     expectSuccess (boolean, optional):\n         *         Whether to expect the success handler to be called. The\n         *         default is ``false``.\n         *\n         *     method (string, optional):\n         *         The HTTP method expected. This defaults to \"POST\".\n         *\n         *     responseText (string, optional):\n         *         An optional string for the response, if not setting ``rsp``.\n         *\n         *     rsp (object, optional):\n         *         An optional JSON payload for the response.\n         *\n         *     statusCode (number, optional):\n         *         The optional HTTP status code for the response. This\n         *         defaults to 200.\n         */\n        function runAPICallTest(done, options) {\n            const $buttons = $('<button>');\n            const $activityIndicator =\n                $('<div><span class=\"indicator-text\"></span></div>')\n                    .css('display', 'none')\n                    .appendTo($testsScratch);\n\n            /*\n             * Define this early so that we trigger a warning with the\n             * usage in runCommonSuccessErrorChecks().\n             */\n            let data;\n\n            setupAjaxCall(options);\n\n            function runCommonSuccessErrorChecks() {\n                /* Check the order of calls. */\n                expect(data.complete).not.toHaveBeenCalled();\n\n                expect($buttons.attr('disabled')).toBe('disabled');\n                expect($activityIndicator.hasClass('error')).toBe(false);\n                expect($activityIndicator.find('.indicator-text').text()).toBe(\n                    (options.method === 'GET'\n                     ? 'Loading...'\n                     : 'Saving...'));\n            }\n\n            data = {\n                path: 'info/',\n                type: options.method,\n                buttons: $buttons,\n                _$activityIndicator: $activityIndicator,\n                _activityIndicatorHideImmediately: true,\n                complete: function(xhr, statusText) {\n                    expect(xhr._isXHR).toBeTrue();\n                    expect(statusText).toBe(options.expectedStatusText);\n\n                    /* Check the order of calls. */\n                    if (options.expectSuccess) {\n                        if (data.success !== undefined) {\n                            expect(data.success).toHaveBeenCalled();\n                        }\n                    } else {\n                        if (data.error !== undefined) {\n                            expect(data.error).toHaveBeenCalled();\n                        }\n                    }\n\n                    /* Check DOM state from RB.apiCall. */\n                    expect($buttons.attr('disabled')).toBeUndefined();\n\n                    const activityIndicatorHasError =\n                        $activityIndicator.hasClass('error');\n                    const activityIndicatorDisplay =\n                        $activityIndicator.css('display');\n\n                    if (options.expectActivityIndicatorError) {\n                        expect(activityIndicatorHasError).toBeTrue();\n                        expect(activityIndicatorDisplay).toBe('block');\n                    } else {\n                        expect(activityIndicatorHasError).toBeFalse();\n                        expect(activityIndicatorDisplay).toBe('none');\n                    }\n\n                    /*\n                     * Make sure that queue functionality doesn't break by\n                     * incorporating it into the test's done handler.\n                     */\n                    if (options.method === 'GET') {\n                        /* GETs aren't in a queue. */\n                        done();\n                    } else {\n                        $.funcQueue('rbapicall').add(function() {\n                            $.funcQueue('rbapicall').clear();\n\n                            done();\n                        });\n                    }\n                }\n            };\n\n            if (options.addSuccessHandler !== false) {\n                data.success = function(rsp, statusText, xhr) {\n                    if (options.expectSuccess) {\n                        runCommonSuccessErrorChecks();\n\n                        if (options.expectAPIErrorSuccess) {\n                            expect(arguments.length).toBe(2);\n                            expect(arguments[1]).toBe(options.statusCode);\n                        } else {\n                            expect(arguments.length).toBe(3);\n                            expect(arguments[1])\n                                .toBe(options.expectedStatusText);\n                            expect(arguments[2]._isXHR).toBeTrue();\n                        }\n\n                        expect(arguments[0]).toEqual(options.rsp);\n                    } else {\n                        done.fail('API call unexpectedly returned success.');\n                    }\n                };\n            }\n\n            if (options.addErrorHandler !== false) {\n                data.error = function(xhr, statusText, httpStatusText) {\n                    if (options.expectSuccess) {\n                        done.fail('API call unexpectedly returned error.');\n                    } else {\n                        runCommonSuccessErrorChecks();\n\n                        expect(statusText).toBe(options.expectedStatusText);\n                        expect(xhr._isXHR).toBeTrue();\n\n                        /*\n                         * This seems like a tautology, given the setup code,\n                         * but we're making sure it's preserved through\n                         * RB.apiCall's handlers.\n                         */\n                        expect(httpStatusText).toBe(STATUS_TEXTS[xhr.status]);\n                        expect(xhr.statusText).toBe(httpStatusText);\n                    }\n                };\n            }\n\n            spyOn(data, 'complete').and.callThrough();\n\n            if (data.success !== undefined) {\n                spyOn(data, 'success').and.callThrough();\n            }\n\n            if (data.error !== undefined) {\n                spyOn(data, 'error').and.callThrough();\n            }\n\n            RB.apiCall(data);\n        }\n\n        /**\n         * Add a suite of RB.apiCall tests for a given HTTP method.\n         *\n         * Args:\n         *     method (string):\n         *         The HTTP method being tested.\n         *\n         *     successText (string):\n         *         The status text expected on success.\n         *\n         *     errorText (string):\n         *         The status text expected on error.\n         */\n        function addAPICallTests(method, successText, errorText) {\n            describe(`HTTP ${method}`, function() {\n                describe('With success', function() {\n                    it('And success handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                rsp: {\n                                    stat: 'ok',\n                                },\n                                expectSuccess: true,\n                                expectedStatusText: successText,\n                            });\n                    });\n\n                    it('And no success handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                rsp: {\n                                    stat: 'ok',\n                                },\n                                addSuccessHandler: false,\n                                expectSuccess: true,\n                                expectedStatusText: successText,\n                            });\n                    });\n                });\n\n                describe('With HTTP 204', function() {\n                    it('And success handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                statusCode: 204,\n                                expectSuccess: true,\n                                expectedStatusText: 'nocontent',\n                            });\n                    });\n\n                    it('And no success handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                statusCode: 204,\n                                addSuccessHandler: false,\n                                expectSuccess: true,\n                                expectedStatusText: 'nocontent',\n                            });\n                    });\n                });\n\n                describe('With API error', function() {\n                    it('And error handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                rsp: {\n                                    stat: 'fail',\n                                },\n                                statusCode: 404,\n                                expectSuccess: false,\n                                expectedStatusText: errorText,\n                            });\n                    });\n\n                    it('And no error handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                rsp: {\n                                    stat: 'fail',\n                                },\n                                statusCode: 404,\n                                addErrorHandler: false,\n                                expectSuccess: true,\n                                expectAPIErrorSuccess: true,\n                                expectedStatusText: errorText,\n                            });\n                    });\n                });\n\n                describe('With unexpected error', function() {\n                    it('With error handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                responseText: 'oh no it broke',\n                                statusCode: 500,\n                                expectSuccess: false,\n                                expectedStatusText: errorText,\n                            });\n                    });\n\n                    it('Without error handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                responseText: 'oh no it broke',\n                                statusCode: 500,\n                                addErrorHandler: false,\n                                expectSuccess: false,\n                                expectedStatusText: errorText,\n                                expectActivityIndicatorError: true,\n                            });\n                    });\n                });\n            });\n        }\n\n        ['DELETE', 'GET', 'POST', 'PATCH', 'PUT'].forEach(\n            method => addAPICallTests(method, 'success', 'error'));\n\n        addAPICallTests('HEAD', 'nocontent', 'nocontent');\n    });\n});\n"],"mappings":"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"}