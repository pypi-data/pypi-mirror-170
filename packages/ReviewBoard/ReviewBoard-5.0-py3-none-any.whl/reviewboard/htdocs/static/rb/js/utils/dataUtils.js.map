{"version":3,"file":"dataUtils.js","names":["RB","DataUtils","ArrayBufferTypes","int8","size","funcName","uint8","int16","uint16","int32","uint32","float32","float64","readBlobAsArrayBuffer","blob","onLoaded","_readBlobAs","readBlobAsString","readManyBlobsAsArrayBuffers","blobs","_readManyBlobsAs","readManyBlobsAsStrings","buildArrayBuffer","schema","arrayLen","i","length","item","type","values","arrayBuffer","ArrayBuffer","dataView","DataView","pos","littleEndian","bigEndian","typeInfo","func","j","call","buildBlob","parts","schemaItem","_","isArray","push","Blob","readFuncName","reader","FileReader","addEventListener","result","loadFunc","Array","numLoaded","onBlobLoaded","text","apply","forEach"],"sources":["../../../../../static/rb/js/utils/dataUtils.es6.js"],"sourcesContent":["RB.DataUtils = {\n    ArrayBufferTypes: {\n        int8: {\n            size: 1,\n            funcName: 'setInt8',\n        },\n        uint8: {\n            size: 1,\n            funcName: 'setUint8',\n        },\n        int16: {\n            size: 2,\n            funcName: 'setInt16',\n        },\n        uint16: {\n            size: 2,\n            funcName: 'setUint16',\n        },\n        int32: {\n            size: 4,\n            funcName: 'setInt32',\n        },\n        uint32: {\n            size: 4,\n            funcName: 'setUint32',\n        },\n        float32: {\n            size: 4,\n            funcName: 'setFloat32',\n        },\n        float64: {\n            size: 8,\n            funcName: 'setFloat64',\n        },\n    },\n\n    /**\n     * Read a Blob as an ArrayBuffer.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blob (Blob):\n     *         The blob to read as an :js:class:`ArrayBuffer`.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting :js:class:`ArrayBuffer` as an argument.\n     */\n    readBlobAsArrayBuffer(blob, onLoaded) {\n        RB.DataUtils._readBlobAs('readAsArrayBuffer', blob, onLoaded);\n    },\n\n    /**\n     * Read a Blob as a text string.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blob (Blob):\n     *         The blob to read as text.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting string as an argument.\n     */\n    readBlobAsString(blob, onLoaded) {\n        RB.DataUtils._readBlobAs('readAsText', blob, onLoaded);\n    },\n\n    /**\n     * Read several Blobs as individual ArrayBuffers.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blobs (Array):\n     *         The array of :js:class:`Blob`s instances to read as\n     *         :js:class:`ArrayBuffer`s\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         one parameter per loaded :js:class:`ArrayBuffer`, in the order\n     *         provided for the blobs.\n     */\n    readManyBlobsAsArrayBuffers(blobs, onLoaded) {\n        RB.DataUtils._readManyBlobsAs('readBlobAsArrayBuffer', blobs,\n                                      onLoaded);\n    },\n\n    /**\n     * Read several Blobs as individual text strings.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blobs (Array):\n     *         The array of :js:class:`Blob`s to read as text.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         one parameter per loaded string, in the order provided for the\n     *         blobs.\n     */\n    readManyBlobsAsStrings(blobs, onLoaded) {\n        RB.DataUtils._readManyBlobsAs('readBlobAsString', blobs, onLoaded);\n    },\n\n    /**\n     * Build an ArrayBuffer based on a schema.\n     *\n     * This takes a schema that specifies the data that should go into the\n     * :js:class:`ArrayBuffer`. Each item in the schema is an object specifying\n     * the type and the list of values of that type to add.\n     *\n     * Args:\n     *     schema (Array):\n     *         The schema containing the data to load. Each item in the array\n     *         is an object that looks like::\n     *\n     *             {\n     *                 type: 'uint8', // Or another type\n     *                 values: [1, 2, 3, ...],\n     *             }\n     *\n     *         See :js:data:`RB.DataUtils.ArrayBufferTypes`.\n     *\n     * Returns:\n     *     ArrayBuffer:\n     *     The resulting buffer built from the schema.\n     */\n    buildArrayBuffer(schema) {\n        const ArrayBufferTypes = RB.DataUtils.ArrayBufferTypes;\n        let arrayLen = 0;\n\n        for (let i = 0; i < schema.length; i++) {\n            const item = schema[i];\n\n            arrayLen += ArrayBufferTypes[item.type].size * item.values.length;\n        }\n\n        const arrayBuffer = new ArrayBuffer(arrayLen);\n        const dataView = new DataView(arrayBuffer);\n        let pos = 0;\n\n        for (let i = 0; i < schema.length; i++) {\n            const item = schema[i];\n            const values = item.values;\n            const littleEndian = !item.bigEndian;\n            const typeInfo = ArrayBufferTypes[item.type];\n            const func = dataView[typeInfo.funcName];\n            const size = typeInfo.size;\n\n            for (let j = 0; j < values.length; j++) {\n                func.call(dataView, pos, values[j], littleEndian);\n                pos += size;\n            }\n        }\n\n        return arrayBuffer;\n    },\n\n    /**\n     * Build a Blob based on a schema.\n     *\n     * This takes a schema that specifies the data that should go into the\n     * :js:class:`Blob`. Each item in the schema is either an array of objects\n     * specifying the type and the list of values of that type to add (see\n     * :js:func:`RB.DataUtils.buildArrayBuffer` for details), a\n     * :js:class:`Blob`, or string to add.\n     *\n     * Args:\n     *     schema (Array):\n     *         The schema containing the data to load. Each item in the array\n     *         must be a :js:class:`Blob`, string, or an array of objects\n     *         supported by :js:func:`RB.DataUtils.buildArrayBuffer`.\n     *\n     * Returns:\n     *     Blob:\n     *     The resulting blob built from the schema.\n     */\n    buildBlob(schema) {\n        const parts = [];\n\n        for (let i = 0; i < schema.length; i++) {\n            const schemaItem = schema[i];\n\n            if (_.isArray(schemaItem)) {\n                parts.push(RB.DataUtils.buildArrayBuffer(schemaItem));\n            } else {\n                parts.push(schemaItem);\n            }\n        }\n\n        return new Blob(parts);\n    },\n\n    /**\n     * Read a Blob using a specific FileReader function.\n     *\n     * This is a convenience function that wraps a :js:class:`FileReader`\n     * function designed to load a blob as a certain type.\n     *\n     * Args:\n     *     readFuncName (string):\n     *         The function name on :js:class:`FileReader` to call.\n     *\n     *     blob (Blob):\n     *         The blob to load.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting value as an argument.\n     */\n    _readBlobAs(readFuncName, blob, onLoaded) {\n        const reader = new FileReader();\n\n        reader.addEventListener('loadend', () => onLoaded(reader.result));\n        reader[readFuncName](blob);\n    },\n\n    /**\n     * Read several Blobs using a specific FileReader function.\n     *\n     * This is a convenience function that wraps a :js:class:`FileReader`\n     * function, chaining multiple results in order to asynchronously load\n     * each of the blobs as a certain type.\n     *\n     * Args:\n     *     readFuncName (string):\n     *         The function name on :js:class:`FileReader` to call.\n     *\n     *     blobs (Array):\n     *         The array of Blobs to load.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         an argument per value loaded.\n     */\n    _readManyBlobsAs(readFuncName, blobs, onLoaded) {\n        const loadFunc = RB.DataUtils[readFuncName];\n        let result = new Array(blobs.length);\n        let numLoaded = 0;\n\n        function onBlobLoaded(i, text) {\n            result[i] = text;\n            numLoaded++;\n\n            if (numLoaded === blobs.length) {\n                onLoaded.apply(null, result);\n            }\n        }\n\n        blobs.forEach((blob, i) => {\n            loadFunc(blob, text => onBlobLoaded(i, text));\n        });\n    },\n};\n"],"mappings":"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"}