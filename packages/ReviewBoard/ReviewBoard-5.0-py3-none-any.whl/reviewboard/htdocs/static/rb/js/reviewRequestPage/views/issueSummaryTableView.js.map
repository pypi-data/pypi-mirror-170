{"version":3,"file":"issueSummaryTableView.js","names":["RB","ReviewRequestPage","IssueSummaryTableView","Backbone","View","extend","events","stateToSelectorMap","open","dropped","resolved","verifying","all","statusIconsMap","COLUMN_DESCRIPTION","COLUMN_REVIEWER","COLUMN_LAST_UPDATED","_noIssuesTemplate","_","template","initialize","statusFilterState","reviewerFilterState","reviewerToSelectorMap","commentIDToRowMap","_lastWindowWidth","_$window","$","window","_$currentTab","bindAll","render","$issueSummaryTable","$el","children","_$header","_$tabs","_$filters","_$reviewerFilter","_$table","_$thead","_$tbody","_$reviewerHeader","find","_$noIssues","hasExistingState","console","assert","length","data","removeClass","addClass","_buildMaps","val","_resetFilters","_applyFilters","_checkIssues","stopListening","model","listenTo","_onIssueStatusChanged","off","_onWindowResize","on","user_infobox","timesince","Djblets","enableRetinaImages","_getIssueRows","filter","sel","not","_updateReviewersPos","is","css","left","offset","getExtents","remove","show","reviewerFilter","statusFilter","text","interpolate","hide","appendTo","_sortByCol","colIndex","ascending","html","sort","issueA","issueB","$issueA","$issueB","$columnA","$columnB","value1","value2","attr","strip","toLowerCase","issueID1","issueID2","result","each","issueEl","$issue","reviewer","has","append","comment","oldStatus","timestamp","$entry","id","newStatus","get","scrollManager","markForUpdate","$oldCounter","$newCounter","parseInt","Date","toISOString","markUpdated","_onHeaderClicked","evt","stopPropagation","target","parent","index","shiftKey","_onIssueClicked","tagName","currentTarget","trigger","commentType","commentID","commentURL","_onTabChanged","$tab","_onReviewerChanged","winWidth","width"],"sources":["../../../../../../static/rb/js/reviewRequestPage/views/issueSummaryTableView.es6.js"],"sourcesContent":["/**\n * View that manages a display of issues filed on a review request.\n *\n * This displays all the issues filed against a review request, and allows\n * sorting by state and reviewer. As issues are updated on reviews, the\n * table is updated to reflect the new states.\n */\nRB.ReviewRequestPage.IssueSummaryTableView = Backbone.View.extend({\n    events: {\n        'change .rb-c-issue-summary-table__reviewer-filter':\n            '_onReviewerChanged',\n        'click thead th': '_onHeaderClicked',\n        'click .rb-c-tabs__tab': '_onTabChanged',\n        'click tbody tr[data-issue-id]': '_onIssueClicked',\n    },\n\n    /** Maps a status filter state to its corresponding selector. */\n    stateToSelectorMap: {\n        open: '.-is-open',\n        dropped: '.-is-dropped',\n        resolved: '.-is-resolved',\n        verifying: '.-is-verifying-resolved, .-is-verifying-dropped',\n        all: '',\n    },\n\n    /** Maps an issue status type to its corresponding icon. */\n    statusIconsMap: {\n        open: 'rb-icon-issue-open',\n        dropped: 'rb-icon-issue-dropped',\n        resolved: 'rb-icon-issue-resolved',\n        verifying: 'rb-icon-issue-verifying',\n    },\n\n    COLUMN_DESCRIPTION: 1,\n    COLUMN_REVIEWER: 2,\n    COLUMN_LAST_UPDATED: 3,\n\n    _noIssuesTemplate: _.template(dedent`\n        <tr class=\"rb-c-issue-summary-table__no-issues\">\n         <td colspan=\"5\"><em><%- text %></em></td>\n        </tr>\n    `),\n\n    /**\n     * Initialize the issue summary table.\n     */\n    initialize() {\n        this.statusFilterState = null;\n        this.reviewerFilterState = null;\n\n        // Maps a reviewer name to issues issued by the reviewer.\n        this.reviewerToSelectorMap = null;\n\n        // Maps comment IDs to rows in the table.\n        this.commentIDToRowMap = {};\n\n        this._lastWindowWidth = null;\n        this._$window = $(window);\n        this._$currentTab = null;\n\n        _.bindAll(this, '_onWindowResize');\n    },\n\n    /**\n     * Render the issue summary table.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.IssueSummaryTableView:\n     *     This instance, for chaining.\n     */\n    render() {\n        const $issueSummaryTable =\n            this.$el.children('.rb-c-issue-summary-table');\n\n        this._$header = $issueSummaryTable.children(\n            '.rb-c-review-request-field-tabular__header');\n        this._$tabs = this._$header.children('.rb-c-tabs');\n        this._$filters = this._$header.children(\n            '.rb-c-review-request-field-tabular__filters');\n        this._$reviewerFilter = this._$filters.children(\n            '.rb-c-issue-summary-table__reviewer-filter');\n        this._$table = $issueSummaryTable.children(\n            '.rb-c-review-request-field-tabular__data');\n        this._$thead = this._$table.children('thead');\n        this._$tbody = this._$table.children('tbody');\n        this._$reviewerHeader = this._$thead.find(\n            `tr :nth-child(${this.COLUMN_REVIEWER})`);\n        this._$noIssues = null;\n\n        let hasExistingState = false;\n\n        if (this.statusFilterState === null) {\n            this._$currentTab = this.$('.rb-c-tabs__tab.-is-active');\n            console.assert(this._$currentTab.length === 1);\n\n            this.statusFilterState = this._$currentTab.data('issue-state');\n        } else {\n            this.$('.rb-c-tabs__tab.-is-active').removeClass('-is-active');\n            this._$currentTab =\n                this.$('.rb-c-tabs__tab' +\n                       `[data-issue-state=${this.statusFilterState}]`)\n                    .addClass('-is-active');\n            hasExistingState = true;\n        }\n\n        this._buildMaps();\n\n        if (this.reviewerFilterState === null) {\n            this.reviewerFilterState = this._$reviewerFilter.val();\n        } else {\n            this._$reviewerFilter.val(this.reviewerFilterState);\n            hasExistingState = true;\n        }\n\n        if (hasExistingState) {\n            this._resetFilters();\n            this._applyFilters();\n        } else {\n            this._checkIssues();\n        }\n\n        this.stopListening(this.model, 'issueStatusUpdated');\n        this.listenTo(this.model, 'issueStatusUpdated',\n                      this._onIssueStatusChanged);\n\n        this._$window.off('resize', this._onWindowResize);\n        this._$window.on('resize', this._onWindowResize);\n        this._onWindowResize();\n\n        this.$('.user').user_infobox();\n        this.$('time.timesince').timesince();\n        Djblets.enableRetinaImages(this.$el);\n\n        return this;\n    },\n\n    /**\n     * Reset the filters on the list.\n     *\n     * This will unhide all rows, preparing the list for a new filter.\n     */\n    _resetFilters() {\n        this._getIssueRows().filter('.-is-hidden').removeClass('-is-hidden');\n    },\n\n    /**\n     * Apply the filters on the list.\n     *\n     * This will show or hide rows, based on the current state and reviewer\n     * filters.\n     */\n    _applyFilters() {\n        const sel = this.stateToSelectorMap[this.statusFilterState] +\n                    this.reviewerToSelectorMap[this.reviewerFilterState];\n\n        if (sel) {\n            this._getIssueRows()\n                .not(sel)\n                .addClass('-is-hidden');\n        }\n\n        this._checkIssues();\n        this._updateReviewersPos();\n    },\n\n    /**\n     * Update the position of the reviewers filter.\n     *\n     * The filter will be aligned with the header column in the table.\n     */\n    _updateReviewersPos() {\n        if (this._$reviewerHeader.is(':visible')) {\n            this._$filters.css({\n                left: this._$reviewerHeader.offset().left -\n                      this._$table.offset().left +\n                      this._$reviewerHeader.getExtents('p', 'l'),\n            });\n        } else {\n            this._$filters.css('left', '');\n        }\n    },\n\n    /**\n     * Update the UI to reflect whether the issue list is empty.\n     *\n     * If the issue list is empty, this will add a row saying there are no\n     * issues, using wording that reflects the current filter state.\n     */\n    _checkIssues() {\n        if (this._$noIssues !== null) {\n            this._$noIssues.remove();\n            this._$noIssues = null;\n        }\n\n        this._$thead.show();\n\n        if (this._getIssueRows().not('.-is-hidden').length === 0) {\n            const reviewerFilter = this.reviewerFilterState;\n            const statusFilter = this.statusFilterState;\n            let text;\n\n            if (reviewerFilter !== 'all') {\n                if (statusFilter === 'open') {\n                    text = interpolate(\n                        gettext('There are no open issues from %s'),\n                        [reviewerFilter]);\n                } else if (statusFilter === 'verifying') {\n                    text = interpolate(\n                        gettext('There are no issues waiting for verification from %s'),\n                        [reviewerFilter]);\n                } else if (statusFilter === 'dropped') {\n                    text = interpolate(\n                        gettext('There are no dropped issues from %s'),\n                        [reviewerFilter]);\n                } else if (statusFilter === 'resolved') {\n                    text = interpolate(\n                        gettext('There are no resolved issues from %s'),\n                        [reviewerFilter]);\n                }\n            } else {\n                if (statusFilter === 'open') {\n                    text = gettext('There are no open issues');\n                } else if (statusFilter === 'verifying') {\n                    text = gettext('There are no issues waiting for verification');\n                } else if (statusFilter === 'dropped') {\n                    text = gettext('There are no dropped issues');\n                } else if (statusFilter === 'resolved') {\n                    text = gettext('There are no resolved issues');\n                }\n            }\n\n            this._$thead.hide();\n\n            this._$noIssues =\n                $(this._noIssuesTemplate({\n                    text: text,\n                }))\n                .appendTo(this._$tbody);\n        }\n    },\n\n    /**\n     * Return the table rows containing issues.\n     *\n     * Returns:\n     *     jQuery:\n     *     A selector for the rows containing issues.\n     */\n    _getIssueRows() {\n        return this._$tbody\n            .children()\n            .not('.rb-c-issue-summary-table__no-issues');\n    },\n\n    /**\n     * Sort the issues by the selected column in ascending order.\n     *\n     * The Last Updated column will be sorted based on its timestamp. All\n     * other columns will be sorted based on their normalized text contents.\n     *\n     * Args:\n     *     colIndex (number):\n     *         The 0-based index of the column clicked.\n     *\n     *     ascending (boolean):\n     *         Whether to sort by ascending order.\n     */\n    _sortByCol(colIndex, ascending) {\n        this._$tbody.html(this._getIssueRows().sort((issueA, issueB) => {\n            const $issueA = $(issueA);\n            const $issueB = $(issueB);\n            const $columnA = $issueA.children(`td:nth-child(${colIndex})`);\n            const $columnB = $issueB.children(`td:nth-child(${colIndex})`);\n            let value1;\n            let value2;\n\n            if (colIndex === this.COLUMN_LAST_UPDATED) {\n                /*\n                 * Note that we're reversing the values here. We want newer\n                 * timestamps (which is \"greater\", comparison-wise).\n                 */\n                value1 = $columnB.children('time').attr('datetime');\n                value2 = $columnA.children('time').attr('datetime');\n            } else {\n                value1 = $columnA.text().strip().toLowerCase();\n                value2 = $columnB.text().strip().toLowerCase();\n            }\n\n            /*\n             * If the two values are the same, we'll want to order by\n             * issue ID instead, helping to keep ordering consistent within\n             * an author or published timestamp.\n             *\n             * They should always be in ascending order, relative to the\n             * column being sorted.\n             */\n            if (value1 === value2) {\n                const issueID1 = $issueA.data('issue-id');\n                const issueID2 = $issueB.data('issue-id');\n\n                if (ascending) {\n                    value1 = issueID1;\n                    value2 = issueID2;\n                } else {\n                    value1 = issueID2;\n                    value2 = issueID1;\n                }\n            }\n\n            /*\n             * Compute an initial value intended for ascending order. Then\n             * we'll negate it if sorting in descending order.\n             */\n            let result;\n\n            if (value1 < value2) {\n                result = -1;\n            } else if (value1 > value2) {\n                result = 1;\n            } else {\n                result = 0;\n            }\n\n            if (!ascending) {\n                result = -result;\n            }\n\n            return result;\n        }));\n    },\n\n    /**\n     * Build maps for looking up issue rows based on state.\n     *\n     * This will build a map (and filter entries) for reviewers, and build\n     * a map of comment IDs to rows.\n     */\n    _buildMaps() {\n        this._$reviewerFilter.children().not('[value=\"all\"]').remove();\n\n        this.reviewerToSelectorMap = {\n            all: '',\n        };\n\n        _.each(this._getIssueRows(), issueEl => {\n            const $issue = $(issueEl);\n\n            this.commentIDToRowMap[$issue.data('issue-id')] = $issue;\n\n            const reviewer = $issue.data('reviewer');\n\n            if (!_.has(this.reviewerToSelectorMap, reviewer)) {\n                this.reviewerToSelectorMap[reviewer] =\n                    `[data-reviewer=\"${reviewer}\"]`;\n                this._$reviewerFilter.append(\n                    $('<option>').text(reviewer).val(reviewer));\n            }\n        });\n    },\n\n    /**\n     * Handler for when the issue status of a comment changes.\n     *\n     * Updates the display of the table to reflect the state of that issue.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment whose issue has changed.\n     *\n     *     oldStatus (string):\n     *         The old status.\n     *\n     *     timestamp (Date):\n     *         The new timestamp for the comment.\n     */\n    _onIssueStatusChanged(comment, oldStatus, timestamp) {\n        const $entry = this.commentIDToRowMap[comment.id];\n        const newStatus = comment.get('issueStatus');\n\n        RB.scrollManager.markForUpdate(this.$el);\n\n        /* Update the icon for this entry to reflect the new status. */\n        $entry\n            .removeClass(`-is-${oldStatus}`)\n            .addClass(`-is-${newStatus}`)\n            .find('.rb-icon')\n                .removeClass(this.statusIconsMap[oldStatus])\n                .addClass(this.statusIconsMap[newStatus]);\n\n        /* Show or hide the entry according to the current filter state. */\n        if (this.statusFilterState !== newStatus &&\n            this.statusFilterState !== 'all') {\n            $entry.addClass('-is-hidden');\n        } else {\n            $entry.removeClass('-is-hidden');\n        }\n\n        /* Update the displayed counters for this issue type. */\n        const $oldCounter =\n            this._$tabs\n            .children(`[data-issue-state=${oldStatus}]`)\n            .find('.rb-c-issue-summary-table__counter');\n        const $newCounter =\n            this._$tabs\n            .children(`[data-issue-state=${newStatus}]`)\n            .find('.rb-c-issue-summary-table__counter');\n\n        $oldCounter.text(parseInt($oldCounter.text(), 10) - 1);\n        $newCounter.text(parseInt($newCounter.text(), 10) + 1);\n\n        /* Update the timestamp for this issue's entry. */\n        $entry.find('time')\n            .attr('datetime', new Date(timestamp).toISOString())\n            .text(timestamp)\n            .timesince();\n\n        /*\n         * If we're no longer showing any issues for this filter, update\n         * the table accordingly.\n         */\n        this._checkIssues();\n\n        /*\n         * The updates may have impacted the reviewers filter, so update its\n         * position.\n         */\n        this._updateReviewersPos();\n\n        /*\n         * Update the scroll position to counteract the addition/deletion\n         * of the entry in the issue summary table, so the page doesn't\n         * appear to jump.\n         */\n        RB.scrollManager.markUpdated(this.$el);\n    },\n\n    /**\n     * Handler for when a header on the table is clicked.\n     *\n     * This will sort the table by the header.\n     *\n     * Args:\n     *     evt (Event):\n     *         The click event.\n     */\n    _onHeaderClicked(evt) {\n        evt.stopPropagation();\n\n        if (this._getIssueRows().not('.-is-hidden').length !== 0) {\n            this._sortByCol(\n                $(evt.target).parent().children().index(evt.target) + 1,\n                !evt.shiftKey);\n        }\n    },\n\n    /**\n     * Handler for when an issue is clicked.\n     *\n     * This will notify any listeners to the ``issueClicked`` event that the\n     * issue has been clicked, providing the comment type and the issue ID.\n     *\n     * It will then navigate to the URL for that particular comment.\n     *\n     * Args:\n     *     evt (Event):\n     *         The click event.\n     */\n    _onIssueClicked(evt) {\n        if (evt.target.tagName === 'A') {\n            /* Allow the link to go through. */\n            return;\n        }\n\n        evt.stopPropagation();\n\n        /*\n         * Extract the comment's attributes from the issue element and trigger\n         * the issueClicked event so the page can navigate the user to the\n         * relevant issue comment.\n         */\n        const $el = $(evt.currentTarget);\n\n        this.trigger('issueClicked', {\n            commentType: $el.data('comment-type'),\n            commentID: $el.data('issue-id'),\n            commentURL: $el.data('comment-href'),\n        });\n    },\n\n    /**\n     * Handler for when the tab has changed.\n     *\n     * This will switch the view to show the issues that match the tab's\n     * issue state and the current reviewer filter.\n     *\n     * Args:\n     *     evt (Event):\n     *         The click event.\n     */\n    _onTabChanged(evt) {\n        const $tab = $(evt.currentTarget);\n\n        this._$currentTab.removeClass('-is-active');\n\n        this._resetFilters();\n        this.statusFilterState = $tab.data('issue-state');\n        this._applyFilters();\n\n        $tab.addClass('-is-active');\n        this._$currentTab = $tab;\n    },\n\n    /**\n     * Handler for when the reviewer filter changes.\n     *\n     * This will switch the view to show issues that match the reviewer\n     * and the current issue filter state.\n     */\n    _onReviewerChanged() {\n        this._resetFilters();\n        this.reviewerFilterState = this._$reviewerFilter.val();\n        this._applyFilters();\n    },\n\n    /**\n     * Handler for when the window resizes.\n     *\n     * Updates the calculated position of the reviewers filter.\n     */\n    _onWindowResize() {\n        const winWidth = this._$window.width();\n\n        if (winWidth !== this._lastWindowWidth) {\n            this._updateReviewersPos();\n        }\n\n        this._lastWindowWidth = winWidth;\n    }\n});\n"],"mappings":"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"}