{"version":3,"file":"screenshotThumbnailView.js","names":["RB","ScreenshotThumbnail","Backbone","View","extend","events","render","listenTo","model","$el","fadeOut","remove","$caption","find","inlineEditor","editIconClass","showButtons","on","trigger","e","value","ready","set","save","_onDeleteClicked","preventDefault","stopPropagation","destroy"],"sources":["../../../../../static/rb/js/views/screenshotThumbnailView.es6.js"],"sourcesContent":["/**\n * Displays a thumbnail for a screenshot.\n *\n * Screenshot thumbnails allow the caption to be edited and the screenshot\n * to be deleted.\n *\n * This expects to take an existing element for the thumbnail contents, and\n * will attach handlers for interaction.\n *\n * The following signals are provided, on top of the standard Backbone.View\n * signals:\n *\n *     * beginEdit\n *       - Editing of the screenshot (caption) has begun.\n *\n *     * endEdit\n *       - Editing of the screenshot (caption) has finished.\n */\nRB.ScreenshotThumbnail = Backbone.View.extend({\n    events: {\n        'click a.delete': '_onDeleteClicked',\n    },\n\n    /**\n     * Render the thumbnail.\n     *\n     * This will listen for events on the screenshot and for events on the\n     * thumbnail itself (to allow for caption editing).\n     *\n     * Returns:\n     *     RB.ScreenshotThumbnail:\n     *     This object, for chaining.\n     */\n    render() {\n        this.listenTo(this.model, 'destroy', () => {\n            this.$el.fadeOut(() => this.remove());\n        });\n\n        this.$caption = this.$el.find('a.edit')\n            .inlineEditor({\n                editIconClass: 'rb-icon rb-icon-edit',\n                showButtons: false,\n            })\n            .on({\n                'beginEdit': () => this.trigger('beginEdit'),\n                'cancel': () => this.trigger('endEdit'),\n                'complete': async (e, value) => {\n                    /*\n                     * We want to set the caption after ready() finishes,\n                     * it case it loads state and overwrites.\n                     */\n                    await this.model.ready();\n                    this.model.set('caption', value);\n                    this.trigger('endEdit');\n                    await this.model.save();\n                }\n            });\n\n        return this;\n    },\n\n    /**\n     * Delete the screenshot.\n     *\n     * Once the screenshot has been deleted, the view will be removed.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the delete.\n     */\n    _onDeleteClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.model.destroy();\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,mBAAH,GAAyBC,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqB;EAC1CC,MAAM,EAAE;IACJ,kBAAkB;EADd,CADkC;;EAK1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAM,GAAG;IACL,KAAKC,QAAL,CAAc,KAAKC,KAAnB,EAA0B,SAA1B,EAAqC,MAAM;MACvC,KAAKC,GAAL,CAASC,OAAT,CAAiB,MAAM,KAAKC,MAAL,EAAvB;IACH,CAFD;IAIA,KAAKC,QAAL,GAAgB,KAAKH,GAAL,CAASI,IAAT,CAAc,QAAd,EACXC,YADW,CACE;MACVC,aAAa,EAAE,sBADL;MAEVC,WAAW,EAAE;IAFH,CADF,EAKXC,EALW,CAKR;MACA,aAAa,MAAM,KAAKC,OAAL,CAAa,WAAb,CADnB;MAEA,UAAU,MAAM,KAAKA,OAAL,CAAa,SAAb,CAFhB;MAGA,YAAY,OAAOC,CAAP,EAAUC,KAAV,KAAoB;QAC5B;AACpB;AACA;AACA;QACoB,MAAM,KAAKZ,KAAL,CAAWa,KAAX,EAAN;QACA,KAAKb,KAAL,CAAWc,GAAX,CAAe,SAAf,EAA0BF,KAA1B;QACA,KAAKF,OAAL,CAAa,SAAb;QACA,MAAM,KAAKV,KAAL,CAAWe,IAAX,EAAN;MACH;IAZD,CALQ,CAAhB;IAoBA,OAAO,IAAP;EACH,CAzCyC;;EA2C1C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,gBAAgB,CAACL,CAAD,EAAI;IAChBA,CAAC,CAACM,cAAF;IACAN,CAAC,CAACO,eAAF;IAEA,KAAKlB,KAAL,CAAWmB,OAAX;EACH;;AAzDyC,CAArB,CAAzB"}