{"version":3,"file":"datagridPageView.js","names":["RB","DatagridPageView","PageView","extend","RELOAD_INTERVAL_MS","actionsViewType","events","initialize","options","prototype","call","periodicReload","_reloadTimer","_datagrid","_$wrapper","_$datagridBody","_$datagridBodyContainer","_menuShown","renderPage","InfoboxManagerView","getInstance","setPositioning","ReviewRequestInfoboxView","side","LDistance","lDistance","yOffset","_setupActionsDrawer","listenTo","model","_reload","_setupDatagrid","_startReloadTimer","onResize","resizeToFit","drawer","DrawerView","setDrawer","_actionsView","datagridView","render","$el","appendTo","$content","count","showMenu","_showActions","_stopReloadTimer","_hideActions","$","_$datagrid","find","data","_$main","timesince","user_infobox","bug_infobox","review_request_infobox","clearSelection","_","each","checkbox","select","UserSession","instance","get","_starManager","StarManagerView","StarManager","el","datagridMode","on","bind","_reselectBatchCheckboxes","checkboxMap","idx","checkboxEl","checked","dataset","objectId","selection","id","show","hide","setInterval","window","clearInterval","$editCols","width","getExtents","html","load","location","datagrid","_onRowSelected","e","$checkbox","target","objectID","prop","unselect"],"sources":["../../../../../../static/rb/js/pages/views/datagridPageView.es6.js"],"sourcesContent":["/**\n * Manages the UI for the page containing a main datagrid.\n *\n * This renders the datagrid, handles events, and allows for multi-row\n * actions.\n */\nRB.DatagridPageView = RB.PageView.extend({\n    RELOAD_INTERVAL_MS: 5 * 60 * 1000,\n\n    /* The View class to use for an actions menu, if any. */\n    actionsViewType: null,\n\n    events: {\n        'change tbody input[data-checkbox-name=select]': '_onRowSelected',\n        'reloaded .datagrid-wrapper': '_setupDatagrid',\n    },\n\n    /**\n     * Initialize the datagrid page.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     periodicReload (boolean):\n     *         Whether to periodically reload the contents of the datagrid.\n     */\n    initialize(options={}) {\n        RB.PageView.prototype.initialize.call(this, options);\n\n        this.periodicReload = !!options.periodicReload;\n\n        this._reloadTimer = null;\n        this._datagrid = null;\n        this._$wrapper = null;\n        this._$datagridBody = null;\n        this._$datagridBodyContainer = null;\n        this._menuShown = false;\n    },\n\n    /**\n     * Render the datagrid page view, and begins listening for events.\n     */\n    renderPage() {\n        RB.InfoboxManagerView.getInstance().setPositioning(\n            RB.ReviewRequestInfoboxView,\n            {\n                /*\n                 * The order on the side matters. If the Summary column is\n                 * on the left-hand side of the datagrid, and \"l\" is first,\n                 * it can end up taking priority, even if \"L\" was a better\n                 * fit (since, if the infobox would need to be pushed a bit\n                 * to fit on screen, it will prefer \"l\"). If the column is on\n                 * the right-hand side of the dashboard, it will prefer \"l\",\n                 * given the room available (taking into account the sidebar).\n                 *\n                 * So \"L\" is a better priority for the common use, and \"l\"\n                 * works well as a fallback.\n                 */\n                side: 'Ll',\n                LDistance: 300,\n                lDistance: 20,\n                yOffset: -20,\n            });\n\n        if (this.actionsViewType) {\n            this._setupActionsDrawer();\n        }\n\n        this.listenTo(this.model, 'refresh', () => this._reload(false));\n\n        this._setupDatagrid();\n\n        if (this.periodicReload) {\n            this._startReloadTimer();\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle page resizes.\n     *\n     * This will update the datagrid to fit on the page after a resize.\n     */\n    onResize() {\n        if (this._datagrid !== null) {\n            this._datagrid.resizeToFit();\n        }\n    },\n\n    /**\n     * Set up the actions pane view.\n     */\n    _setupActionsDrawer() {\n        const drawer = new RB.DrawerView();\n        this.setDrawer(drawer);\n\n        this._actionsView = new this.actionsViewType({\n            model: this.model,\n            datagridView: this,\n        });\n        this._actionsView.render().$el.appendTo(drawer.$content);\n\n        this.listenTo(this.model, 'change:count', (model, count) => {\n            const showMenu = (count > 0);\n\n            if (showMenu === this._menuShown) {\n                return;\n            }\n\n            if (showMenu) {\n                this._showActions();\n\n                /*\n                 * Don't reload the datagrid while the user is\n                 * preparing any actions.\n                 */\n                this._stopReloadTimer();\n            } else {\n                this._hideActions();\n\n                if (this.periodicReload) {\n                    this._startReloadTimer();\n                }\n            }\n\n            this._menuShown = showMenu;\n        });\n    },\n\n    /**\n     * Set up parts of the datagrid.\n     *\n     * This will reference elements inside the datagrid and set up UI.\n     * This is called when first rendering the datagrid, and any time\n     * the datagrid is reloaded from the server.\n     */\n    _setupDatagrid() {\n        this._$wrapper = this.$('#content_container');\n        this._$datagrid = this._$wrapper.find('.datagrid-wrapper');\n        this._datagrid = this._$datagrid.data('datagrid');\n        this._$main = this._$wrapper.find('.datagrid-main');\n\n        this.$('time.timesince').timesince();\n        this.$('.user').user_infobox();\n        this.$('.bugs').find('a').bug_infobox();\n        this.$('.review-request-link').review_request_infobox();\n\n        this.model.clearSelection();\n\n        _.each(this.$('input[data-checkbox-name=select]:checked'),\n               checkbox => this.model.select($(checkbox).data('object-id')));\n\n        if (RB.UserSession.instance.get('authenticated')) {\n            this._starManager = new RB.StarManagerView({\n                model: new RB.StarManager(),\n                el: this._$main,\n                datagridMode: true,\n            });\n        }\n\n        this._$datagrid\n            .on('reloaded', this._setupDatagrid.bind(this))\n            .on('datagridDisplayModeChanged',\n                this._reselectBatchCheckboxes.bind(this));\n        this._datagrid.resizeToFit();\n    },\n\n    /**\n     * Re-select any checkboxes that are part of the current selection.\n     *\n     * When the datagrid transitions between mobile and desktop modes,\n     * we use two different versions of the table, meaning two sets of\n     * checkboxes. This function updates the checkbox selection based on the\n     * currently selected items.\n     */\n    _reselectBatchCheckboxes() {\n        const checkboxMap = {};\n\n        this.$('input[data-checkbox-name=select]').each((idx, checkboxEl) => {\n            if (checkboxEl.checked) {\n                checkboxEl.checked = false;\n            }\n\n            checkboxMap[checkboxEl.dataset.objectId] = checkboxEl;\n        });\n\n        this.model.selection.each(selection => {\n            checkboxMap[selection.id].checked = true;\n        });\n    },\n\n    /**\n     * Show the actions drawer.\n     */\n    _showActions() {\n        this.drawer.show();\n    },\n\n    /**\n     * Hide the actions drawer.\n     */\n    _hideActions() {\n        this.drawer.hide();\n    },\n\n    /**\n     * Start the reload timer, if it's not already running.\n     */\n    _startReloadTimer() {\n        if (!this._reloadTimer) {\n            this._reloadTimer = setInterval(this._reload.bind(this),\n                                            this.RELOAD_INTERVAL_MS);\n        }\n    },\n\n    /**\n     * Stop the reload timer, if it's running.\n     */\n    _stopReloadTimer() {\n        if (this._reloadTimer) {\n            window.clearInterval(this._reloadTimer);\n            this._reloadTimer = null;\n        }\n    },\n\n    /**\n     * Reload the datagrid contents.\n     *\n     * This may be called periodically to reload the contents of the\n     * datagrid, if specified by the subclass.\n     *\n     * Args:\n     *     periodicReload (boolean):\n     *         Whether the datagrid should reload periodically.\n     */\n    _reload(periodicReload) {\n        const $editCols = this.$('.edit-columns');\n\n        if (periodicReload === false) {\n            this._stopReloadTimer();\n        }\n\n        this.model.clearSelection();\n\n        $editCols\n            .width($editCols.width() - $editCols.getExtents('b', 'lr'))\n            .html('<span class=\"fa fa-spinner fa-pulse\"></span>');\n\n        this._$wrapper.load(window.location + ' #content_container', () => {\n            this.$('.datagrid-wrapper').datagrid();\n\n            this._setupDatagrid();\n\n            if (periodicReload !== false) {\n                this._startReloadTimer();\n            }\n        });\n    },\n\n    /**\n     * Handler for when a row is selected.\n     *\n     * Records the row for any actions the user may wish to invoke.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the callback.\n     */\n    _onRowSelected(e) {\n        const $checkbox = $(e.target);\n        const objectID = $checkbox.data('object-id');\n\n        if ($checkbox.prop('checked')) {\n            this.model.select(objectID);\n        } else {\n            this.model.unselect(objectID);\n        }\n    },\n});\n"],"mappings":"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"}