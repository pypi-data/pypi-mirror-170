{"version":3,"file":"reviewGroupModel.js","names":["GroupMember","RB","BaseResource","extend","defaults","_","username","added","loaded","prototype","serializedAttrs","url","get","isNew","parse","ReviewGroup","name","rspNamespace","SITE_ROOT","setStarred","starred","options","context","undefined","isFunction","success","error","complete","console","warn","promiseToCallbacks","newOptions","watched","UserSession","instance","watchedGroups","addImmediately","removeImmediately","addUser","member","baseURL","save","Promise","reject","BackboneError","errorText","removeUser","destroy"],"sources":["../../../../../../static/rb/js/resources/models/reviewGroupModel.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * A member of a review group.\n *\n * This is used to handle adding a user to a group or removing from a group.\n */\nconst GroupMember = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            username: null,\n            added: false,\n            loaded: true\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    serializedAttrs: ['username'],\n\n    /**\n     * Return a URL for this resource.\n     *\n     * If this represents an added user, the URL will point to\n     * <groupname>/<username>/. Otherwise, it just points to <groupname>/.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        let url = this.get('baseURL');\n\n        if (this.get('added')) {\n            url += this.get('username') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Return whether the group membership is \"new\".\n     *\n     * A non-added user is new, meaning the save operation will trigger\n     * a POST to add the user.\n     *\n     * Returns:\n     *     boolean:\n     *     Whether this member is newly-added to the group.\n     */\n    isNew() {\n        return !this.get('added');\n    },\n\n    /**\n     * Parse the result payload.\n     *\n     * We don't really care about the result, so we don't bother doing any\n     * work to parse.\n     */\n    parse() {}\n});\n\n\n/**\n * A review group.\n *\n * This provides some utility functions for working with an existing\n * review group.\n *\n * At the moment, this consists of marking a review group as\n * starred/unstarred.\n */\nRB.ReviewGroup = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            name: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'group',\n\n    /**\n     * Return the URL to the review group.\n     *\n     * If this is a new group, the URL will point to the base groups/ URL.\n     * Otherwise, it points to the URL for the group itself.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use when syncing the model.\n     */\n    url() {\n        let url = SITE_ROOT + (this.get('localSitePrefix') || '') +\n                  'api/groups/';\n\n        if (!this.isNew()) {\n            url += this.get('name') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Mark a review group as starred or unstarred.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated the options and context parameters and changed to return\n     *     a promise.\n     *\n     * Args:\n     *     starred (boolean):\n     *         Whether or not the group is starred.\n     *\n     *     options (object, optional):\n     *         Additional options for the save operation, including callbacks.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    setStarred(starred, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewGroup.setStarred was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.setStarred(starred));\n        }\n\n        const watched = RB.UserSession.instance.watchedGroups;\n        return starred ? watched.addImmediately(this)\n                       : watched.removeImmediately(this);\n    },\n\n    /**\n     * Add a user to this group.\n     *\n     * Sends the request to the server to add the user, and notifies on\n     * succes or failure.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     username (string):\n     *         The username of the new user.\n     *\n     *     options (object, optional):\n     *         Additional options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    addUser(username, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewGroup.addUser was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.addUser(username));\n        }\n\n        const url = this.url() + 'users/';\n\n        if (url && !this.isNew()) {\n            const member = new GroupMember({\n                username: username,\n                baseURL: url\n            });\n\n            return member.save();\n        } else {\n            return Promise.reject(new BackboneError(this, {\n                errorText: 'Unable to add to the group.',\n            }, options));\n        }\n    },\n\n    /*\n     * Remove a user from this group.\n     *\n     * Sends the request to the server to remove the user, and notifies on\n     * success or failure.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     username (string):\n     *         The username of the new user.\n     *\n     *     options (object, optional):\n     *         Additional options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    removeUser(username, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewGroup.removeUser was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.removeUser(username));\n        }\n\n        const url = this.url() + 'users/';\n\n        if (url && !this.isNew()) {\n            const member = new GroupMember({\n                username: username,\n                baseURL: url,\n                added: true\n            });\n\n            return member.destroy();\n        } else {\n            return Promise.reject(new BackboneError(this, {\n                errorText: 'Unable to remove from the group.',\n            }, options));\n        }\n    }\n});\n\n\n})();\n"],"mappings":"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"}