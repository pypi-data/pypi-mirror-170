{"version":3,"file":"dashboardPageModel.js","names":["RB","Admin","DashboardPage","Page","extend","defaults","_","result","prototype","supportData","widgetsData","initialize","apply","arguments","widgets","Backbone","Collection","loadWidgets","onWidgetLoaded","classTypes","get","reset","i","length","widgetInfo","ModelType","modelClass","ViewType","viewClass","undefined","Djblets","getObjectByName","widgetModel","id","modelAttrs","modelOptions","add","domID","viewOptions","e","console","error"],"sources":["../../../../../../static/rb/js/admin/models/dashboardPageModel.es6.js"],"sourcesContent":["/**\n * State for the administration UI's main dashboard page.\n *\n * Model Attributes:\n *     supportData (string):\n *         An encoded payload containing information used to look up\n *         information on an active support contract for the server.\n *\n *     widgetsData (Array of object):\n *         Metadata on all the widgets rendered on the page. Each entry in\n *         the array is an object containing:\n *\n *         ``id``:\n *             The ID of the widget.\n *\n *         ``domID``:\n *             The DOM element ID of the widget's rendered HTML.\n *\n *         ``modelClass``:\n *             The namespaced name of the model class managing the widget's\n *             state.\n *\n *         ``modelAttrs``:\n *             The optional attributes passed to the widget model during\n *             initialization.\n *\n *         ``modelOptions``:\n *             The optional options passed to the widget model during\n *             initialization.\n *\n *         ``viewClass``:\n *             The namespaced name of the view class rendering the widget.\n *\n *         ``viewOptions``:\n *             The optional options passed to the widget view during\n *             initialization.\n */\nRB.Admin.DashboardPage = RB.Page.extend({\n    /**\n     * Return the default attribute values.\n     *\n     * Returns:\n     *     object:\n     *     The default attribute values.\n     */\n    defaults() {\n        return _.defaults(_.result(RB.Page.prototype.defaults), {\n            supportData: null,\n            widgetsData: [],\n        });\n    },\n\n    /**\n     * Initialize the page.\n     */\n    initialize() {\n        RB.Page.prototype.initialize.apply(this, arguments);\n\n        this.widgets = new Backbone.Collection();\n    },\n\n    /**\n     * Load the widgets from the serialized widget data.\n     *\n     * This will construct a model for each widget, and call the provided\n     * function to finish any UI-side setup.\n     *\n     * If any widgets fail to load, they'll be skipped.\n     *\n     * Args:\n     *     onWidgetLoaded (function):\n     *         The function to call for each widget. This takes the widget\n     *         model and serialized widget information as parameters.\n     */\n    loadWidgets(onWidgetLoaded) {\n        const classTypes = {};\n        const widgetsData = this.get('widgetsData');\n\n        this.widgets.reset();\n\n        for (let i = 0; i < widgetsData.length; i++) {\n            const widgetInfo = widgetsData[i];\n\n            try {\n                let ModelType = classTypes[widgetInfo.modelClass];\n                let ViewType = classTypes[widgetInfo.viewClass];\n\n                if (ModelType === undefined) {\n                    ModelType = Djblets.getObjectByName(widgetInfo.modelClass);\n                    classTypes[widgetInfo.modelClass] = ModelType;\n                }\n\n                if (ViewType === undefined) {\n                    ViewType = Djblets.getObjectByName(widgetInfo.viewClass);\n                    classTypes[widgetInfo.viewClass] = ViewType;\n                }\n\n                const widgetModel = new ModelType(\n                    _.defaults(\n                        {\n                            id: widgetInfo.id,\n                        },\n                        widgetInfo.modelAttrs),\n                    widgetInfo.modelOptions);\n\n                this.widgets.add(widgetModel);\n\n                onWidgetLoaded({\n                    domID: widgetInfo.domID,\n                    ViewType: ViewType,\n                    viewOptions: widgetInfo.viewOptions,\n                    widgetModel: widgetModel,\n                });\n            } catch (e) {\n                console.error(\n                    'Unable to render administration widget \"%s\": %s',\n                    widgetInfo.id, e);\n            }\n        }\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,KAAH,CAASC,aAAT,GAAyBF,EAAE,CAACG,IAAH,CAAQC,MAAR,CAAe;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,QAAQ,GAAG;IACP,OAAOC,CAAC,CAACD,QAAF,CAAWC,CAAC,CAACC,MAAF,CAASP,EAAE,CAACG,IAAH,CAAQK,SAAR,CAAkBH,QAA3B,CAAX,EAAiD;MACpDI,WAAW,EAAE,IADuC;MAEpDC,WAAW,EAAE;IAFuC,CAAjD,CAAP;EAIH,CAbmC;;EAepC;AACJ;AACA;EACIC,UAAU,GAAG;IACTX,EAAE,CAACG,IAAH,CAAQK,SAAR,CAAkBG,UAAlB,CAA6BC,KAA7B,CAAmC,IAAnC,EAAyCC,SAAzC;IAEA,KAAKC,OAAL,GAAe,IAAIC,QAAQ,CAACC,UAAb,EAAf;EACH,CAtBmC;;EAwBpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAW,CAACC,cAAD,EAAiB;IACxB,MAAMC,UAAU,GAAG,EAAnB;IACA,MAAMT,WAAW,GAAG,KAAKU,GAAL,CAAS,aAAT,CAApB;IAEA,KAAKN,OAAL,CAAaO,KAAb;;IAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,WAAW,CAACa,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;MACzC,MAAME,UAAU,GAAGd,WAAW,CAACY,CAAD,CAA9B;;MAEA,IAAI;QACA,IAAIG,SAAS,GAAGN,UAAU,CAACK,UAAU,CAACE,UAAZ,CAA1B;QACA,IAAIC,QAAQ,GAAGR,UAAU,CAACK,UAAU,CAACI,SAAZ,CAAzB;;QAEA,IAAIH,SAAS,KAAKI,SAAlB,EAA6B;UACzBJ,SAAS,GAAGK,OAAO,CAACC,eAAR,CAAwBP,UAAU,CAACE,UAAnC,CAAZ;UACAP,UAAU,CAACK,UAAU,CAACE,UAAZ,CAAV,GAAoCD,SAApC;QACH;;QAED,IAAIE,QAAQ,KAAKE,SAAjB,EAA4B;UACxBF,QAAQ,GAAGG,OAAO,CAACC,eAAR,CAAwBP,UAAU,CAACI,SAAnC,CAAX;UACAT,UAAU,CAACK,UAAU,CAACI,SAAZ,CAAV,GAAmCD,QAAnC;QACH;;QAED,MAAMK,WAAW,GAAG,IAAIP,SAAJ,CAChBnB,CAAC,CAACD,QAAF,CACI;UACI4B,EAAE,EAAET,UAAU,CAACS;QADnB,CADJ,EAIIT,UAAU,CAACU,UAJf,CADgB,EAMhBV,UAAU,CAACW,YANK,CAApB;QAQA,KAAKrB,OAAL,CAAasB,GAAb,CAAiBJ,WAAjB;QAEAd,cAAc,CAAC;UACXmB,KAAK,EAAEb,UAAU,CAACa,KADP;UAEXV,QAAQ,EAAEA,QAFC;UAGXW,WAAW,EAAEd,UAAU,CAACc,WAHb;UAIXN,WAAW,EAAEA;QAJF,CAAD,CAAd;MAMH,CA9BD,CA8BE,OAAOO,CAAP,EAAU;QACRC,OAAO,CAACC,KAAR,CACI,iDADJ,EAEIjB,UAAU,CAACS,EAFf,EAEmBM,CAFnB;MAGH;IACJ;EACJ;;AAlFmC,CAAf,CAAzB"}