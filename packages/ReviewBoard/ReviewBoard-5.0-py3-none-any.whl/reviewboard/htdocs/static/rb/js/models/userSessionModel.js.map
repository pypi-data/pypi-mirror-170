{"version":3,"file":"userSessionModel.js","names":["Item","RB","BaseResource","extend","defaults","_","baseURL","loaded","objectID","stored","prototype","url","get","isNew","toJSON","object_id","undefined","parse","StoredItems","addError","removeError","addImmediately","obj","options","context","isFunction","success","error","complete","console","warn","promiseToCallbacks","newOptions","item","id","save","Promise","reject","Error","removeImmediately","resolve","destroy","UserSession","Backbone","Model","archivedReviewRequestsURL","authenticated","diffsShowExtraWhitespace","fullName","loginURL","mutedReviewRequestsURL","readOnly","sessionURL","timezoneOffset","userFileAttachmentsURL","userPageURL","username","watchedReviewGroupsURL","watchedReviewRequestsURL","initialize","watchedGroups","watchedReviewRequests","archivedReviewRequests","mutedReviewRequests","_bindCookie","attr","cookieName","deserialize","value","toggleAttr","set","getAvatarHTML","size","urls","getAvatarURLs","identity","serialize","toString","$","cookie","on","model","path","SITE_ROOT","instance","ARCHIVED","MUTED","create","assert"],"sources":["../../../../../static/rb/js/models/userSessionModel.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * An item in a StoredItems list.\n *\n * These are used internally to proxy object registration into a store list.\n * It is meant to be a temporary, internal object that can be created with\n * the proper data and then immediately saved or deleted.\n *\n * Model Attributes:\n *     baseURL (string):\n *         The root of the URL for the resource list.\n *\n *     loaded (boolean):\n *         Whether the item is loaded from the server.\n *\n *     objectID (string):\n *         The ID of the item.\n *\n *     stored (boolean):\n *         Whether or not the item has been stored on the server.\n */\nconst Item = RB.BaseResource.extend({\n    /**\n     * Return defaults for the model attributes.\n     *\n     * Returns:\n     *     object:\n     *     Default values for the attributes.\n     */\n    defaults() {\n        return _.defaults({\n            baseURL: null,\n            loaded: true,\n            objectID: null,\n            stored: false,\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    /**\n     * Return the URL for the item resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL to use for updating the item.\n     */\n    url() {\n        let url = this.get('baseURL');\n\n        if (this.get('stored')) {\n            url += this.get('objectID') + '/';\n        }\n\n        return url;\n    },\n\n    /**\n     * Return whether the item is new (not yet stored on the server).\n     *\n     * Returns:\n     *     boolean:\n     *     Whether the item is new.\n     */\n    isNew() {\n        return !this.get('stored');\n    },\n\n    /**\n     * Return a JSON-serializable representation of the item.\n     *\n     * Returns:\n     *    object:\n     *    A representation of the item suitable for serializing to JSON.\n     */\n    toJSON() {\n        return {\n            object_id: this.get('objectID') || undefined,\n        };\n    },\n\n    /**\n     * Parse the response from the server.\n     */\n    parse(/* rsp */) {\n    },\n});\n\n\n/**\n * Manages a list of stored objects.\n *\n * This interfaces with a Watched Items resource (for groups or review\n * requests) and a Hidden Items resource, allowing immediate adding/removing\n * of objects.\n *\n * Model Attributes:\n *     addError (string):\n *         The error string to use when adding an item fails.\n *\n *     removeError (string):\n *         The error string to use when removing an item fails.\n */\nconst StoredItems = RB.BaseResource.extend({\n    /**\n     * Return the defaults for the model attributes.\n     *\n     * Returns:\n     *     object:\n     *     The default values for the model attributes.\n     */\n    defaults() {\n        return _.defaults({\n            addError: '',\n            removeError: '',\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    /**\n     * Return the URL for the resource.\n     *\n     * Returns:\n     *     string:\n     *     The URL for the resource.\n     */\n    url() {\n        return this.get('url');\n    },\n\n    /**\n     * Immediately add an object to a stored list on the server.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated the options and context parameters and changed to return\n     *     a promise.\n     *\n     * Args:\n     *     obj (Item):\n     *         The item to add.\n     *\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to use when calling the callbacks in ``options``.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    addImmediately(obj, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('StoredItems.addImmediately was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.addImmediately(obj));\n        }\n\n        const url = this.url();\n\n        if (url) {\n            const item = new Item({\n                objectID: obj.id,\n                baseURL: url,\n            });\n\n            return item.save();\n        } else {\n            return Promise.reject(new Error(this.addError));\n        }\n    },\n\n    /**\n     * Immediately remove an object from a stored list on the server.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated the options and context parameters and changed to return\n     *     a promise.\n     *\n     * Args:\n     *     obj (Item):\n     *         The item to remove.\n     *\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to use when calling the callbacks in ``options``.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    removeImmediately(obj, options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('StoredItems.removeImmediately was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.removeImmediately(obj));\n        }\n\n        const url = this.url();\n\n        return new Promise((resolve, reject) => {\n            if (url) {\n                const item = new Item({\n                    objectID: obj.id,\n                    baseURL: url,\n                    stored: true,\n                });\n\n                resolve(item.destroy());\n            } else {\n                reject(new Error(this.removeError));\n            }\n        });\n    },\n});\n\n\n/**\n * Manages the user's active session.\n *\n * This stores basic information on the user (the username and session API URL)\n * and utility objects such as the watched groups, watched review requests and\n * hidden review requests lists.\n *\n * There should only ever be one instance of a UserSession. It should always\n * be created through UserSession.create, and retrieved through\n * UserSession.instance.\n *\n * Model Attributes:\n *     archivedReviewRequestsURL (string):\n *         The URL for the archived review requests API resource.\n *\n *     authenticated (boolean):\n *         Whether the user is currently authenticated.\n *\n *     diffsShowExtraWhitespace (boolean):\n *         Whether the user wants to see diffs with excess whitespace\n *         highlighted.\n *\n *     fullName (string):\n *         The user's full name.\n *\n *     loginURL (string):\n *         The URL to the login page (if the user is anonymous).\n *\n *     mutedReviewRequestsURL (string):\n *         The URL for the archived review requests API resource.\n *\n *     readOnly (boolean):\n *         Whether the user is operating in read-only mode.\n *\n *     sessionURL (string):\n *         The URL to the session API resource.\n *\n *     timezoneOffset (string):\n *         The user's offset from UTC. This will be in the format that would\n *         attach to an ISO8601-style date, such as \"-0800\" for PST.\n *\n *     userFileAttachmentsURL (string):\n *         The URL for the user file attachments API resource.\n *\n *     userPageURL (string):\n *         The URL for the user's profile page.\n *\n *     username: (string):\n *         The user's username.\n *\n *     watchedReviewGroupsURL (string):\n *         The URL for the watched review groups API resource.\n *\n *     watchedReviewRequestsURL (string):\n *         The URL for the watched review requests API resource.\n */\nRB.UserSession = Backbone.Model.extend({\n    defaults: {\n        archivedReviewRequestsURL: null,\n        authenticated: false,\n        diffsShowExtraWhitespace: false,\n        fullName: null,\n        loginURL: null,\n        mutedReviewRequestsURL: null,\n        readOnly: false,\n        sessionURL: null,\n        timezoneOffset: '0',\n        userFileAttachmentsURL: null,\n        userPageURL: null,\n        username: null,\n        watchedReviewGroupsURL: null,\n        watchedReviewRequestsURL: null,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        this.watchedGroups = new StoredItems({\n            url: this.get('watchedReviewGroupsURL'),\n            addError: gettext('Must log in to add a watched item.'),\n            removeError: gettext('Must log in to remove a watched item.'),\n        });\n\n        this.watchedReviewRequests = new StoredItems({\n            url: this.get('watchedReviewRequestsURL'),\n            addError: gettext('Must log in to add a watched item.'),\n            removeError: gettext('Must log in to remove a watched item.'),\n        });\n\n        this.archivedReviewRequests = new StoredItems({\n            url: this.get('archivedReviewRequestsURL'),\n            removeError: gettext('Must log in to remove a archived item.'),\n            addError: gettext('Must log in to add an archived item.'),\n        });\n\n        this.mutedReviewRequests = new StoredItems({\n            url: this.get('mutedReviewRequestsURL'),\n            removeError: gettext('Must log in to remove a muted item.'),\n            addError: gettext('Must log in to add a muted item.'),\n        });\n\n        this._bindCookie({\n            attr: 'diffsShowExtraWhitespace',\n            cookieName: 'show_ew',\n            deserialize: value => (value !== 'false'),\n        });\n    },\n\n    /**\n     * Toggle a boolean attribute.\n     *\n     * The attribute will be the inverse of the prior value.\n     *\n     * Args:\n     *     attr (string):\n     *         The name of the attribute to toggle.\n     */\n    toggleAttr(attr) {\n        this.set(attr, !this.get(attr));\n    },\n\n    /*\n     * Return avatar HTML for the user with the given size.\n     *\n     * Version Added:\n     *     3.0.19\n     *\n     * Args:\n     *     size (Number):\n     *         The size of the avatar, in pixels. This is both the width and\n     *         height.\n     *\n     * Return:\n     *     string:\n     *     The HTML for the avatar.\n     */\n    getAvatarHTML: function(size) {\n        var urls = this.get('avatarHTML') || {};\n        return urls[size] || '';\n    },\n\n    /**\n     * Return avatar URLs for the user with the given size.\n     *\n     * Deprecated:\n     *     3.0.19:\n     *     :js:meth:`getAvatarHTML` should be used instead.\n     *\n     * Args:\n     *     size (number):\n     *         The size of the avatar, in pixels. This is both the width and\n     *         height.\n     *\n     * Return:\n     *     object:\n     *     An object containing avatar URLs, if the requested avatar size is\n     *     available. This object will contain the following keys:\n     *\n     *     * ``1x``: The url for the avatar.\n     *     * ``2x``: The high-DPI URL for the avatar.\n     *\n     *     If the requested avatar size is unavailable, this function returns\n     *     an empty object.\n     */\n    getAvatarURLs(size) {\n        const urls = this.get('avatarURLs') || {};\n        return urls[size] || {};\n    },\n\n    /**\n     * Bind a cookie to an attribute.\n     *\n     * The initial value of the attribute will be set to that of the cookie.\n     *\n     * When the attribute changes, the cookie will be updated.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the bind.\n     *\n     * Option Args:\n     *    attr (string):\n     *        The name of the attribute to bind.\n     *\n     *    cookieName (string):\n     *        The name of the cookie to store.\n     *\n     *    deserialize (function, optional):\n     *        A deserialization function to use when fetching the attribute\n     *        value.\n     *\n     *    serialize (function, optional):\n     *        A serialization function to use when storing the attribute value.\n     */\n    _bindCookie(options) {\n        const deserialize = options.deserialize || _.identity;\n        const serialize = (options.serialize ||\n                           (value => value.toString()));\n\n        this.set(options.attr, deserialize($.cookie(options.cookieName)));\n\n        this.on(`change:${options.attr}`, (model, value) => {\n            $.cookie(options.cookieName, serialize(value), {\n                path: SITE_ROOT,\n            });\n        });\n    },\n}, {\n    instance: null,\n\n    ARCHIVED: 'A',\n    MUTED: 'M',\n\n    /**\n     * Create the UserSession for the current user.\n     *\n     * Only one will ever exist. Calling this a second time will assert.\n     *\n     * Args:\n     *     options (object):\n     *         Options to pass into the UserSession initializer.\n     *\n     * Returns:\n     *     RB.UserSession:\n     *     The user session instance.\n     */\n    create(options) {\n        console.assert(!RB.UserSession.instance,\n                       'UserSession.create can only be called once.');\n\n        RB.UserSession.instance = new RB.UserSession(options);\n        return RB.UserSession.instance;\n    },\n});\n\n\n})();\n"],"mappings":"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"}