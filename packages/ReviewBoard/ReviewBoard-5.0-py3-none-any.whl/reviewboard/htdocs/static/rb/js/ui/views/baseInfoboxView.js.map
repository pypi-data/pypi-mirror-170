{"version":3,"file":"baseInfoboxView.js","names":["RB","BaseInfoboxView","Backbone","View","extend","infoboxID","DEFAULT_POSITIONING","side","xOffset","yDistance","events","initialize","positioning","_scrollbarWidth","className","getURLForTarget","$target","attr","setContents","html","$el","render","css","find","_getScrollbarWidth","_","defer","width","$","visibility","position","left","top","appendTo","document","body","newWidth","remove","_onHoverItemMouseEnter","evt","target","closest","addClass","_onHoverItemMouseLeave","removeClass","_onScrollableMouseEnter","_onScrollableMouseLeave"],"sources":["../../../../../../static/rb/js/ui/views/baseInfoboxView.es6.js"],"sourcesContent":["/**\n * An infobox pop-up.\n *\n * This binds to an ``<a>`` element (expected to be either a bug, a user, or a\n * review request right now), and loads the contents of the infobox from a URL\n * built from that element's ``href`` attribute plus the string \"infobox/\".\n */\nRB.BaseInfoboxView = Backbone.View.extend({\n    /**\n     * The unique ID for the infobox.\n     *\n     * This will also be used as the CSS class for the infobox.\n     */\n    infoboxID: null,\n\n    DEFAULT_POSITIONING: {\n        side: 'tb',\n        xOffset: -20,\n        yDistance: 10,\n    },\n\n    events: {\n        'mouseenter .infobox-hover-item-anchor': '_onHoverItemMouseEnter',\n        'mouseleave .infobox-hover-item': '_onHoverItemMouseLeave',\n        'mouseenter .infobox-scrollable-section': '_onScrollableMouseEnter',\n        'mouseleave .infobox-scrollable-section': '_onScrollableMouseLeave',\n    },\n\n    /**\n     * Initialize the infobox.\n     */\n    initialize() {\n        /* Set the default positioning. This can be overridden by pages. */\n        this.positioning = this.DEFAULT_POSITIONING;\n\n        this._scrollbarWidth = null;\n    },\n\n    /**\n     * Return the class name for the infobox.\n     *\n     * Returns:\n     *     string:\n     *     The CSS class name for the infobox element.\n     */\n    className() {\n        return `infobox ${this.infoboxID}`;\n    },\n\n    /**\n     * Return the infobox contents URL for a given target.\n     *\n     * By default, this uses the ``href`` argument on the target, appending\n     * ``infobox/``. Infoboxes can override this to provide a different URL.\n     */\n    getURLForTarget($target) {\n        return `${$target.attr('href')}infobox/`;\n    },\n\n    /**\n     * Set new contents for the infobox.\n     *\n     * This will replace the HTML of the infobox element and then cause\n     * :js:meth:`render` to be called.\n     *\n     * Args:\n     *     html (string):\n     *         The new HTML to set.\n     */\n    setContents(html) {\n        this.$el.html(html);\n        this.render();\n    },\n\n    /**\n     * Render the infobox.\n     *\n     * Subclasses can override this to provide specific rendering. By default,\n     * there's no custom rendering performed here.\n     *\n     * Subclasses should always call the parent method.\n     *\n     * Returns:\n     *     RB.BaseInfoboxView:\n     *     This infobox instance, for chaining.\n     */\n    render() {\n        /*\n         * We want to be smart about how the scrollbar is handled when\n         * hovering over scrollable sections. If we leave this up to CSS,\n         * the contents within will either get less space on hover, possibly\n         * wrapping (due to the scrollbars appearing), or the window will\n         * expand, potentially influencing other elements in the infobox.\n         * Neither are good.\n         *\n         * So what we do is compute the width of the scrollbar and reserve\n         * that much space to the right of the content. After we have that,\n         * we figure out the natural width for this infobox and then force\n         * that width so that the infobox can't unexpectedly widen.\n         *\n         * When hovering over the scrollable section, the additional padding\n         * will go away and the scrollbar will appear, ensuring that neither\n         * the content nor the window will alter in size.\n         */\n        this._scrollbarWidth = null;\n\n        this.$el\n            .css('width', '')\n            .find('.infobox-scrollable-section')\n                .css('padding-right', this._getScrollbarWidth());\n\n        _.defer(() => this.$el.width(this.$el.width()));\n\n        return this;\n    },\n\n    /**\n     * Return the width of the scrollbar.\n     *\n     * This will create a temporary off-screen element, measure its width,\n     * and then force the display of a scrollbar, and measure that. The\n     * difference in widths is the width of the scrollbar.\n     *\n     * This value may be 0, depending on how the browser renders scrollbars\n     * for content. macOS, by default, won't have any measurable width for the\n     * scrollbar.\n     *\n     * Returns:\n     *     number:\n     *     The width of the scrollbar.\n     */\n    _getScrollbarWidth() {\n        if (this._scrollbarWidth === null) {\n            const $el = $('<div>test</div>')\n                .css({\n                    visibility: 'hidden',\n                    position: 'absolute',\n                    left: -10000,\n                    top: -10000,\n                })\n                .appendTo(document.body);\n            const width = $el.width();\n\n            $el.css('overflow-y', 'scroll');\n            const newWidth = $el.width();\n\n            $el.remove();\n\n            this._scrollbarWidth = newWidth - width;\n        }\n\n        return this._scrollbarWidth;\n    },\n\n    /**\n     * Handler for mouseenter events on hover item anchors.\n     *\n     * This will display the hover details for the item.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseenter event.\n     */\n    _onHoverItemMouseEnter(evt) {\n        $(evt.target).closest('.infobox-hover-item')\n            .addClass('infobox-hover-item-opened');\n    },\n\n    /**\n     * Handler for mouseleave events on hover items or their children.\n     *\n     * This will hide the hover details for the item.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseleave event.\n     */\n    _onHoverItemMouseLeave(evt) {\n        $(evt.target).closest('.infobox-hover-item')\n            .removeClass('infobox-hover-item-opened');\n    },\n\n    /**\n     * Handler for mouseenter events on the description area.\n     *\n     * This will turn off the padding so the scrollbar has room.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseenter event.\n     */\n    _onScrollableMouseEnter(evt) {\n        $(evt.target).closest('.infobox-scrollable-section')\n            .css('padding-right', 0);\n    },\n\n    /**\n     * Handler for mouseleave events on the description area.\n     *\n     * This will re-enable the padding where the scrollbar would be.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseleave event.\n     */\n    _onScrollableMouseLeave(evt) {\n        $(evt.target).closest('.infobox-scrollable-section')\n            .css('padding-right', this._getScrollbarWidth());\n    },\n});\n"],"mappings":"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"}