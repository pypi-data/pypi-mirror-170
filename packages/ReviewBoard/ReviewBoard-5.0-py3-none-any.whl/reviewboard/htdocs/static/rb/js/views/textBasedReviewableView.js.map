{"version":3,"file":"textBasedReviewableView.js","names":["RB","TextBasedReviewableView","FileAttachmentReviewableView","extend","commentBlockView","TextBasedCommentBlockView","initialize","options","prototype","call","_$viewTabs","_$textTable","_$renderedTable","_textSelector","_renderedSelector","on","_placeCommentBlockView","router","Backbone","Router","routes","listenTo","viewMode","lineNum","indexOf","substr","model","set","_scrollToLine","remove","_super","renderContent","$","TextCommentRowSelector","el","reviewableView","render","get","_onViewChanged","$fileHeader","_revisionSelectorView","FileAttachmentRevisionSelectorView","find","_onRevisionSelected","_revisionLabelView","FileAttachmentRevisionLabelView","reviewURL","attachmentID","diffID","history","start","root","revisions","base","tip","revisionIDs","revisionTip","redirectURL","revisionBase","window","location","replace","$table","_getTableForViewMode","rows","tBodies","MathUtils","clip","length","$row","scrollTop","offset","top","console","assert","_getRowSelectorForViewMode","commentBlock","beginLineNum","endLineNum","rowSelector","rowEls","getRowsForRange","setRows","$el","appendTo","$beginRow","cells","removeClass","filter","addClass","setVisible","triggerHandler"],"sources":["../../../../../static/rb/js/views/textBasedReviewableView.es6.js"],"sourcesContent":["/**\n * Base for text-based review UIs.\n *\n * This will display all existing comments on an element by displaying a comment\n * indicator beside it. Users can place a comment by clicking on a line, which\n * will get a light-grey background color upon mouseover, and placing a comment\n * in the comment dialog that is displayed.\n */\nRB.TextBasedReviewableView = RB.FileAttachmentReviewableView.extend({\n    commentBlockView: RB.TextBasedCommentBlockView,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options) {\n        RB.FileAttachmentReviewableView.prototype.initialize.call(\n            this, options);\n\n        this._$viewTabs = null;\n        this._$textTable = null;\n        this._$renderedTable = null;\n        this._textSelector = null;\n        this._renderedSelector = null;\n\n        this.on('commentBlockViewAdded', this._placeCommentBlockView, this);\n\n        this.router = new Backbone.Router({\n            routes: {\n                ':viewMode(/line:lineNum)': 'viewMode',\n            },\n        });\n        this.listenTo(this.router, 'route:viewMode', (viewMode, lineNum) => {\n            /*\n             * Router's pattern matching isn't very good. Since we don't\n             * want to stick \"view\" or something before the view mode,\n             * and we want to allow for view, line, or view + line, we need\n             * to check and transform viewMode if it seems to be a line\n             * reference.\n             */\n            if (viewMode.indexOf('line') === 0) {\n                lineNum = viewMode.substr(4);\n                viewMode = null;\n            }\n\n            if (viewMode) {\n                this.model.set('viewMode', viewMode);\n            }\n\n            if (lineNum) {\n                this._scrollToLine(lineNum);\n            }\n        });\n    },\n\n    /**\n     * Remove the reviewable from the DOM.\n     */\n    remove() {\n        _super(this).remove.call(this);\n\n        this._textSelector.remove();\n        this._renderedSelector.remove();\n    },\n\n    /**\n     * Render the view.\n     */\n    renderContent() {\n        this._$viewTabs = this.$('.text-review-ui-views li');\n\n        // Set up the source text table.\n        this._$textTable = this.$('.text-review-ui-text-table');\n\n        this._textSelector = new RB.TextCommentRowSelector({\n            el: this._$textTable,\n            reviewableView: this\n        });\n        this._textSelector.render();\n\n        if (this.model.get('hasRenderedView')) {\n            // Set up the rendered table.\n            this._$renderedTable = this.$('.text-review-ui-rendered-table');\n\n            this._renderedSelector = new RB.TextCommentRowSelector({\n                el: this._$renderedTable,\n                reviewableView: this\n            });\n            this._renderedSelector.render();\n        }\n\n        this.listenTo(this.model, 'change:viewMode', this._onViewChanged);\n\n        const $fileHeader = this.$('.review-ui-header');\n\n        if (this.model.get('numRevisions') > 1) {\n            this._revisionSelectorView = new RB.FileAttachmentRevisionSelectorView({\n                el: $fileHeader.find('#attachment_revision_selector'),\n                model: this.model\n            });\n            this._revisionSelectorView.render();\n            this.listenTo(this._revisionSelectorView, 'revisionSelected',\n                          this._onRevisionSelected);\n\n            this._revisionLabelView = new RB.FileAttachmentRevisionLabelView({\n                el: $fileHeader.find('#revision_label'),\n                model: this.model\n            });\n            this._revisionLabelView.render();\n            this.listenTo(this._revisionLabelView, 'revisionSelected',\n                          this._onRevisionSelected);\n        }\n\n        const reviewURL = this.model.get('reviewRequest').get('reviewURL');\n        const attachmentID = this.model.get('fileAttachmentID');\n        const diffID = this.model.get('diffAgainstFileAttachmentID');\n        Backbone.history.start({\n            root: (diffID == null\n                   ? `${reviewURL}file/${attachmentID}/`\n                   : `${reviewURL}file/${diffID}-${attachmentID}/`),\n        });\n    },\n\n    /**\n     * Callback for when a new file revision is selected.\n     *\n     * This supports single revisions and diffs. If ``base`` is 0, a\n     * single revision is selected, If not, the diff between ``base`` and\n     * ``tip`` will be shown.\n     *\n     * Args:\n     *     revisions (array of number):\n     *         A 2-element array containing the new revisions to be viewed.\n     */\n    _onRevisionSelected(revisions) {\n        const [base, tip] = revisions;\n\n        // Ignore clicks on No Diff Label.\n        if (tip === 0) {\n            return;\n        }\n\n        const revisionIDs = this.model.get('attachmentRevisionIDs');\n        const revisionTip = revisionIDs[tip - 1];\n\n        /*\n         * Eventually these hard redirects will use a router\n         * (see diffViewerPageView.js for example)\n         * this.router.navigate(base + '-' + tip + '/', {trigger: true});\n         */\n        let redirectURL;\n\n        if (base === 0) {\n            redirectURL = `../${revisionTip}/`;\n        } else {\n            const revisionBase = revisionIDs[base - 1];\n            redirectURL = `../${revisionBase}-${revisionTip}/`;\n        }\n\n        window.location.replace(redirectURL);\n    },\n\n    /**\n     * Scroll the page to the top of the specified line number.\n     *\n     * Args:\n     *     lineNum (number):\n     *         The line number to scroll to.\n     */\n    _scrollToLine(lineNum) {\n        const $table = this._getTableForViewMode(this.model.get('viewMode'));\n        const rows = $table[0].tBodies[0].rows;\n\n        /* Normalize this to a valid row index. */\n        lineNum = RB.MathUtils.clip(lineNum, 1, rows.length) - 1;\n\n        const $row = $($table[0].tBodies[0].rows[lineNum]);\n        $(window).scrollTop($row.offset().top);\n    },\n\n    /**\n     * Return the table element for the given view mode.\n     *\n     * Args:\n     *     viewMode (string):\n     *         The view mode to show.\n     *\n     * Returns:\n     *     jQuery:\n     *     The table element corresponding to the requested view mode.\n     */\n    _getTableForViewMode(viewMode) {\n        if (viewMode === 'source') {\n            return this._$textTable;\n        } else if (viewMode === 'rendered' &&\n                   this.model.get('hasRenderedView')) {\n            return this._$renderedTable;\n        } else {\n            console.assert(false, 'Unexpected viewMode ' + viewMode);\n            return null;\n        }\n    },\n\n    /**\n     * Return the row selector for the given view mode.\n     *\n     * Args:\n     *     viewMode (string):\n     *         The view mode to show.\n     *\n     * Returns:\n     *     RB.TextCommentRowSelector:\n     *     The row selector.\n     */\n    _getRowSelectorForViewMode(viewMode) {\n        if (viewMode === 'source') {\n            return this._textSelector;\n        } else if (viewMode === 'rendered' &&\n                   this.model.get('hasRenderedView')) {\n            return this._renderedSelector;\n        } else {\n            console.assert(false, 'Unexpected viewMode ' + viewMode);\n            return null;\n        }\n    },\n\n    /**\n     * Add the comment view to the line the comment was created on.\n     *\n     * Args:\n     *     commentBlockView (RB.AbstractCommentBlockView):\n     *         The comment view to add.\n     */\n    _placeCommentBlockView(commentBlockView) {\n        const commentBlock = commentBlockView.model;\n        const beginLineNum = commentBlock.get('beginLineNum');\n        const endLineNum = commentBlock.get('endLineNum');\n\n        if (beginLineNum && endLineNum) {\n            const viewMode = commentBlock.get('viewMode');\n            const rowSelector = this._getRowSelectorForViewMode(viewMode);\n\n            if (!rowSelector) {\n                return;\n            }\n\n            let rowEls;\n\n            if (this.model.get('diffRevision')) {\n                /*\n                 * We're showing a diff, so we need to do a search for the\n                 * rows matching the given line numbers.\n                 */\n                rowEls = rowSelector.getRowsForRange(beginLineNum, endLineNum);\n            } else {\n                /*\n                 * Since we know we have the entire content of the text in one\n                 * list, we don't need to use getRowsForRange here, and instead\n                 * can look up the lines directly in the lists of rows.\n                 */\n                const rows = rowSelector.el.tBodies[0].rows;\n\n                /* The line numbers are 1-based, so normalize for the rows. */\n                rowEls = [rows[beginLineNum - 1], rows[endLineNum - 1]];\n            }\n\n            if (rowEls) {\n                commentBlockView.setRows($(rowEls[0]), $(rowEls[1]));\n                commentBlockView.$el.appendTo(\n                    commentBlockView.$beginRow[0].cells[0]);\n            }\n        }\n    },\n\n    /**\n     * Handle a change to the view mode.\n     *\n     * This will set the correct tab to be active and switch which table of\n     * text is shown.\n     */\n    _onViewChanged() {\n        const viewMode = this.model.get('viewMode');\n\n        this._$viewTabs\n            .removeClass('active')\n            .filter(`[data-view-mode=${viewMode}]`)\n                .addClass('active');\n\n        this._$textTable.setVisible(viewMode === 'source');\n        this._$renderedTable.setVisible(viewMode === 'rendered');\n\n        /* Cause all comments to recalculate their sizes. */\n        $(window).triggerHandler('resize');\n    },\n});\n"],"mappings":"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"}