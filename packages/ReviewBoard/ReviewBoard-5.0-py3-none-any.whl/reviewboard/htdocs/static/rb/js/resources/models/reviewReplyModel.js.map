{"version":3,"file":"reviewReplyModel.js","names":["RB","ReviewReply","BaseResource","extend","defaults","_","forceTextType","includeTextTypes","rawTextFields","review","bodyTop","bodyTopRichText","bodyBottom","bodyBottomRichText","timestamp","prototype","rspNamespace","listKey","extraQueryArgs","attrToJsonMap","serializedAttrs","deserializedAttrs","serializers","JSONSerializers","onlyIfValue","textType","value","undefined","COMMENT_LINK_NAMES","parseResourceData","rsp","raw_text_fields","data","call","body_top_text_type","body_bottom_text_type","publish","options","context","isFunction","success","error","complete","console","warn","promiseToCallbacks","newOptions","trigger","ready","set","save","trivial","err","message","discardIfEmpty","isNew","get","_checkCommentsLink","linkNameIndex","Promise","resolve","reject","linkName","url","href","apiCall","type","length","destroy","then","model","xhr","BackboneError","DraftResourceModelMixin"],"sources":["../../../../../../static/rb/js/resources/models/reviewReplyModel.es6.js"],"sourcesContent":["/**\n * A review reply.\n *\n * Encapsulates replies to a top-level review.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text type to request for text in all responses.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in responses.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if forceTextType is used and\n *         the caller fetches or posts with includeTextTypes=raw. The keys in\n *         this object are the field names, and the values are the raw versions\n *         of those attributes.\n *\n *     review (RB.Review):\n *         The review that this reply is replying to.\n *\n *     public (boolean):\n *         Whether this reply has been published.\n *\n *     bodyTop (string):\n *         The reply to the original review's ``bodyTop``.\n *\n *     bodyTopRichText (boolean):\n *         Whether the ``bodyTop`` field should be rendered as Markdown.\n *\n *     bodyBottom (string):\n *         The reply to the original review's ``bodyBottom``.\n *\n *     bodyBottomRichText (boolean):\n *         Whether the ``bodyBottom`` field should be rendered as Markdown.\n *\n *     timestamp (string):\n *         The timestamp of this reply.\n */\nRB.ReviewReply = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            includeTextTypes: null,\n            rawTextFields: {},\n            review: null,\n            'public': false,\n            bodyTop: null,\n            bodyTopRichText: false,\n            bodyBottom: null,\n            bodyBottomRichText: false,\n            timestamp: null\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    rspNamespace: 'reply',\n    listKey: 'replies',\n\n    extraQueryArgs: {\n        'force-text-type': 'html',\n        'include-text-types': 'raw'\n    },\n\n    attrToJsonMap: {\n        bodyBottom: 'body_bottom',\n        bodyBottomRichText: 'body_bottom_text_type',\n        bodyTop: 'body_top',\n        bodyTopRichText: 'body_top_text_type',\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'bodyTop',\n        'bodyTopRichText',\n        'bodyBottom',\n        'bodyBottomRichText',\n        'public'\n    ],\n\n    deserializedAttrs: [\n        'bodyTop',\n        'bodyBottom',\n        'public',\n        'timestamp'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        bodyTopRichText: RB.JSONSerializers.textType,\n        bodyBottomRichText: RB.JSONSerializers.textType,\n        'public': value => value ? true : undefined\n    },\n\n    COMMENT_LINK_NAMES: [\n        'diff_comments',\n        'file_attachment_comments',\n        'general_comments',\n        'screenshot_comments'\n    ],\n\n    /**\n     * Parse the response from the server.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     The attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.bodyTopRichText =\n            (rawTextFields.body_top_text_type === 'markdown');\n        data.bodyBottomRichText =\n            (rawTextFields.body_bottom_text_type === 'markdown');\n        data.rawTextFields = rsp.raw_text_fields || {};\n\n        return data;\n    },\n\n    /**\n     * Publish the reply.\n     *\n     * Before publishing, the \"publishing\" event will be triggered.\n     * After successfully publishing, \"published\" will be triggered.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Deprecated callbacks and added a promise return value.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async publish(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewReply.publish was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(options, context, newOptions =>\n                this.publish(newOptions));\n        }\n\n        this.trigger('publishing');\n\n        await this.ready();\n\n        this.set('public', true);\n\n        try {\n            await this.save({\n                data: {\n                    'public': 1,\n                    trivial: options.trivial ? 1 : 0\n                },\n            });\n        } catch (err) {\n            this.trigger('publishError', err.message);\n            throw err;\n        }\n\n        this.trigger('published');\n    },\n\n    /**\n     * Discard the reply if it's empty.\n     *\n     * If the reply doesn't have any remaining comments on the server, then\n     * this will discard the reply.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Changed to deprecate options and return a promise.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the save operation.\n     *\n     *     context (object, optional):\n     *         Context to bind when calling callbacks.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete. The\n     *     resolution value will be true if discarded, false otherwise.\n     */\n    async discardIfEmpty(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.ReviewReply.discardIfEmpty was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(options, context, newOptions =>\n                this.discardIfEmpty(newOptions));\n        }\n\n        await this.ready();\n\n        if (this.isNew() || this.get('bodyTop') || this.get('bodyBottom')) {\n            return false;\n        } else {\n            return this._checkCommentsLink(0);\n        }\n    },\n\n    /**\n     * Check if there are comments, given the comment type.\n     *\n     * This is part of the discardIfEmpty logic.\n     *\n     * If there are comments, we'll give up and call options.success(false).\n     *\n     * If there are no comments, we'll move on to the next comment type. If\n     * we're done, the reply is discarded, and options.success(true) is called.\n     *\n     * Args:\n     *     linkNamesIndex (number):\n     *         An index into the ``COMMENT_LINK_NAMES`` Array.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete. The\n     *     resolution value will be true if discarded, false otherwise.\n     */\n    _checkCommentsLink(linkNameIndex) {\n        return new Promise((resolve, reject) => {\n            const linkName = this.COMMENT_LINK_NAMES[linkNameIndex];\n            const url = this.get('links')[linkName].href;\n\n            RB.apiCall({\n                type: 'GET',\n                url: url,\n                success: rsp => {\n                    if (rsp[linkName].length > 0) {\n                        resolve(false);\n                    } else if (linkNameIndex < this.COMMENT_LINK_NAMES.length - 1) {\n                        resolve(this._checkCommentsLink(linkNameIndex + 1));\n                    } else {\n                        resolve(this.destroy().then(() => true));\n                    }\n                },\n                error: (model, xhr, options) => reject(\n                    new BackboneError(model, xhr, options)),\n            });\n        });\n    }\n});\n_.extend(RB.ReviewReply.prototype, RB.DraftResourceModelMixin);\n"],"mappings":"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"}