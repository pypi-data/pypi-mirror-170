{"version":3,"file":"commentIssueBarView.js","names":["RB","CommentIssueBarView","Backbone","View","extend","events","statusInfo","open","visibleButtons","text","resolved","dropped","template","_","initialize","options","page","PageManager","getPage","_manager","commentIssueManager","model","_issueStatus","issueStatus","_$buttons","_$state","_$icon","_$message","render","$el","children","length","append","interactive","fixedLabel","dropLabel","reopenLabel","verifyDroppedLabel","verifyFixedLabel","$","on","_onIssueStatusUpdated","_showStatus","_setStatus","prop","setCommentState","reviewID","commentID","commentType","prevStatus","removeClass","addClass","iconClass","BaseComment","STATE_VERIFYING_DROPPED","STATE_VERIFYING_RESOLVED","attr","hide","canVerify","push","filter","join","show","trigger","_onReopenClicked","STATE_OPEN","_onFixedClicked","comment","getComment","ready","requiresVerification","getAuthorUsername","UserSession","instance","get","STATE_RESOLVED","_onDropClicked","STATE_DROPPED","_onVerifyFixedClicked","_onVerifyDroppedClicked","oldIssueStatus","timestamp","id"],"sources":["../../../../../static/rb/js/views/commentIssueBarView.es6.js"],"sourcesContent":["/**\n * Manages a comment's issue status bar.\n *\n * The buttons on the bar will update the comment's issue status on the server\n * when clicked. The bar will update to reflect the issue status of any\n * comments tracked by the issue summary table.\n */\nRB.CommentIssueBarView = Backbone.View.extend({\n    events: {\n        'click .reopen': '_onReopenClicked',\n        'click .resolve': '_onFixedClicked',\n        'click .drop': '_onDropClicked',\n        'click .verify-dropped': '_onVerifyDroppedClicked',\n        'click .verify-resolved': '_onVerifyFixedClicked',\n    },\n\n    statusInfo: {\n        open: {\n            visibleButtons: ['.drop', '.resolve'],\n            text: gettext('An issue was opened.'),\n        },\n        resolved: {\n            visibleButtons: ['.reopen'],\n            text: gettext('The issue has been resolved.'),\n        },\n        dropped: {\n            visibleButtons: ['.reopen'],\n            text: gettext('The issue has been dropped.'),\n        },\n        'verifying-dropped': {\n            visibleButtons: ['.reopen'],\n            text: gettext('Waiting for verification before dropping...'),\n        },\n        'verifying-resolved': {\n            visibleButtons: ['.reopen'],\n            text: gettext('Waiting for verification before resolving...'),\n        },\n    },\n\n    template: _.template(dedent`\n        <div class=\"issue-state\">\n         <div class=\"issue-container\">\n          <span class=\"rb-icon\"></span>\n          <span class=\"issue-details\">\n           <span class=\"issue-message\"></span>\n           <% if (interactive) { %>\n            <span class=\"issue-actions\">\n             <input type=\"button\" class=\"issue-button resolve\"\n                    value=\"<%- fixedLabel %>\">\n             <input type=\"button\" class=\"issue-button drop\"\n                    value=\"<%- dropLabel %>\">\n             <input type=\"button\" class=\"issue-button reopen\"\n                    value=\"<%- reopenLabel %>\">\n             <input type=\"button\" class=\"issue-button verify-resolved\"\n                    value=\"<%- verifyFixedLabel %>\">\n             <input type=\"button\" class=\"issue-button verify-dropped\"\n                    value=\"<%- verifyDroppedLabel %>\">\n            </span>\n           <% } %>\n          </span>\n         </div>\n        </div>\n    `),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     canVerify (boolean):\n     *         Whether the user has permission to verify issues that require\n     *         it.\n     *\n     *     commentID (number):\n     *         The ID of the comment object.\n     *\n     *     commentIssueManager (RB.CommentIssueManager):\n     *         The issue manager.\n     *\n     *     commentType (string):\n     *         The type of comment being modified.\n     *\n     *     interactive (boolean):\n     *         Whether the comment issue bar is interactive or not.\n     *\n     *     issueStatus (string):\n     *         The current issue status.\n     *\n     *     reviewID (number):\n     *         The ID of the review that the comment is on.\n     */\n    initialize(options) {\n        this.options = options;\n\n        const page = RB.PageManager.getPage();\n\n        this._manager = (this.options.commentIssueManager ||\n                         page.model.commentIssueManager);\n        this._issueStatus = this.options.issueStatus;\n        this._$buttons = null;\n        this._$state = null;\n        this._$icon = null;\n        this._$message = null;\n    },\n\n    /**\n     * Render the issue status bar.\n     *\n     * Returns:\n     *     RB.CommentIssueBarView:\n     *     This object, for chaining.\n     */\n    render() {\n        if (this.$el.children().length === 0) {\n            this.$el.append(this.template({\n                interactive: this.options.interactive,\n                fixedLabel: gettext('Fixed'),\n                dropLabel: gettext('Drop'),\n                reopenLabel: gettext('Re-open'),\n                verifyDroppedLabel: gettext('Verify Dropped'),\n                verifyFixedLabel: gettext('Verify Fixed'),\n            }));\n        }\n\n        this._$buttons = this.$('.issue-button');\n        this._$state = this.$('.issue-state');\n        this._$icon = this.$('.rb-icon');\n        this._$message = this.$('.issue-message');\n\n        this._manager.on('issueStatusUpdated',\n                         this._onIssueStatusUpdated,\n                         this);\n        this._showStatus(this._issueStatus);\n\n        return this;\n    },\n\n    /**\n     * Set the issue status of the comment on the server.\n     *\n     * Args:\n     *     issueStatus (string):\n     *         The new issue status (one of ``open``, ``resolved``, or\n     *         ``dropped``).\n     */\n    _setStatus(issueStatus) {\n        this._$buttons.prop('disabled', true);\n        this._manager.setCommentState(this.options.reviewID,\n                                      this.options.commentID,\n                                      this.options.commentType,\n                                      issueStatus);\n    },\n\n    /**\n     * Show the current issue status of the comment.\n     *\n     * This will affect the button visibility and the text of the bar.\n     *\n     * Args:\n     *     issueStatus (string):\n     *         The issue status to show (one of ``open``, ``resolved``, or\n     *         ``dropped``).\n     */\n    _showStatus(issueStatus) {\n        const statusInfo = this.statusInfo[issueStatus];\n        const prevStatus = this._issueStatus;\n\n        this._issueStatus = issueStatus;\n\n        this._$state\n            .removeClass(prevStatus)\n            .addClass(issueStatus);\n\n        let iconClass;\n\n        if (issueStatus === RB.BaseComment.STATE_VERIFYING_DROPPED ||\n            issueStatus === RB.BaseComment.STATE_VERIFYING_RESOLVED) {\n            iconClass = 'rb-icon rb-icon-issue-verifying';\n        } else {\n            iconClass = `rb-icon rb-icon-issue-${issueStatus}`;\n        }\n\n        this._$icon.attr('class', iconClass);\n        this._$buttons.hide();\n        this._$message.text(statusInfo.text);\n\n        if (this.options.interactive) {\n            let visibleButtons = statusInfo.visibleButtons;\n\n            if (this.options.canVerify) {\n                if (issueStatus === RB.BaseComment.STATE_VERIFYING_DROPPED) {\n                    visibleButtons.push('.verify-dropped');\n                } else if (issueStatus ===\n                           RB.BaseComment.STATE_VERIFYING_RESOLVED) {\n                    visibleButtons.push('.verify-resolved');\n                }\n            }\n\n            this._$buttons.filter(visibleButtons.join(',')).show();\n            this._$buttons.prop('disabled', false);\n        }\n\n        this.trigger('statusChanged', prevStatus, issueStatus);\n    },\n\n    /**\n     * Handler for when \"Re-open\" is clicked.\n     *\n     * Reopens the issue.\n     */\n    _onReopenClicked() {\n        this._setStatus(RB.BaseComment.STATE_OPEN);\n    },\n\n    /**\n     * Handler for when \"Fixed\" is clicked.\n     *\n     * Marks the issue as fixed.\n     */\n    async _onFixedClicked() {\n        const comment = this._manager.getComment(this.options.reviewID,\n                                                 this.options.commentID,\n                                                 this.options.commentType);\n\n        await comment.ready();\n\n        if (comment.requiresVerification() &&\n            comment.getAuthorUsername() !==\n                RB.UserSession.instance.get('username')) {\n            this._setStatus(RB.BaseComment.STATE_VERIFYING_RESOLVED);\n        } else {\n            this._setStatus(RB.BaseComment.STATE_RESOLVED);\n        }\n    },\n\n    /**\n     * Handler for when \"Drop\" is clicked.\n     *\n     * Marks the issue as dropped.\n     */\n    async _onDropClicked() {\n        const comment = this._manager.getComment(this.options.reviewID,\n                                                 this.options.commentID,\n                                                 this.options.commentType);\n\n        await comment.ready();\n\n        if (comment.requiresVerification() &&\n            comment.getAuthorUsername() !==\n                RB.UserSession.instance.get('username')) {\n            this._setStatus(RB.BaseComment.STATE_VERIFYING_DROPPED);\n        } else {\n            this._setStatus(RB.BaseComment.STATE_DROPPED);\n        }\n    },\n\n    /**\n     * Handler for when \"Verify Fixed\" is clicked.\n     */\n    _onVerifyFixedClicked() {\n        this._setStatus(RB.BaseComment.STATE_RESOLVED);\n    },\n\n    /**\n     * Handler for when \"Verify Dropped\" is clicked.\n     */\n    _onVerifyDroppedClicked() {\n        this._setStatus(RB.BaseComment.STATE_DROPPED);\n    },\n\n    /**\n     * Handler for when the issue status for the comment changes.\n     *\n     * Updates the display to reflect the issue's current status.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment model that was updated.\n     *\n     *     oldIssueStatus (string, unused):\n     *         The old issue status.\n     *\n     *     timestamp (string, unused):\n     *         The timestamp of the update.\n     *\n     *     commentType (string):\n     *         The comment type that was updated.\n     *\n     *         Version Added:\n     *             4.0.8\n     */\n    _onIssueStatusUpdated(comment, oldIssueStatus, timestamp, commentType) {\n        const options = this.options;\n\n        if (comment.id === options.commentID &&\n            commentType === options.commentType) {\n            this._showStatus(comment.get('issueStatus'));\n        }\n    },\n});\n"],"mappings":"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"}