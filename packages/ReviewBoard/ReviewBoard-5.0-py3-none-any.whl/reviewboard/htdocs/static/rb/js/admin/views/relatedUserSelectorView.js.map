{"version":3,"file":"relatedUserSelectorView.js","names":["optionTemplate","_","template","RB","RelatedUserSelectorView","Djblets","RelatedObjectSelectorView","extend","searchPlaceholderText","initialize","options","prototype","call","defaults","selectizeOptions","searchField","sortField","field","valueField","_localSitePrefix","localSitePrefix","_useAvatars","useAvatars","renderOption","item","loadOptions","query","callback","params","fullname","length","q","$","ajax","type","url","SITE_ROOT","data","success","results","users","map","u","avatarHTML","avatar_html","id","username","error","args","console"],"sources":["../../../../../../static/rb/js/admin/views/relatedUserSelectorView.es6.js"],"sourcesContent":["(function() {\n\nconst optionTemplate = _.template(dedent`\n    <div>\n    <% if (useAvatars && avatarHTML) { %>\n     <%= avatarHTML %>\n    <% } %>\n    <% if (fullname) { %>\n     <span class=\"title\"><%- fullname %></span>\n     <span class=\"description\">(<%- username %>)</span>\n    <% } else { %>\n     <span class=\"title\"><%- username %></span>\n    <% } %>\n    </div>\n`);\n\n\n/**\n * A widget to select related users using search and autocomplete.\n */\nRB.RelatedUserSelectorView = Djblets.RelatedObjectSelectorView.extend({\n    searchPlaceholderText: gettext('Search for users...'),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     localSitePrefix (string):\n     *         The URL prefix for the local site, if any.\n     *\n     *     multivalued (boolean):\n     *         Whether or not the widget should allow selecting multuple\n     *         values.\n     *\n     *     useAvatars (boolean):\n     *         Whether to show avatars. Off by default.\n     */\n    initialize(options) {\n        Djblets.RelatedObjectSelectorView.prototype.initialize.call(\n            this,\n            _.defaults({\n                selectizeOptions: {\n                    searchField: ['fullname', 'username'],\n                    sortField: [\n                        {field: 'fullname'},\n                        {field: 'username'},\n                    ],\n                    valueField: 'username',\n                }\n            }, options));\n\n        this._localSitePrefix = options.localSitePrefix || '';\n        this._useAvatars = !!options.useAvatars;\n    },\n\n    /**\n     * Render an option in the drop-down menu.\n     *\n     * Args:\n     *     item (object):\n     *         The item to render.\n     *\n     * Returns:\n     *     string:\n     *     HTML to insert into the drop-down menu.\n     */\n    renderOption(item) {\n        return optionTemplate(_.extend(\n            { useAvatars: this._useAvatars },\n            item\n        ));\n    },\n\n    /**\n     * Load options from the server.\n     *\n     * Args:\n     *     query (string):\n     *         The string typed in by the user.\n     *\n     *     callback (function):\n     *         A callback to be called once data has been loaded. This should\n     *         be passed an array of objects, each representing an option in\n     *         the drop-down.\n     */\n    loadOptions(query, callback) {\n        const params = {\n            fullname: 1,\n            'only-fields': 'avatar_html,fullname,id,username',\n            'only-links': '',\n            'render-avatars-at': '20',\n        };\n\n        if (query.length !== 0) {\n            params.q = query;\n        }\n\n        $.ajax({\n            type: 'GET',\n            url: `${SITE_ROOT}${this._localSitePrefix}api/users/`,\n            data: params,\n            success(results) {\n                callback(results.users.map(u => ({\n                    avatarHTML: u.avatar_html[20],\n                    fullname: u.fullname,\n                    id: u.id,\n                    username: u.username,\n                })));\n            },\n            error(...args) {\n                console.error('User query failed', args);\n                callback();\n            },\n        });\n    },\n});\n\n\n})();\n"],"mappings":";;AAAA,CAAC,YAAW;EAEZ,MAAMA,cAAc,GAAGC,CAAC,CAACC,QAAF,CAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAVuB,CAAvB;EAeA;AACA;AACA;;;EACAC,EAAE,CAACC,uBAAH,GAA6BC,OAAO,CAACC,yBAAR,CAAkCC,MAAlC,CAAyC;IAClEC,qBAAqB,gCAD6C;;IAGlE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,UAAU,CAACC,OAAD,EAAU;MAChBL,OAAO,CAACC,yBAAR,CAAkCK,SAAlC,CAA4CF,UAA5C,CAAuDG,IAAvD,CACI,IADJ,EAEIX,CAAC,CAACY,QAAF,CAAW;QACPC,gBAAgB,EAAE;UACdC,WAAW,EAAE,CAAC,UAAD,EAAa,UAAb,CADC;UAEdC,SAAS,EAAE,CACP;YAACC,KAAK,EAAE;UAAR,CADO,EAEP;YAACA,KAAK,EAAE;UAAR,CAFO,CAFG;UAMdC,UAAU,EAAE;QANE;MADX,CAAX,EASGR,OATH,CAFJ;MAaA,KAAKS,gBAAL,GAAwBT,OAAO,CAACU,eAAR,IAA2B,EAAnD;MACA,KAAKC,WAAL,GAAmB,CAAC,CAACX,OAAO,CAACY,UAA7B;IACH,CArCiE;;IAuClE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,YAAY,CAACC,IAAD,EAAO;MACf,OAAOxB,cAAc,CAACC,CAAC,CAACM,MAAF,CAClB;QAAEe,UAAU,EAAE,KAAKD;MAAnB,CADkB,EAElBG,IAFkB,CAAD,CAArB;IAIH,CAvDiE;;IAyDlE;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIC,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkB;MACzB,MAAMC,MAAM,GAAG;QACXC,QAAQ,EAAE,CADC;QAEX,eAAe,kCAFJ;QAGX,cAAc,EAHH;QAIX,qBAAqB;MAJV,CAAf;;MAOA,IAAIH,KAAK,CAACI,MAAN,KAAiB,CAArB,EAAwB;QACpBF,MAAM,CAACG,CAAP,GAAWL,KAAX;MACH;;MAEDM,CAAC,CAACC,IAAF,CAAO;QACHC,IAAI,EAAE,KADH;QAEHC,GAAG,EAAG,GAAEC,SAAU,GAAE,KAAKjB,gBAAiB,YAFvC;QAGHkB,IAAI,EAAET,MAHH;;QAIHU,OAAO,CAACC,OAAD,EAAU;UACbZ,QAAQ,CAACY,OAAO,CAACC,KAAR,CAAcC,GAAd,CAAkBC,CAAC,KAAK;YAC7BC,UAAU,EAAED,CAAC,CAACE,WAAF,CAAc,EAAd,CADiB;YAE7Bf,QAAQ,EAAEa,CAAC,CAACb,QAFiB;YAG7BgB,EAAE,EAAEH,CAAC,CAACG,EAHuB;YAI7BC,QAAQ,EAAEJ,CAAC,CAACI;UAJiB,CAAL,CAAnB,CAAD,CAAR;QAMH,CAXE;;QAYHC,KAAK,GAAU;UAAA,kCAANC,IAAM;YAANA,IAAM;UAAA;;UACXC,OAAO,CAACF,KAAR,CAAc,mBAAd,EAAmCC,IAAnC;UACArB,QAAQ;QACX;;MAfE,CAAP;IAiBH;;EAlGiE,CAAzC,CAA7B;AAsGC,CA1HD"}