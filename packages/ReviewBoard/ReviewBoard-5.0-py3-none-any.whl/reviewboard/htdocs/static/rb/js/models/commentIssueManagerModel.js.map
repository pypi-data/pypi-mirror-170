{"version":3,"file":"commentIssueManagerModel.js","names":["RB","CommentIssueManager","Backbone","Model","extend","defaults","reviewRequest","initialize","_comments","setCommentState","reviewID","commentID","commentType","state","comment","getComment","_requestState","CommentTypes","get","DIFF","createReview","createDiffComment","id","SCREENSHOT","createScreenshotComment","FILE_ATTACHMENT","createFileAttachmentComment","GENERAL","createGeneralComment","console","error","ready","oldIssueStatus","set","rsp","save","attrs","_notifyIssueStatusChanged","rspComment","diff_comment","general_comment","file_attachment_comment","screenshot_comment","assert","trigger","timestamp"],"sources":["../../../../../static/rb/js/models/commentIssueManagerModel.es6.js"],"sourcesContent":["/**\n * Manages issue states for comments on a review request.\n *\n * CommentIssueManager takes care of setting the state of a particular\n * comment issue, and also takes care of notifying callbacks whenever\n * the state is successfully changed.\n *\n * Events:\n *     issueStatusUpdated:\n *         The issue status of a comment has changed.\n *\n *         Args:\n *             comment (RB.BaseComment):\n *                 The comment that changed.\n *\n *             oldIssueStatus (string):\n *                 The old issue status.\n *\n *             timestamp (string):\n *                 The latest timestamp for the comment.\n *\n *             commentType (string):\n *                 The comment type identifier (one of\n *                 :js:attr:`RB.CommentIssueManager.CommentTypes`).\n *\n *                 Version Added:\n *                     4.0.8\n */\nRB.CommentIssueManager = Backbone.Model.extend({\n    defaults: {\n        reviewRequest: null,\n    },\n\n    /**\n     * Initialize the model.\n     */\n    initialize() {\n        this._comments = {};\n    },\n\n    /**\n     * Set the state for a comment.\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review the comment belongs to.\n     *\n     *     commentID (number):\n     *         The ID of the comment.\n     *\n     *     commentType (string):\n     *         The type of the comment.\n     *\n     *     state (string):\n     *          The new state for the comment's issue. This will be one of\n     *          ``open``, ``resolved``, ``dropped``, or ``verify``.\n     */\n    setCommentState(reviewID, commentID, commentType, state) {\n        const comment = this.getComment(reviewID, commentID, commentType);\n        this._requestState(comment, state);\n    },\n\n    /**\n     * Retrieve the model for a given comment.\n     *\n     * This will either generate the appropriate comment object based on\n     * ``commentType``, or grab the comment from a cache if it's been generated\n     * before.\n     *\n     * Args:\n     *     reviewID (number):\n     *         The ID of the review the comment belongs to.\n     *\n     *     commentID (number):\n     *         The ID of the comment.\n     *\n     *     commentType (string):\n     *         The type of the comment.\n     *\n     * Returns:\n     *     RB.BaseComment:\n     *     The comment model.\n     */\n    getComment(reviewID, commentID, commentType) {\n        if (!this._comments[commentID]) {\n            const CommentTypes = RB.CommentIssueManager.CommentTypes;\n            const reviewRequest = this.get('reviewRequest');\n            let comment = null;\n\n            switch (commentType) {\n                case CommentTypes.DIFF:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createDiffComment({id: commentID});\n                    break;\n\n                case CommentTypes.SCREENSHOT:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createScreenshotComment(commentID);\n                    break;\n\n                case CommentTypes.FILE_ATTACHMENT:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createFileAttachmentComment(commentID);\n                    break;\n\n                case CommentTypes.GENERAL:\n                    comment = reviewRequest\n                        .createReview(reviewID)\n                        .createGeneralComment(commentID);\n                    break;\n\n                default:\n                    console.error(\n                        'getComment received unexpected comment type \"%s\"',\n                        commentType);\n            }\n\n            this._comments[commentID] = comment;\n        }\n\n        return this._comments[commentID];\n    },\n\n    /**\n     * Set the state of a comment.\n     *\n     * This will store the new state in the comment on the server, and then\n     * notify listeners of the latest comment information.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment to set the state of.\n     *\n     *     state (string):\n     *         The new issue state for the comment.\n     */\n    async _requestState(comment, state) {\n        await comment.ready();\n\n        const oldIssueStatus = comment.get('issueStatus');\n\n        comment.set('issueStatus', state);\n        const rsp = await comment.save({\n            attrs: ['issueStatus'],\n        });\n\n        this._notifyIssueStatusChanged(comment, rsp, oldIssueStatus);\n    },\n\n    /**\n     * Notify listeners that a comment's issue status changed.\n     *\n     * This will trigger the ``issueStatusUpdated`` event.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment instance that changed.\n     *\n     *     rsp (object):\n     *         The API response object from saving the comment.\n     *\n     *     oldIssueStatus (string):\n     *         The old issue status.\n     */\n    _notifyIssueStatusChanged(comment, rsp, oldIssueStatus) {\n        const CommentTypes = RB.CommentIssueManager.CommentTypes;\n        let rspComment;\n        let commentType;\n\n        if (rsp.diff_comment) {\n            rspComment = rsp.diff_comment;\n            commentType = CommentTypes.DIFF;\n        } else if (rsp.general_comment) {\n            rspComment = rsp.general_comment;\n            commentType = CommentTypes.GENERAL;\n        } else if (rsp.file_attachment_comment) {\n            rspComment = rsp.file_attachment_comment;\n            commentType = CommentTypes.FILE_ATTACHMENT;\n        } else if (rsp.screenshot_comment) {\n            rspComment = rsp.screenshot_comment;\n            commentType = CommentTypes.SCREENSHOT;\n        } else {\n            console.error(\n                'RB.CommentIssueManager._notifyIssueStatusChanged received ' +\n                'unexpected comment object \"%o\"',\n                rsp);\n            return;\n        }\n\n        console.assert(rspComment);\n        console.assert(commentType);\n\n        this.trigger('issueStatusUpdated', comment, oldIssueStatus,\n                     rspComment.timestamp, commentType);\n    },\n}, {\n    /**\n     * A mapping of comment type constants to values.\n     *\n     * The values should be considered opaque. Callers should use the constants\n     * instead.\n     *\n     * These are only used for functionality in this model and objects\n     * interfacing with this model. They should not be used as generic\n     * indicators for model classes.\n     *\n     * Version Added:\n     *     4.0.8\n     */\n    CommentTypes: {\n        DIFF: 'diff_comments',\n        FILE_ATTACHMENT: 'file_attachment_comments',\n        GENERAL: 'general_comments',\n        SCREENSHOT: 'screenshot_comments',\n    },\n\n    /**\n     * Notify listeners that a comment's issue status changed.\n     *\n     * This will trigger the ``issueStatusUpdated`` event.\n     *\n     * Args:\n     *     comment (RB.BaseComment):\n     *         The comment instance that changed.\n     *\n     *     rsp (object):\n     *         The API response object from saving the comment.\n     *\n     *     oldIssueStatus (string):\n     *         The old issue status.\n     */\n    _notifyIssueStatusChanged(comment, rsp, oldIssueStatus) {\n        const CommentTypes = RB.CommentIssueManager.CommentTypes;\n        let rspComment;\n        let commentType;\n\n        if (rsp.diff_comment) {\n            rspComment = rsp.diff_comment;\n            commentType = CommentTypes.DIFF;\n        } else if (rsp.general_comment) {\n            rspComment = rsp.general_comment;\n            commentType = CommentTypes.GENERAL;\n        } else if (rsp.file_attachment_comment) {\n            rspComment = rsp.file_attachment_comment;\n            commentType = CommentTypes.FILE_ATTACHMENT;\n        } else if (rsp.screenshot_comment) {\n            rspComment = rsp.screenshot_comment;\n            commentType = CommentTypes.SCREENSHOT;\n        } else {\n            console.error(\n                'RB.CommentIssueManager._notifyIssueStatusChanged received ' +\n                'unexpected comment object \"%o\"',\n                rsp);\n            return;\n        }\n\n        console.assert(rspComment);\n        console.assert(commentType);\n\n        this.trigger('issueStatusUpdated', comment, oldIssueStatus,\n                     rspComment.timestamp, commentType);\n    },\n}, {\n    /**\n     * A mapping of comment type constants to values.\n     *\n     * The values should be considered opaque. Callers should use the constants\n     * instead.\n     *\n     * These are only used for functionality in this model and objects\n     * interfacing with this model. They should not be used as generic\n     * indicators for model classes.\n     *\n     * Version Added:\n     *     4.0.8\n     */\n    CommentTypes: {\n        DIFF: 'diff_comments',\n        FILE_ATTACHMENT: 'file_attachment_comments',\n        GENERAL: 'general_comments',\n        SCREENSHOT: 'screenshot_comments',\n    },\n});\n"],"mappings":"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"}