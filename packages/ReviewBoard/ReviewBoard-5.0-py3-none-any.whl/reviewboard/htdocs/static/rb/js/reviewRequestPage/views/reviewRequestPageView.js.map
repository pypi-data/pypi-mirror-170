{"version":3,"file":"reviewRequestPageView.js","names":["commentTypeToIDPrefix","diff","file","screenshot","RB","ReviewRequestPage","ReviewRequestPageView","ReviewablePageView","extend","events","_","prototype","initialize","apply","arguments","_entryViews","_entryViewsByID","_rendered","_issueSummaryTableView","reviewRequest","model","get","diffFragmentQueue","DiffFragmentQueueView","reviewRequestPath","containerPrefix","queueName","el","document","getElementById","diffFragmentViewOptions","collapsible","listenTo","loadFragments","metadata","html","entryID","entryView","collapsed","isCollapsed","_onApplyingUpdate","listenToOnce","_reloadView","_onAppliedUpdate","collapse","expand","render","call","forEach","_onHashChanged","window","onhashchange","bind","IssueSummaryTableView","$","commentIssueManager","_onIssueClicked","addEntryView","entry","push","id","addEntry","queueLoadDiff","commentID","key","onFragmentRendered","queueLoad","openCommentEditor","contextType","contextID","i","length","reviewReplyEditorView","isFunction","getReviewReplyEditorView","view","$oldEl","$el","$newEl","setElement","replaceWith","beforeApplyUpdate","afterApplyUpdate","hash","getLocationHash","selector","includes","$anchor","scrollManager","scrollToElement","_onCollapseAllClicked","e","preventDefault","stopPropagation","_onExpandAllClicked","params","prefix","commentType","find","location","commentURL"],"sources":["../../../../../../static/rb/js/reviewRequestPage/views/reviewRequestPageView.es6.js"],"sourcesContent":["(function() {\n\n\nconst commentTypeToIDPrefix = {\n    diff: '',\n    file: 'f',\n    screenshot: 's',\n};\n\n\n/**\n * Manages the review request page.\n *\n * This manages all the reviews on the page, diff fragment loading, and\n * other functionality needed for the main review request page.\n */\nRB.ReviewRequestPage.ReviewRequestPageView = RB.ReviewablePageView.extend({\n    events: _.extend({\n        'click #collapse-all': '_onCollapseAllClicked',\n        'click #expand-all': '_onExpandAllClicked',\n    }, RB.ReviewablePageView.prototype.events),\n\n    /**\n     * Initialize the page.\n     */\n    initialize() {\n        RB.ReviewablePageView.prototype.initialize.apply(this, arguments);\n\n        this._entryViews = [];\n        this._entryViewsByID = {};\n        this._rendered = false;\n        this._issueSummaryTableView = null;\n\n        const reviewRequest = this.model.get('reviewRequest');\n\n        this.diffFragmentQueue = new RB.DiffFragmentQueueView({\n            reviewRequestPath: reviewRequest.get('reviewURL'),\n            containerPrefix: 'comment_container',\n            queueName: 'diff_fragments',\n            el: document.getElementById('content'),\n            diffFragmentViewOptions: {\n                collapsible: true,\n            },\n        });\n\n        /*\n         * Listen for when a new set of updates have been processed. After\n         * processing, this will attempt to load any new diff fragments that\n         * may have been added in any updated views.\n         */\n        this.listenTo(this.model, 'updatesProcessed',\n                      () => this.diffFragmentQueue.loadFragments());\n\n        /*\n         * Listen for updates to any entries on the page. When updated,\n         * we'll store the collapse state on the entry so we can re-apply it\n         * after. We listen to the other events that are part of the update so\n         * we can update the DOM and restore state at the correct time.\n         */\n        this.listenTo(this.model, 'applyingUpdate:entry', (metadata, html) => {\n            const entryID = metadata.entryID;\n            const entryView = this._entryViewsByID[entryID];\n            const collapsed = entryView.isCollapsed();\n\n            this._onApplyingUpdate(entryView, metadata);\n\n            this.listenToOnce(\n                this.model,\n                `appliedModelUpdate:entry:${entryID}`,\n                (metadata, html) => this._reloadView(entryView, html));\n\n            this.listenToOnce(\n                this.model,\n                `appliedUpdate:entry:${entryID}`,\n                metadata => {\n                    this._onAppliedUpdate(entryView, metadata);\n\n                    if (collapsed) {\n                        entryView.collapse();\n                    } else {\n                        entryView.expand();\n                    }\n                });\n        });\n    },\n\n    /**\n     * Render the page.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewRequestPageView:\n     *     This object, for chaining.\n     */\n    render() {\n        RB.ReviewablePageView.prototype.render.call(this);\n\n        /*\n         * Render each of the entries on the page.\n         */\n        this._entryViews.forEach(entryView => entryView.render());\n\n        /*\n         * Navigate to the right anchor on the page, if there's a valid hash\n         * in the URL. We'll also do this whenever it changes, if the browser\n         * supports this.\n         */\n        this._onHashChanged();\n\n        if ('onhashchange' in window) {\n            window.onhashchange = this._onHashChanged.bind(this);\n        }\n\n        /*\n         * Load all the diff fragments queued up in each review.\n         */\n        this.diffFragmentQueue.loadFragments();\n\n        /*\n         * Set up the Issue Summary Table and begin listening for related\n         * events.\n         */\n        this._issueSummaryTableView =\n            new RB.ReviewRequestPage.IssueSummaryTableView({\n                el: $('#issue-summary'),\n                model: this.model.commentIssueManager,\n            });\n\n        this._issueSummaryTableView.render();\n\n        this.listenTo(this._issueSummaryTableView,\n                      'issueClicked',\n                      this._onIssueClicked);\n        this.listenTo(this.model, 'appliedUpdate:issue-summary-table',\n                      (metadata, html) => {\n            this._reloadView(this._issueSummaryTableView, html);\n        });\n\n        this._rendered = true;\n\n        return this;\n    },\n\n    /**\n     * Add a new entry and view to the page.\n     *\n     * Args:\n     *     entryView (RB.ReviewRequestPage.EntryView):\n     *         The new entry's view to add.\n     */\n    addEntryView(entryView) {\n        const entry = entryView.model;\n\n        this._entryViews.push(entryView);\n        this._entryViewsByID[entry.id] = entryView;\n        this.model.addEntry(entry);\n\n        if (this._rendered) {\n            entryView.render();\n        }\n    },\n\n    /**\n     * Queue a diff fragment for loading.\n     *\n     * The diff fragment will be part of a comment made on a diff.\n     *\n     * Args:\n     *     commentID (string):\n     *         The ID of the comment to load the diff fragment for.\n     *\n     *     key (string):\n     *         Either a single filediff ID, or a pair (filediff ID and\n     *         interfilediff ID) separated by a hyphen.\n     *\n     *     onFragmentRendered (function, optional):\n     *         Optional callback for when the view for the fragment has\n     *         rendered. Contains the view as a parameter.\n     */\n    queueLoadDiff(commentID, key, onFragmentRendered) {\n        this.diffFragmentQueue.queueLoad(commentID, key, onFragmentRendered);\n    },\n\n    /**\n     * Open a comment editor for the given comment.\n     *\n     * This is used when clicking Reply from a comment dialog on another\n     * page.\n     *\n     * Args:\n     *     contextType (string):\n     *         The type of object being edited (such as ``body_top`` or\n     *         ``diff_comments``)\n     *\n     *     contextID (number, optional):\n     *         The ID of the comment being edited, if appropriate.\n     */\n    openCommentEditor(contextType, contextID) {\n        for (let i = 0; i < this._entryViews.length; i++) {\n            const entryView = this._entryViews[i];\n            const reviewReplyEditorView = (\n                _.isFunction(entryView.getReviewReplyEditorView)\n                ? entryView.getReviewReplyEditorView(contextType, contextID)\n                : null);\n\n            if (reviewReplyEditorView) {\n                reviewReplyEditorView.openCommentEditor();\n                break;\n            }\n        }\n    },\n\n    /**\n     * Reload the HTML for a view.\n     *\n     * This will replace the view's element with a new one consisting of the\n     * provided HTML. This is done in response to an update from the server.\n     *\n     * Args:\n     *     view (Backbone.View):\n     *         The view to set new HTML for.\n     *\n     *     html (string):\n     *         The new HTML to set.\n     */\n    _reloadView(view, html) {\n        const $oldEl = view.$el;\n        const $newEl = $(html);\n\n        view.setElement($newEl);\n        $oldEl.replaceWith($newEl);\n        view.render();\n    },\n\n    /**\n     * Handler for when a new update is being applied to a view.\n     *\n     * This will call the ``beforeApplyUpdate`` method on the view, if it\n     * exists. This is called before the model's equivalent handler.\n     *\n     * Args:\n     *     view (Backbone.View):\n     *         The view being updated.\n     *\n     *     metadata (object):\n     *         The metadata set in the update.\n     */\n    _onApplyingUpdate(view, metadata) {\n        if (view && _.isFunction(view.beforeApplyUpdate)) {\n            view.beforeApplyUpdate(metadata);\n        }\n    },\n\n    /**\n     * Handler for when a new update has been applied to a view.\n     *\n     * This will call the ``afterApplyUpdate`` method on the view, if it\n     * exists. This is called after the model's equivalent handler.\n     *\n     * Args:\n     *     view (Backbone.View):\n     *         The view that has been updated.\n     *\n     *     metadata (object):\n     *         The metadata set in the update.\n     */\n    _onAppliedUpdate(view, metadata) {\n        if (view && _.isFunction(view.afterApplyUpdate)) {\n            view.afterApplyUpdate(metadata);\n        }\n    },\n\n    /**\n     * Handler for when the location hash changes.\n     *\n     * This will attempt to locate a proper anchor point for the given\n     * hash, if one is provided, and scroll down to that anchor. The\n     * scrolling will take any docked floating banners (the review draft,\n     * specifically) into consideration to ensure the entirety of the comment\n     * is shown on-screen.\n     */\n    _onHashChanged() {\n        const hash = RB.getLocationHash();\n        let selector = null;\n\n        if (hash !== '') {\n            if (hash.includes('comment')) {\n                selector = `a[name=${hash}]`;\n            } else {\n                selector = `#${hash}`;\n            }\n        }\n\n        if (!selector) {\n            return;\n        }\n\n        /*\n         * If trying to link to some anchor in some entry, we'll expand the\n         * first entry containing that anchor.\n         */\n        for (let i = 0; i < this._entryViews.length; i++) {\n            const entryView = this._entryViews[i];\n            const $anchor = entryView.$(selector);\n\n            if ($anchor.length > 0) {\n                /*\n                 * We found the entry containing the specified anchor.\n                 * Expand it and stop searching the rest of the entries.\n                 */\n                entryView.expand();\n\n                /*\n                 * Scroll down to the particular anchor, now that the entry\n                 * is expanded.\n                 */\n                RB.scrollManager.scrollToElement($anchor);\n                break;\n            }\n        }\n    },\n\n    /**\n     * Handle a press on the Collapse All button.\n     *\n     * Collapses each entry.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onCollapseAllClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._entryViews.forEach(entryView => entryView.collapse());\n    },\n\n    /**\n     * Handle a press on the Expand All button.\n     *\n     * Expands each entry.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onExpandAllClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._entryViews.forEach(entryView => entryView.expand());\n    },\n\n    /**\n     * Handler for when an issue in the issue summary table is clicked.\n     *\n     * This will expand the review entry that contains the comment for the\n     * issue, and navigate to the comment.\n     *\n     * Args:\n     *     params (object):\n     *         Parameters passed to the event handler.\n     */\n    _onIssueClicked(params) {\n        const prefix = commentTypeToIDPrefix[params.commentType];\n        const selector = `#${prefix}comment${params.commentID}`;\n\n        this._entryViews.forEach(entryView => {\n            if (entryView.$el.find(selector).length > 0) {\n                entryView.expand();\n            }\n        });\n\n        window.location = params.commentURL;\n    },\n});\n\n\n})();\n"],"mappings":"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"}