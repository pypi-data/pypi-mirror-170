# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from rime_sdk.protos.grpc_web import grpc_web_pb2 as grpc__web_dot_grpc__web__pb2


class GRPCWebServiceStub(object):
    """
    ----- RESOLVED TEST CASE SERVICES -----
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ResolveTestCase = channel.unary_unary(
                '/rime.GRPCWebService/ResolveTestCase',
                request_serializer=grpc__web_dot_grpc__web__pb2.ResolveSingleTestCaseRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UnresolveTestCase = channel.unary_unary(
                '/rime.GRPCWebService/UnresolveTestCase',
                request_serializer=grpc__web_dot_grpc__web__pb2.ResolveSingleTestCaseRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ResolveAllTestCases = channel.unary_unary(
                '/rime.GRPCWebService/ResolveAllTestCases',
                request_serializer=grpc__web_dot_grpc__web__pb2.ResolveAllTestCasesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.UnresolveAllTestCases = channel.unary_unary(
                '/rime.GRPCWebService/UnresolveAllTestCases',
                request_serializer=grpc__web_dot_grpc__web__pb2.UnresolveAllTestCasesRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.AggregateTestRunResolvedTestCases = channel.unary_unary(
                '/rime.GRPCWebService/AggregateTestRunResolvedTestCases',
                request_serializer=grpc__web_dot_grpc__web__pb2.AggregateTestRunResolvedRequest.SerializeToString,
                response_deserializer=grpc__web_dot_grpc__web__pb2.AggregateTestRunResolvedResponse.FromString,
                )
        self.AggregateSingleTestResolvedTestCases = channel.unary_unary(
                '/rime.GRPCWebService/AggregateSingleTestResolvedTestCases',
                request_serializer=grpc__web_dot_grpc__web__pb2.AggregateSingleTestResolvedRequest.SerializeToString,
                response_deserializer=grpc__web_dot_grpc__web__pb2.AggregateSingleTestResolvedResponse.FromString,
                )
        self.GetTestConfig = channel.unary_unary(
                '/rime.GRPCWebService/GetTestConfig',
                request_serializer=grpc__web_dot_grpc__web__pb2.GetTestConfigRequest.SerializeToString,
                response_deserializer=grpc__web_dot_grpc__web__pb2.GetTestConfigResponse.FromString,
                )


class GRPCWebServiceServicer(object):
    """
    ----- RESOLVED TEST CASE SERVICES -----
    """

    def ResolveTestCase(self, request, context):
        """resolve single test case with a test case id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnresolveTestCase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResolveAllTestCases(self, request, context):
        """resolve all test cases of a test id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnresolveAllTestCases(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregateTestRunResolvedTestCases(self, request, context):
        """aggregate all resolved test cases for a test run in a list
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AggregateSingleTestResolvedTestCases(self, request, context):
        """aggregate resolved test cases for a single test in a map
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTestConfig(self, request, context):
        """
        ----- TEST CONFIG ----
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GRPCWebServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ResolveTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveTestCase,
                    request_deserializer=grpc__web_dot_grpc__web__pb2.ResolveSingleTestCaseRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UnresolveTestCase': grpc.unary_unary_rpc_method_handler(
                    servicer.UnresolveTestCase,
                    request_deserializer=grpc__web_dot_grpc__web__pb2.ResolveSingleTestCaseRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ResolveAllTestCases': grpc.unary_unary_rpc_method_handler(
                    servicer.ResolveAllTestCases,
                    request_deserializer=grpc__web_dot_grpc__web__pb2.ResolveAllTestCasesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'UnresolveAllTestCases': grpc.unary_unary_rpc_method_handler(
                    servicer.UnresolveAllTestCases,
                    request_deserializer=grpc__web_dot_grpc__web__pb2.UnresolveAllTestCasesRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'AggregateTestRunResolvedTestCases': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateTestRunResolvedTestCases,
                    request_deserializer=grpc__web_dot_grpc__web__pb2.AggregateTestRunResolvedRequest.FromString,
                    response_serializer=grpc__web_dot_grpc__web__pb2.AggregateTestRunResolvedResponse.SerializeToString,
            ),
            'AggregateSingleTestResolvedTestCases': grpc.unary_unary_rpc_method_handler(
                    servicer.AggregateSingleTestResolvedTestCases,
                    request_deserializer=grpc__web_dot_grpc__web__pb2.AggregateSingleTestResolvedRequest.FromString,
                    response_serializer=grpc__web_dot_grpc__web__pb2.AggregateSingleTestResolvedResponse.SerializeToString,
            ),
            'GetTestConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTestConfig,
                    request_deserializer=grpc__web_dot_grpc__web__pb2.GetTestConfigRequest.FromString,
                    response_serializer=grpc__web_dot_grpc__web__pb2.GetTestConfigResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rime.GRPCWebService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GRPCWebService(object):
    """
    ----- RESOLVED TEST CASE SERVICES -----
    """

    @staticmethod
    def ResolveTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.GRPCWebService/ResolveTestCase',
            grpc__web_dot_grpc__web__pb2.ResolveSingleTestCaseRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnresolveTestCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.GRPCWebService/UnresolveTestCase',
            grpc__web_dot_grpc__web__pb2.ResolveSingleTestCaseRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResolveAllTestCases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.GRPCWebService/ResolveAllTestCases',
            grpc__web_dot_grpc__web__pb2.ResolveAllTestCasesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnresolveAllTestCases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.GRPCWebService/UnresolveAllTestCases',
            grpc__web_dot_grpc__web__pb2.UnresolveAllTestCasesRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregateTestRunResolvedTestCases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.GRPCWebService/AggregateTestRunResolvedTestCases',
            grpc__web_dot_grpc__web__pb2.AggregateTestRunResolvedRequest.SerializeToString,
            grpc__web_dot_grpc__web__pb2.AggregateTestRunResolvedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AggregateSingleTestResolvedTestCases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.GRPCWebService/AggregateSingleTestResolvedTestCases',
            grpc__web_dot_grpc__web__pb2.AggregateSingleTestResolvedRequest.SerializeToString,
            grpc__web_dot_grpc__web__pb2.AggregateSingleTestResolvedResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTestConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.GRPCWebService/GetTestConfig',
            grpc__web_dot_grpc__web__pb2.GetTestConfigRequest.SerializeToString,
            grpc__web_dot_grpc__web__pb2.GetTestConfigResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
