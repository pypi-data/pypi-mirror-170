# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from rime_sdk.protos.test_run_results import test_run_results_pb2 as test__run__results_dot_test__run__results__pb2


class ResultsReaderStub(object):
    """ResultsReader is a service for querying test run results.
    Note: unfortunately, this includes methods for writing test run state.
    Changing the name of the service is difficult for backwards compatibility
    reasons so we are forced to keep it as ResultsReader.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetTestRun = channel.unary_unary(
                '/testrunresult.ResultsReader/GetTestRun',
                request_serializer=test__run__results_dot_test__run__results__pb2.GetTestRunRequest.SerializeToString,
                response_deserializer=test__run__results_dot_test__run__results__pb2.GetTestRunResponse.FromString,
                )
        self.ListTestRuns = channel.unary_unary(
                '/testrunresult.ResultsReader/ListTestRuns',
                request_serializer=test__run__results_dot_test__run__results__pb2.ListTestRunsRequest.SerializeToString,
                response_deserializer=test__run__results_dot_test__run__results__pb2.ListTestRunsResponse.FromString,
                )
        self.GetBatchResult = channel.unary_unary(
                '/testrunresult.ResultsReader/GetBatchResult',
                request_serializer=test__run__results_dot_test__run__results__pb2.GetBatchResultRequest.SerializeToString,
                response_deserializer=test__run__results_dot_test__run__results__pb2.GetBatchResultResponse.FromString,
                )
        self.ListBatchResults = channel.unary_unary(
                '/testrunresult.ResultsReader/ListBatchResults',
                request_serializer=test__run__results_dot_test__run__results__pb2.ListBatchResultsRequest.SerializeToString,
                response_deserializer=test__run__results_dot_test__run__results__pb2.ListBatchResultsResponse.FromString,
                )
        self.ListFeatureResults = channel.unary_unary(
                '/testrunresult.ResultsReader/ListFeatureResults',
                request_serializer=test__run__results_dot_test__run__results__pb2.ListFeatureResultsRequest.SerializeToString,
                response_deserializer=test__run__results_dot_test__run__results__pb2.ListFeatureResultsResponse.FromString,
                )
        self.ListTestCases = channel.unary_unary(
                '/testrunresult.ResultsReader/ListTestCases',
                request_serializer=test__run__results_dot_test__run__results__pb2.ListTestCasesRequest.SerializeToString,
                response_deserializer=test__run__results_dot_test__run__results__pb2.ListTestCasesResponse.FromString,
                )
        self.ListSummaryTests = channel.unary_unary(
                '/testrunresult.ResultsReader/ListSummaryTests',
                request_serializer=test__run__results_dot_test__run__results__pb2.ListSummaryTestsRequest.SerializeToString,
                response_deserializer=test__run__results_dot_test__run__results__pb2.ListSummaryTestsResponse.FromString,
                )
        self.DeleteTestRun = channel.unary_unary(
                '/testrunresult.ResultsReader/DeleteTestRun',
                request_serializer=test__run__results_dot_test__run__results__pb2.DeleteTestRunRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.RenameTestRun = channel.unary_unary(
                '/testrunresult.ResultsReader/RenameTestRun',
                request_serializer=test__run__results_dot_test__run__results__pb2.RenameTestRunRequest.SerializeToString,
                response_deserializer=test__run__results_dot_test__run__results__pb2.RenameTestRunResponse.FromString,
                )


class ResultsReaderServicer(object):
    """ResultsReader is a service for querying test run results.
    Note: unfortunately, this includes methods for writing test run state.
    Changing the name of the service is difficult for backwards compatibility
    reasons so we are forced to keep it as ResultsReader.
    """

    def GetTestRun(self, request, context):
        """GetTestRun

        Get the test run result detail with test run id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTestRuns(self, request, context):
        """ListTestRuns

        Paginated method for listing test runs belongs to a project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBatchResult(self, request, context):
        """GetBatchResult

        Get batch result with a test run id and a test type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBatchResults(self, request, context):
        """ListBatchResults

        Paginated method for listing batch results from a test run
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFeatureResults(self, request, context):
        """ListFeatureResults

        Paginated method for listing feature results from a test run
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTestCases(self, request, context):
        """ListTestCases

        Paginated method for listing the test cases of a test run, optional
        filter on test types are available.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSummaryTests(self, request, context):
        """ListSummaryTestRuns

        Paginated method for listing the the summary tests of a test run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTestRun(self, request, context):
        """DeleteTestRun

        DeleteTestRun hard deletes a test run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RenameTestRun(self, request, context):
        """RenameTestRun

        RenameTestRun updates a test run's name in the backend.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResultsReaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetTestRun': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTestRun,
                    request_deserializer=test__run__results_dot_test__run__results__pb2.GetTestRunRequest.FromString,
                    response_serializer=test__run__results_dot_test__run__results__pb2.GetTestRunResponse.SerializeToString,
            ),
            'ListTestRuns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTestRuns,
                    request_deserializer=test__run__results_dot_test__run__results__pb2.ListTestRunsRequest.FromString,
                    response_serializer=test__run__results_dot_test__run__results__pb2.ListTestRunsResponse.SerializeToString,
            ),
            'GetBatchResult': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBatchResult,
                    request_deserializer=test__run__results_dot_test__run__results__pb2.GetBatchResultRequest.FromString,
                    response_serializer=test__run__results_dot_test__run__results__pb2.GetBatchResultResponse.SerializeToString,
            ),
            'ListBatchResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBatchResults,
                    request_deserializer=test__run__results_dot_test__run__results__pb2.ListBatchResultsRequest.FromString,
                    response_serializer=test__run__results_dot_test__run__results__pb2.ListBatchResultsResponse.SerializeToString,
            ),
            'ListFeatureResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFeatureResults,
                    request_deserializer=test__run__results_dot_test__run__results__pb2.ListFeatureResultsRequest.FromString,
                    response_serializer=test__run__results_dot_test__run__results__pb2.ListFeatureResultsResponse.SerializeToString,
            ),
            'ListTestCases': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTestCases,
                    request_deserializer=test__run__results_dot_test__run__results__pb2.ListTestCasesRequest.FromString,
                    response_serializer=test__run__results_dot_test__run__results__pb2.ListTestCasesResponse.SerializeToString,
            ),
            'ListSummaryTests': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSummaryTests,
                    request_deserializer=test__run__results_dot_test__run__results__pb2.ListSummaryTestsRequest.FromString,
                    response_serializer=test__run__results_dot_test__run__results__pb2.ListSummaryTestsResponse.SerializeToString,
            ),
            'DeleteTestRun': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTestRun,
                    request_deserializer=test__run__results_dot_test__run__results__pb2.DeleteTestRunRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'RenameTestRun': grpc.unary_unary_rpc_method_handler(
                    servicer.RenameTestRun,
                    request_deserializer=test__run__results_dot_test__run__results__pb2.RenameTestRunRequest.FromString,
                    response_serializer=test__run__results_dot_test__run__results__pb2.RenameTestRunResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'testrunresult.ResultsReader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ResultsReader(object):
    """ResultsReader is a service for querying test run results.
    Note: unfortunately, this includes methods for writing test run state.
    Changing the name of the service is difficult for backwards compatibility
    reasons so we are forced to keep it as ResultsReader.
    """

    @staticmethod
    def GetTestRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/GetTestRun',
            test__run__results_dot_test__run__results__pb2.GetTestRunRequest.SerializeToString,
            test__run__results_dot_test__run__results__pb2.GetTestRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTestRuns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListTestRuns',
            test__run__results_dot_test__run__results__pb2.ListTestRunsRequest.SerializeToString,
            test__run__results_dot_test__run__results__pb2.ListTestRunsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBatchResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/GetBatchResult',
            test__run__results_dot_test__run__results__pb2.GetBatchResultRequest.SerializeToString,
            test__run__results_dot_test__run__results__pb2.GetBatchResultResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBatchResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListBatchResults',
            test__run__results_dot_test__run__results__pb2.ListBatchResultsRequest.SerializeToString,
            test__run__results_dot_test__run__results__pb2.ListBatchResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFeatureResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListFeatureResults',
            test__run__results_dot_test__run__results__pb2.ListFeatureResultsRequest.SerializeToString,
            test__run__results_dot_test__run__results__pb2.ListFeatureResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTestCases(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListTestCases',
            test__run__results_dot_test__run__results__pb2.ListTestCasesRequest.SerializeToString,
            test__run__results_dot_test__run__results__pb2.ListTestCasesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSummaryTests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/ListSummaryTests',
            test__run__results_dot_test__run__results__pb2.ListSummaryTestsRequest.SerializeToString,
            test__run__results_dot_test__run__results__pb2.ListSummaryTestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTestRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/DeleteTestRun',
            test__run__results_dot_test__run__results__pb2.DeleteTestRunRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RenameTestRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/testrunresult.ResultsReader/RenameTestRun',
            test__run__results_dot_test__run__results__pb2.RenameTestRunRequest.SerializeToString,
            test__run__results_dot_test__run__results__pb2.RenameTestRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
