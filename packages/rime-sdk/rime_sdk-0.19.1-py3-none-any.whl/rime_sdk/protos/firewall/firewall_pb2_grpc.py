# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rime_sdk.protos.firewall import firewall_pb2 as firewall_dot_firewall__pb2
from rime_sdk.protos.result_synthesizer import result_message_pb2 as result__synthesizer_dot_result__message__pb2


class FirewallServiceStub(object):
    """
    Service of endpoints for Firewall (Batch + Stream).
    Slightly redundant to call it "FirewallService" but Google Style guide does
    it.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateFirewallFromTestRunID = channel.unary_unary(
                '/rime.FirewallService/CreateFirewallFromTestRunID',
                request_serializer=firewall_dot_firewall__pb2.CreateFirewallFromTestRunIDRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.CreateFirewallResponse.FromString,
                )
        self.CreateFirewallFromComponents = channel.unary_unary(
                '/rime.FirewallService/CreateFirewallFromComponents',
                request_serializer=firewall_dot_firewall__pb2.CreateFirewallFromComponentsRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.CreateFirewallResponse.FromString,
                )
        self.UpdateFirewallTestRunID = channel.unary_unary(
                '/rime.FirewallService/UpdateFirewallTestRunID',
                request_serializer=firewall_dot_firewall__pb2.UpdateFirewallFromTestRunIDRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.UpdateFirewallResponse.FromString,
                )
        self.UpdateFirewallComponents = channel.unary_unary(
                '/rime.FirewallService/UpdateFirewallComponents',
                request_serializer=firewall_dot_firewall__pb2.UpdateFirewallComponentsRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.UpdateFirewallResponse.FromString,
                )
        self.DeleteFirewall = channel.unary_unary(
                '/rime.FirewallService/DeleteFirewall',
                request_serializer=firewall_dot_firewall__pb2.DeleteFirewallRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.DeleteFirewallResponse.FromString,
                )
        self.ListFirewalls = channel.unary_unary(
                '/rime.FirewallService/ListFirewalls',
                request_serializer=firewall_dot_firewall__pb2.ListFirewallsRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.ListFirewallsResponse.FromString,
                )
        self.ConvertIDs = channel.unary_unary(
                '/rime.FirewallService/ConvertIDs',
                request_serializer=firewall_dot_firewall__pb2.ConvertIDsRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.ConvertIDsResponse.FromString,
                )
        self.BatchResultMetadataUpload = channel.unary_unary(
                '/rime.FirewallService/BatchResultMetadataUpload',
                request_serializer=firewall_dot_firewall__pb2.BatchResultMetadataUploadRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.BatchResultMetadataUploadResponse.FromString,
                )
        self.ListAggregateIssues = channel.unary_stream(
                '/rime.FirewallService/ListAggregateIssues',
                request_serializer=firewall_dot_firewall__pb2.ListAggregateIssuesRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.ListAggregateIssuesResponse.FromString,
                )
        self.GetServiceMetrics = channel.unary_unary(
                '/rime.FirewallService/GetServiceMetrics',
                request_serializer=firewall_dot_firewall__pb2.GetServiceMetricsRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.GetServiceMetricsResponse.FromString,
                )
        self.ListBatchSummaries = channel.unary_stream(
                '/rime.FirewallService/ListBatchSummaries',
                request_serializer=firewall_dot_firewall__pb2.ListBatchSummariesRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.ListBatchSummariesResponse.FromString,
                )
        self.ListBatchDetails = channel.unary_stream(
                '/rime.FirewallService/ListBatchDetails',
                request_serializer=firewall_dot_firewall__pb2.ListBatchDetailsRequest.SerializeToString,
                response_deserializer=result__synthesizer_dot_result__message__pb2.Chunk.FromString,
                )
        self.GetModelStatus = channel.unary_unary(
                '/rime.FirewallService/GetModelStatus',
                request_serializer=firewall_dot_firewall__pb2.GetModelStatusRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.GetModelStatusResponse.FromString,
                )
        self.ListLatestModelStatuses = channel.unary_unary(
                '/rime.FirewallService/ListLatestModelStatuses',
                request_serializer=firewall_dot_firewall__pb2.ListLatestModelStatusesRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.ListLatestModelStatusesResponse.FromString,
                )
        self.GetSummaryTimes = channel.unary_unary(
                '/rime.FirewallService/GetSummaryTimes',
                request_serializer=firewall_dot_firewall__pb2.GetSummaryTimesRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.GetSummaryTimesResponse.FromString,
                )
        self.ListOTCliConfigs = channel.unary_stream(
                '/rime.FirewallService/ListOTCliConfigs',
                request_serializer=firewall_dot_firewall__pb2.ListOTCliConfigsRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.ListOTCliConfigsResponse.FromString,
                )
        self.StoreDatapointResults = channel.stream_unary(
                '/rime.FirewallService/StoreDatapointResults',
                request_serializer=firewall_dot_firewall__pb2.StoreDatapointResultRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.StoreDatapointResultsResponse.FromString,
                )
        self.StoreDatapointBins = channel.stream_unary(
                '/rime.FirewallService/StoreDatapointBins',
                request_serializer=firewall_dot_firewall__pb2.StoreDatapointBinsRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.StoreDatapointBinsResponse.FromString,
                )
        self.ListDatapointBins = channel.unary_stream(
                '/rime.FirewallService/ListDatapointBins',
                request_serializer=firewall_dot_firewall__pb2.ListDatapointBinsRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.ListDatapointBinsResponse.FromString,
                )
        self.ListDatapointResultSummaries = channel.unary_unary(
                '/rime.FirewallService/ListDatapointResultSummaries',
                request_serializer=firewall_dot_firewall__pb2.ListDatapointResultSummariesRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.ListDatapointResultSummariesResponse.FromString,
                )
        self.ListDatapointResultDetails = channel.unary_unary(
                '/rime.FirewallService/ListDatapointResultDetails',
                request_serializer=firewall_dot_firewall__pb2.ListDatapointResultDetailsRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.ListDatapointResultDetailsResponse.FromString,
                )
        self.ListOTFirewallRules = channel.unary_stream(
                '/rime.FirewallService/ListOTFirewallRules',
                request_serializer=firewall_dot_firewall__pb2.ListOTFirewallRulesRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.ListOTFirewallRulesResponse.FromString,
                )
        self.CleanupCTTestRun = channel.unary_unary(
                '/rime.FirewallService/CleanupCTTestRun',
                request_serializer=firewall_dot_firewall__pb2.CleanupCTTestRunRequest.SerializeToString,
                response_deserializer=firewall_dot_firewall__pb2.CleanupCTTestRunResponse.FromString,
                )


class FirewallServiceServicer(object):
    """
    Service of endpoints for Firewall (Batch + Stream).
    Slightly redundant to call it "FirewallService" but Google Style guide does
    it.
    """

    def CreateFirewallFromTestRunID(self, request, context):
        """CreateFirewallFromTestRunID

        Creates a Firewall instance in BE/DB based on a specified stress test
        run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateFirewallFromComponents(self, request, context):
        """CreateFirewallFromComponents

        Creates a Firewall instance in BE/DB based on the provided user-defined
        components (config, rules, thresholds)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFirewallTestRunID(self, request, context):
        """UpdateFirewallTestRunID

        Updates an existing Firewall instance in the BE/DB based on a stress test
        run. This overwrites the CLIConfig, rules, and thresholds based on those
        configured from that run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateFirewallComponents(self, request, context):
        """UpdateFirewallComponents

        Updates an existing Firewall instance in the BE/DB based on the explicit
        user-defined configuration. All provided values will be used to overwrite
        the corresponding values in the BE/DB.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteFirewall(self, request, context):
        """DeleteFirewall deletes a Firewall instance in BE/DB.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFirewalls(self, request, context):
        """ListFirewalls

        Lists multiple Firewall instances.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConvertIDs(self, request, context):
        """ConvertIDs

        Converts between mapped IDs.
        Currently the relationship is 1 ProjectID : 1 FirewallID.
        Therefore, the ID mapping conversion will occur frequently,
        especially since to simplify the UX we only expose ProjectID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchResultMetadataUpload(self, request, context):
        """BatchResultMetadataUpload upload metadata for firewall batch test runs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAggregateIssues(self, request, context):
        """ListAggregateIssues lists multiple Batch TestRun aggregate issues fetched
        from DB.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServiceMetrics(self, request, context):
        """GetServiceMetrics gets service metrics associated with a firewall
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBatchSummaries(self, request, context):
        """ListBatchSummaries lists multiple Batch TestRun Summaries from fetched
        from DB.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBatchDetails(self, request, context):
        """ListBatchDetails fetches a Batch Firewall TestRun's Details from DB.
        This endpoint is used for drilldown so the access is limited to 1 Details
        per request. Reason for keeping at 1 per request is because the size of
        Details is large. This returns a stream of byte chunks due to limitation
        in gRPC per-message size. We serialize/deserialize the actual message
        using a proto message before/after sending the chunks.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelStatus(self, request, context):
        """GetModelStatus returns the model status for the corresponding test run.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListLatestModelStatuses(self, request, context):
        """ListLatestModelStatuses returns the latest model status for multiple firewalls.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSummaryTimes(self, request, context):
        """GetSummaryTimes gets the Earliest/Latest Times for Batch/Datapoint
        Summaries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOTCliConfigs(self, request, context):
        """ListOTCliConfigs fetches a list of Stress Test's CLIConfigs needed for
        Batch FW computation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreDatapointResults(self, request_iterator, context):
        """StoreDatapointResults stores multiple FW Results.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreDatapointBins(self, request_iterator, context):
        """StoreDatapointResults stores multiple FW Results.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatapointBins(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatapointResultSummaries(self, request, context):
        """ListDatapointResultSummaries lists a page of FW summaries based on
        request. This may request for a specific single Summary using requestID.
        This may also request for multiple Summaries using TimeRange.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDatapointResultDetails(self, request, context):
        """ListDatapointResultDetails fetches a single FW Details.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListOTFirewallRules(self, request, context):
        """ListOTFirewallRules fetches a list of Stress Test Firewall Rules needed
        for Batch FW.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CleanupCTTestRun(self, request, context):
        """Cleanup CT Test Run
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FirewallServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateFirewallFromTestRunID': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFirewallFromTestRunID,
                    request_deserializer=firewall_dot_firewall__pb2.CreateFirewallFromTestRunIDRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.CreateFirewallResponse.SerializeToString,
            ),
            'CreateFirewallFromComponents': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateFirewallFromComponents,
                    request_deserializer=firewall_dot_firewall__pb2.CreateFirewallFromComponentsRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.CreateFirewallResponse.SerializeToString,
            ),
            'UpdateFirewallTestRunID': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFirewallTestRunID,
                    request_deserializer=firewall_dot_firewall__pb2.UpdateFirewallFromTestRunIDRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.UpdateFirewallResponse.SerializeToString,
            ),
            'UpdateFirewallComponents': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateFirewallComponents,
                    request_deserializer=firewall_dot_firewall__pb2.UpdateFirewallComponentsRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.UpdateFirewallResponse.SerializeToString,
            ),
            'DeleteFirewall': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteFirewall,
                    request_deserializer=firewall_dot_firewall__pb2.DeleteFirewallRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.DeleteFirewallResponse.SerializeToString,
            ),
            'ListFirewalls': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFirewalls,
                    request_deserializer=firewall_dot_firewall__pb2.ListFirewallsRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.ListFirewallsResponse.SerializeToString,
            ),
            'ConvertIDs': grpc.unary_unary_rpc_method_handler(
                    servicer.ConvertIDs,
                    request_deserializer=firewall_dot_firewall__pb2.ConvertIDsRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.ConvertIDsResponse.SerializeToString,
            ),
            'BatchResultMetadataUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchResultMetadataUpload,
                    request_deserializer=firewall_dot_firewall__pb2.BatchResultMetadataUploadRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.BatchResultMetadataUploadResponse.SerializeToString,
            ),
            'ListAggregateIssues': grpc.unary_stream_rpc_method_handler(
                    servicer.ListAggregateIssues,
                    request_deserializer=firewall_dot_firewall__pb2.ListAggregateIssuesRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.ListAggregateIssuesResponse.SerializeToString,
            ),
            'GetServiceMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServiceMetrics,
                    request_deserializer=firewall_dot_firewall__pb2.GetServiceMetricsRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.GetServiceMetricsResponse.SerializeToString,
            ),
            'ListBatchSummaries': grpc.unary_stream_rpc_method_handler(
                    servicer.ListBatchSummaries,
                    request_deserializer=firewall_dot_firewall__pb2.ListBatchSummariesRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.ListBatchSummariesResponse.SerializeToString,
            ),
            'ListBatchDetails': grpc.unary_stream_rpc_method_handler(
                    servicer.ListBatchDetails,
                    request_deserializer=firewall_dot_firewall__pb2.ListBatchDetailsRequest.FromString,
                    response_serializer=result__synthesizer_dot_result__message__pb2.Chunk.SerializeToString,
            ),
            'GetModelStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelStatus,
                    request_deserializer=firewall_dot_firewall__pb2.GetModelStatusRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.GetModelStatusResponse.SerializeToString,
            ),
            'ListLatestModelStatuses': grpc.unary_unary_rpc_method_handler(
                    servicer.ListLatestModelStatuses,
                    request_deserializer=firewall_dot_firewall__pb2.ListLatestModelStatusesRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.ListLatestModelStatusesResponse.SerializeToString,
            ),
            'GetSummaryTimes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSummaryTimes,
                    request_deserializer=firewall_dot_firewall__pb2.GetSummaryTimesRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.GetSummaryTimesResponse.SerializeToString,
            ),
            'ListOTCliConfigs': grpc.unary_stream_rpc_method_handler(
                    servicer.ListOTCliConfigs,
                    request_deserializer=firewall_dot_firewall__pb2.ListOTCliConfigsRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.ListOTCliConfigsResponse.SerializeToString,
            ),
            'StoreDatapointResults': grpc.stream_unary_rpc_method_handler(
                    servicer.StoreDatapointResults,
                    request_deserializer=firewall_dot_firewall__pb2.StoreDatapointResultRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.StoreDatapointResultsResponse.SerializeToString,
            ),
            'StoreDatapointBins': grpc.stream_unary_rpc_method_handler(
                    servicer.StoreDatapointBins,
                    request_deserializer=firewall_dot_firewall__pb2.StoreDatapointBinsRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.StoreDatapointBinsResponse.SerializeToString,
            ),
            'ListDatapointBins': grpc.unary_stream_rpc_method_handler(
                    servicer.ListDatapointBins,
                    request_deserializer=firewall_dot_firewall__pb2.ListDatapointBinsRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.ListDatapointBinsResponse.SerializeToString,
            ),
            'ListDatapointResultSummaries': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatapointResultSummaries,
                    request_deserializer=firewall_dot_firewall__pb2.ListDatapointResultSummariesRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.ListDatapointResultSummariesResponse.SerializeToString,
            ),
            'ListDatapointResultDetails': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDatapointResultDetails,
                    request_deserializer=firewall_dot_firewall__pb2.ListDatapointResultDetailsRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.ListDatapointResultDetailsResponse.SerializeToString,
            ),
            'ListOTFirewallRules': grpc.unary_stream_rpc_method_handler(
                    servicer.ListOTFirewallRules,
                    request_deserializer=firewall_dot_firewall__pb2.ListOTFirewallRulesRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.ListOTFirewallRulesResponse.SerializeToString,
            ),
            'CleanupCTTestRun': grpc.unary_unary_rpc_method_handler(
                    servicer.CleanupCTTestRun,
                    request_deserializer=firewall_dot_firewall__pb2.CleanupCTTestRunRequest.FromString,
                    response_serializer=firewall_dot_firewall__pb2.CleanupCTTestRunResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rime.FirewallService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FirewallService(object):
    """
    Service of endpoints for Firewall (Batch + Stream).
    Slightly redundant to call it "FirewallService" but Google Style guide does
    it.
    """

    @staticmethod
    def CreateFirewallFromTestRunID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/CreateFirewallFromTestRunID',
            firewall_dot_firewall__pb2.CreateFirewallFromTestRunIDRequest.SerializeToString,
            firewall_dot_firewall__pb2.CreateFirewallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateFirewallFromComponents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/CreateFirewallFromComponents',
            firewall_dot_firewall__pb2.CreateFirewallFromComponentsRequest.SerializeToString,
            firewall_dot_firewall__pb2.CreateFirewallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateFirewallTestRunID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/UpdateFirewallTestRunID',
            firewall_dot_firewall__pb2.UpdateFirewallFromTestRunIDRequest.SerializeToString,
            firewall_dot_firewall__pb2.UpdateFirewallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateFirewallComponents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/UpdateFirewallComponents',
            firewall_dot_firewall__pb2.UpdateFirewallComponentsRequest.SerializeToString,
            firewall_dot_firewall__pb2.UpdateFirewallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteFirewall(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/DeleteFirewall',
            firewall_dot_firewall__pb2.DeleteFirewallRequest.SerializeToString,
            firewall_dot_firewall__pb2.DeleteFirewallResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFirewalls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/ListFirewalls',
            firewall_dot_firewall__pb2.ListFirewallsRequest.SerializeToString,
            firewall_dot_firewall__pb2.ListFirewallsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConvertIDs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/ConvertIDs',
            firewall_dot_firewall__pb2.ConvertIDsRequest.SerializeToString,
            firewall_dot_firewall__pb2.ConvertIDsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchResultMetadataUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/BatchResultMetadataUpload',
            firewall_dot_firewall__pb2.BatchResultMetadataUploadRequest.SerializeToString,
            firewall_dot_firewall__pb2.BatchResultMetadataUploadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAggregateIssues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rime.FirewallService/ListAggregateIssues',
            firewall_dot_firewall__pb2.ListAggregateIssuesRequest.SerializeToString,
            firewall_dot_firewall__pb2.ListAggregateIssuesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServiceMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/GetServiceMetrics',
            firewall_dot_firewall__pb2.GetServiceMetricsRequest.SerializeToString,
            firewall_dot_firewall__pb2.GetServiceMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBatchSummaries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rime.FirewallService/ListBatchSummaries',
            firewall_dot_firewall__pb2.ListBatchSummariesRequest.SerializeToString,
            firewall_dot_firewall__pb2.ListBatchSummariesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBatchDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rime.FirewallService/ListBatchDetails',
            firewall_dot_firewall__pb2.ListBatchDetailsRequest.SerializeToString,
            result__synthesizer_dot_result__message__pb2.Chunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/GetModelStatus',
            firewall_dot_firewall__pb2.GetModelStatusRequest.SerializeToString,
            firewall_dot_firewall__pb2.GetModelStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListLatestModelStatuses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/ListLatestModelStatuses',
            firewall_dot_firewall__pb2.ListLatestModelStatusesRequest.SerializeToString,
            firewall_dot_firewall__pb2.ListLatestModelStatusesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSummaryTimes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/GetSummaryTimes',
            firewall_dot_firewall__pb2.GetSummaryTimesRequest.SerializeToString,
            firewall_dot_firewall__pb2.GetSummaryTimesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListOTCliConfigs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rime.FirewallService/ListOTCliConfigs',
            firewall_dot_firewall__pb2.ListOTCliConfigsRequest.SerializeToString,
            firewall_dot_firewall__pb2.ListOTCliConfigsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreDatapointResults(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/rime.FirewallService/StoreDatapointResults',
            firewall_dot_firewall__pb2.StoreDatapointResultRequest.SerializeToString,
            firewall_dot_firewall__pb2.StoreDatapointResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreDatapointBins(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/rime.FirewallService/StoreDatapointBins',
            firewall_dot_firewall__pb2.StoreDatapointBinsRequest.SerializeToString,
            firewall_dot_firewall__pb2.StoreDatapointBinsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDatapointBins(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rime.FirewallService/ListDatapointBins',
            firewall_dot_firewall__pb2.ListDatapointBinsRequest.SerializeToString,
            firewall_dot_firewall__pb2.ListDatapointBinsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDatapointResultSummaries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/ListDatapointResultSummaries',
            firewall_dot_firewall__pb2.ListDatapointResultSummariesRequest.SerializeToString,
            firewall_dot_firewall__pb2.ListDatapointResultSummariesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDatapointResultDetails(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/ListDatapointResultDetails',
            firewall_dot_firewall__pb2.ListDatapointResultDetailsRequest.SerializeToString,
            firewall_dot_firewall__pb2.ListDatapointResultDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListOTFirewallRules(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rime.FirewallService/ListOTFirewallRules',
            firewall_dot_firewall__pb2.ListOTFirewallRulesRequest.SerializeToString,
            firewall_dot_firewall__pb2.ListOTFirewallRulesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CleanupCTTestRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FirewallService/CleanupCTTestRun',
            firewall_dot_firewall__pb2.CleanupCTTestRunRequest.SerializeToString,
            firewall_dot_firewall__pb2.CleanupCTTestRunResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
