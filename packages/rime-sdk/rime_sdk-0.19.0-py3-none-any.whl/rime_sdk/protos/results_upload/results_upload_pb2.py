# autogenerated
# mypy: ignore-errors
# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: results_upload/results_upload.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n#results_upload/results_upload.proto\x12\x04rime\x1a\x1bgoogle/protobuf/empty.proto\"3\n\x0bUploadChunk\x12\x0c\n\x04\x64\x61ta\x18\x01 \x01(\x0c\x12\x12\n\nproject_id\x18\x02 \x01(\t:\x02\x18\x01\x32W\n\x0cResultsStore\x12G\n\x13UploadFirewallRules\x12\x11.rime.UploadChunk\x1a\x16.google.protobuf.Empty\"\x03\x88\x02\x01(\x01\x42\x1eZ\x1cri/_gen/protos/resultsuploadb\x06proto3')



_UPLOADCHUNK = DESCRIPTOR.message_types_by_name['UploadChunk']
UploadChunk = _reflection.GeneratedProtocolMessageType('UploadChunk', (_message.Message,), {
  'DESCRIPTOR' : _UPLOADCHUNK,
  '__module__' : 'rime_sdk.protos.results_upload.results_upload_pb2'
  # @@protoc_insertion_point(class_scope:rime.UploadChunk)
  })
_sym_db.RegisterMessage(UploadChunk)

_RESULTSSTORE = DESCRIPTOR.services_by_name['ResultsStore']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'Z\034ri/_gen/protos/resultsupload'
  _UPLOADCHUNK._options = None
  _UPLOADCHUNK._serialized_options = b'\030\001'
  _RESULTSSTORE.methods_by_name['UploadFirewallRules']._options = None
  _RESULTSSTORE.methods_by_name['UploadFirewallRules']._serialized_options = b'\210\002\001'
  _UPLOADCHUNK._serialized_start=74
  _UPLOADCHUNK._serialized_end=125
  _RESULTSSTORE._serialized_start=127
  _RESULTSSTORE._serialized_end=214
# @@protoc_insertion_point(module_scope)
