# autogenerated
# mypy: ignore-errors
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rime_sdk.protos.file_scanning import file_scanning_pb2 as file__scanning_dot_file__scanning__pb2


class FileScanningStub(object):
    """Service for scanning ML Model files in RIME.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartFileScan = channel.unary_unary(
                '/rime.FileScanning/StartFileScan',
                request_serializer=file__scanning_dot_file__scanning__pb2.StartFileScanRequest.SerializeToString,
                response_deserializer=file__scanning_dot_file__scanning__pb2.StartFileScanResponse.FromString,
                )
        self.ListFileScanResults = channel.unary_unary(
                '/rime.FileScanning/ListFileScanResults',
                request_serializer=file__scanning_dot_file__scanning__pb2.ListFileScanResultsRequest.SerializeToString,
                response_deserializer=file__scanning_dot_file__scanning__pb2.ListFileScanResultsResponse.FromString,
                )


class FileScanningServicer(object):
    """Service for scanning ML Model files in RIME.
    """

    def StartFileScan(self, request, context):
        """StartFileScan

        Starts a job to scan the specified file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFileScanResults(self, request, context):
        """ListFileScanResults

        Paginated method for listing the file scan results.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileScanningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartFileScan': grpc.unary_unary_rpc_method_handler(
                    servicer.StartFileScan,
                    request_deserializer=file__scanning_dot_file__scanning__pb2.StartFileScanRequest.FromString,
                    response_serializer=file__scanning_dot_file__scanning__pb2.StartFileScanResponse.SerializeToString,
            ),
            'ListFileScanResults': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFileScanResults,
                    request_deserializer=file__scanning_dot_file__scanning__pb2.ListFileScanResultsRequest.FromString,
                    response_serializer=file__scanning_dot_file__scanning__pb2.ListFileScanResultsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rime.FileScanning', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileScanning(object):
    """Service for scanning ML Model files in RIME.
    """

    @staticmethod
    def StartFileScan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FileScanning/StartFileScan',
            file__scanning_dot_file__scanning__pb2.StartFileScanRequest.SerializeToString,
            file__scanning_dot_file__scanning__pb2.StartFileScanResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListFileScanResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rime.FileScanning/ListFileScanResults',
            file__scanning_dot_file__scanning__pb2.ListFileScanResultsRequest.SerializeToString,
            file__scanning_dot_file__scanning__pb2.ListFileScanResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
