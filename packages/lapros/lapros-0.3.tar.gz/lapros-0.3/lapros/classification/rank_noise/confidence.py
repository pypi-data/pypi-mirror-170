# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/25-classification-confidence.ipynb.

# %% auto 0
__all__ = ['suspect']

# %% ../../../nbs/25-classification-confidence.ipynb 2
import numpy as np
import pandas as pd
from loguru import logger
from scipy.sparse import coo_matrix

# %% ../../../nbs/25-classification-confidence.ipynb 16
def confident_gap(
    *,
    probas: np.ndarray,
    likeliests: np.ndarray,
    labels: np.ndarray,
    return_non_errors: bool = False,  # True to return all rows, including non-errors
) -> pd.DataFrame:
    """
    ##### Return

    The gap between prediction probabilities for the likeliest class and the given label.
    """
    from scipy.sparse import lil_matrix
    from lapros.classification.estimate_noise import est_noise_mask

    n, m_class = probas.shape
    e = lil_matrix((n, 1))
    noise_mask = est_noise_mask(likeliests=likeliests, labels=labels)
    logger.debug(noise_mask)
    # TODO: make the loop below faster
    for k in np.arange(n)[np.where(noise_mask)]:
        e[k, 0] = probas[k, likeliests[k]] - probas[k, labels[k]]
        logger.debug(
            f"""k = {k}
            likely {likeliests[k]}, proba {probas[k, likeliests[k]]}
            label  {labels[k]}, proba {probas[k, labels[k]]}
            gap = {e[k,0]}
        """
        )
    # logger.debug(e)
    coo = e.tocoo()
    id = coo.row
    err = coo.data
    # logger.debug(id)
    # logger.debug(err)
    err_df = pd.DataFrame(dict(id=id, err=err)).set_index("id")
    logger.debug(err_df)
    if not return_non_errors:
        return err_df

    df_fr = pd.DataFrame(0, index=np.arange(len(labels)), columns=["err"])
    df_fr.loc[err_df.index, "err"] = err_df.err
    logger.debug(df_fr)
    assert len(df_fr) == len(labels)
    return df_fr

# %% ../../../nbs/25-classification-confidence.ipynb 18
def suspect(
    probas: np.ndarray,  # probabilities
    # *, # turn of keyword arguments due to nbdev show_doc bug
    labels: np.ndarray,  # observed labels
    return_non_errors: bool = False,  # True to return all rows, including non-errors
) -> np.ndarray:
    "The internal method to rank the suspicious labels given probas from a classifier."
    # logger.debug(f"Shape of labels and probas: {labels.shape} vs {probas.shape}")
    from lapros.classification.estimate_noise import (
        avg_confidence,
        find_likeliests,
    )

    assert len(labels) == len(probas)
    assert (probas >= 0).all() and (
        probas <= 1
    ).all()  # probas should be between 0 and 1

    thress = avg_confidence(probas=probas, labels=labels)
    likeliests = find_likeliests(thress=thress, probas=probas)
    err_df = confident_gap(
        probas=probas - thress,
        likeliests=likeliests,
        labels=labels,
        return_non_errors=return_non_errors,
    )
    if return_non_errors:
        err_df.loc[:, "suspected"] = err_df.err > 0
        assert len(err_df) == len(labels)
    return err_df
