# coding: utf-8

"""
    Getir-Locals Integration Swagger Documentation

    This documentation is created by Getir Developers for Getir-Locals Integration.For this integration, you need to take CLIENT NAME and CLIENT SECRET keys from Getir-dev team and use these keys for authentication. You also need to use access token provided after successful login to be able to use all other endpoints  You can view information about the active order through /orders/unapproved endpoints. The status of the order is managed via verify, prepare, handover and cancel endpoints. Details on order management are as follows:  For orders to be made by the Getir courier, the flow is as follows:  Supplier confirms order --verify<br />Supplier prepares order --prepare (1-2 minutes must pass before delivery)<br />Supplier hands over the order to Getir courier --handover<br />For Getir delivery, transactions are made by the Getir courier after handover.  A valid reason will be requested from the supplier to cancel an order. Valid reasons may vary depending on the instant status of the order. For this reason, before canceling an order, you have to get instant valid order cancellation reasons from /orders/{orderId}/cancel-options endpoint.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SupplierProductResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'str',
        'brand': 'str',
        'type': 'str',
        'name': 'str',
        'images': 'list[str]',
        'description': 'str',
        'catalog_sub_category_name': 'str',
        'catalog_category_name': 'str',
        'vendor_id': 'str',
        'barcodes': 'list[str]'
    }

    attribute_map = {
        'product_id': 'productId',
        'brand': 'brand',
        'type': 'type',
        'name': 'name',
        'images': 'images',
        'description': 'description',
        'catalog_sub_category_name': 'catalogSubCategoryName',
        'catalog_category_name': 'catalogCategoryName',
        'vendor_id': 'vendorId',
        'barcodes': 'barcodes'
    }

    def __init__(self, product_id=None, brand=None, type=None, name=None, images=None, description=None, catalog_sub_category_name=None, catalog_category_name=None, vendor_id=None, barcodes=None):  # noqa: E501
        """SupplierProductResponse - a model defined in Swagger"""  # noqa: E501
        self._product_id = None
        self._brand = None
        self._type = None
        self._name = None
        self._images = None
        self._description = None
        self._catalog_sub_category_name = None
        self._catalog_category_name = None
        self._vendor_id = None
        self._barcodes = None
        self.discriminator = None
        if product_id is not None:
            self.product_id = product_id
        if brand is not None:
            self.brand = brand
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if images is not None:
            self.images = images
        if description is not None:
            self.description = description
        if catalog_sub_category_name is not None:
            self.catalog_sub_category_name = catalog_sub_category_name
        if catalog_category_name is not None:
            self.catalog_category_name = catalog_category_name
        if vendor_id is not None:
            self.vendor_id = vendor_id
        if barcodes is not None:
            self.barcodes = barcodes

    @property
    def product_id(self):
        """Gets the product_id of this SupplierProductResponse.  # noqa: E501


        :return: The product_id of this SupplierProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this SupplierProductResponse.


        :param product_id: The product_id of this SupplierProductResponse.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def brand(self):
        """Gets the brand of this SupplierProductResponse.  # noqa: E501


        :return: The brand of this SupplierProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this SupplierProductResponse.


        :param brand: The brand of this SupplierProductResponse.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def type(self):
        """Gets the type of this SupplierProductResponse.  # noqa: E501


        :return: The type of this SupplierProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SupplierProductResponse.


        :param type: The type of this SupplierProductResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["COUNT", "GR", "LT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def name(self):
        """Gets the name of this SupplierProductResponse.  # noqa: E501


        :return: The name of this SupplierProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SupplierProductResponse.


        :param name: The name of this SupplierProductResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def images(self):
        """Gets the images of this SupplierProductResponse.  # noqa: E501


        :return: The images of this SupplierProductResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this SupplierProductResponse.


        :param images: The images of this SupplierProductResponse.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    @property
    def description(self):
        """Gets the description of this SupplierProductResponse.  # noqa: E501


        :return: The description of this SupplierProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SupplierProductResponse.


        :param description: The description of this SupplierProductResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def catalog_sub_category_name(self):
        """Gets the catalog_sub_category_name of this SupplierProductResponse.  # noqa: E501


        :return: The catalog_sub_category_name of this SupplierProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._catalog_sub_category_name

    @catalog_sub_category_name.setter
    def catalog_sub_category_name(self, catalog_sub_category_name):
        """Sets the catalog_sub_category_name of this SupplierProductResponse.


        :param catalog_sub_category_name: The catalog_sub_category_name of this SupplierProductResponse.  # noqa: E501
        :type: str
        """

        self._catalog_sub_category_name = catalog_sub_category_name

    @property
    def catalog_category_name(self):
        """Gets the catalog_category_name of this SupplierProductResponse.  # noqa: E501


        :return: The catalog_category_name of this SupplierProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._catalog_category_name

    @catalog_category_name.setter
    def catalog_category_name(self, catalog_category_name):
        """Sets the catalog_category_name of this SupplierProductResponse.


        :param catalog_category_name: The catalog_category_name of this SupplierProductResponse.  # noqa: E501
        :type: str
        """

        self._catalog_category_name = catalog_category_name

    @property
    def vendor_id(self):
        """Gets the vendor_id of this SupplierProductResponse.  # noqa: E501


        :return: The vendor_id of this SupplierProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._vendor_id

    @vendor_id.setter
    def vendor_id(self, vendor_id):
        """Sets the vendor_id of this SupplierProductResponse.


        :param vendor_id: The vendor_id of this SupplierProductResponse.  # noqa: E501
        :type: str
        """

        self._vendor_id = vendor_id

    @property
    def barcodes(self):
        """Gets the barcodes of this SupplierProductResponse.  # noqa: E501


        :return: The barcodes of this SupplierProductResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._barcodes

    @barcodes.setter
    def barcodes(self, barcodes):
        """Sets the barcodes of this SupplierProductResponse.


        :param barcodes: The barcodes of this SupplierProductResponse.  # noqa: E501
        :type: list[str]
        """

        self._barcodes = barcodes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupplierProductResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupplierProductResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
