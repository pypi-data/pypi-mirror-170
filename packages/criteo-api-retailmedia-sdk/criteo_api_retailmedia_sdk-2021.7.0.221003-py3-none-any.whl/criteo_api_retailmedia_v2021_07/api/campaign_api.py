"""
    Criteo API

    Criteo publicly exposed API  # noqa: E501

    The version of the OpenAPI document: 2021-07
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from criteo_api_retailmedia_v2021_07.api_client import ApiClient, Endpoint as _Endpoint
from criteo_api_retailmedia_v2021_07.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from criteo_api_retailmedia_v2021_07.model.auction_line_item_create_model_request import AuctionLineItemCreateModelRequest
from criteo_api_retailmedia_v2021_07.model.auction_line_item_paged_list_response import AuctionLineItemPagedListResponse
from criteo_api_retailmedia_v2021_07.model.auction_line_item_response import AuctionLineItemResponse
from criteo_api_retailmedia_v2021_07.model.auction_line_item_update_model_request import AuctionLineItemUpdateModelRequest
from criteo_api_retailmedia_v2021_07.model.common_line_item_paged_list_response import CommonLineItemPagedListResponse
from criteo_api_retailmedia_v2021_07.model.common_line_item_response import CommonLineItemResponse
from criteo_api_retailmedia_v2021_07.model.external_post_campaign import ExternalPostCampaign
from criteo_api_retailmedia_v2021_07.model.external_put_campaign import ExternalPutCampaign
from criteo_api_retailmedia_v2021_07.model.json_api_page_response_of_account import JsonApiPageResponseOfAccount
from criteo_api_retailmedia_v2021_07.model.json_api_page_response_of_brand import JsonApiPageResponseOfBrand
from criteo_api_retailmedia_v2021_07.model.json_api_page_response_of_campaign import JsonApiPageResponseOfCampaign
from criteo_api_retailmedia_v2021_07.model.json_api_page_response_of_retailer import JsonApiPageResponseOfRetailer
from criteo_api_retailmedia_v2021_07.model.json_api_request_of_catalog_request import JsonApiRequestOfCatalogRequest
from criteo_api_retailmedia_v2021_07.model.json_api_single_response_of_campaign import JsonApiSingleResponseOfCampaign
from criteo_api_retailmedia_v2021_07.model.json_api_single_response_of_catalog_status import JsonApiSingleResponseOfCatalogStatus


class CampaignApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_api_v1_external_account_brands_by_account_id(
            self,
            account_id,
            **kwargs
        ):
            """get_api_v1_external_account_brands_by_account_id  # noqa: E501

            Gets page of retailer objects that are associated with the given account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v1_external_account_brands_by_account_id(account_id, async_req=True)
            >>> result = thread.get()

            Args:
                account_id (str): The given account id

            Keyword Args:
                limit_to_id ([str]): The ids that you would like to limit your result set to. [optional]
                page_index (int): The 0 indexed page index you would like to receive given the page size. [optional]
                page_size (int): The maximum number of items you would like to receive in this request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JsonApiPageResponseOfBrand
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_id'] = \
                account_id
            return self.call_with_http_info(**kwargs)

        self.get_api_v1_external_account_brands_by_account_id = _Endpoint(
            settings={
                'response_type': (JsonApiPageResponseOfBrand,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/accounts/{accountId}/brands',
                'operation_id': 'get_api_v1_external_account_brands_by_account_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit_to_id',
                    'page_index',
                    'page_size',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'limit_to_id':
                        ([str],),
                    'page_index':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'limit_to_id': 'limitToId',
                    'page_index': 'pageIndex',
                    'page_size': 'pageSize',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit_to_id': 'query',
                    'page_index': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                    'limit_to_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v1_external_account_brands_by_account_id
        )

        def __get_api_v1_external_account_campaigns_by_account_id(
            self,
            account_id,
            **kwargs
        ):
            """get_api_v1_external_account_campaigns_by_account_id  # noqa: E501

            Gets page of campaign objects for the given account id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v1_external_account_campaigns_by_account_id(account_id, async_req=True)
            >>> result = thread.get()

            Args:
                account_id (str): The given account id

            Keyword Args:
                limit_to_id ([str]): The ids that you would like to limit your result set to. [optional]
                page_index (int): The 0 indexed page index you would like to receive given the page size. [optional]
                page_size (int): The maximum number of items you would like to receive in this request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JsonApiPageResponseOfCampaign
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_id'] = \
                account_id
            return self.call_with_http_info(**kwargs)

        self.get_api_v1_external_account_campaigns_by_account_id = _Endpoint(
            settings={
                'response_type': (JsonApiPageResponseOfCampaign,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/accounts/{accountId}/campaigns',
                'operation_id': 'get_api_v1_external_account_campaigns_by_account_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit_to_id',
                    'page_index',
                    'page_size',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'limit_to_id':
                        ([str],),
                    'page_index':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'limit_to_id': 'limitToId',
                    'page_index': 'pageIndex',
                    'page_size': 'pageSize',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit_to_id': 'query',
                    'page_index': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                    'limit_to_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v1_external_account_campaigns_by_account_id
        )

        def __get_api_v1_external_account_retailers_by_account_id(
            self,
            account_id,
            **kwargs
        ):
            """get_api_v1_external_account_retailers_by_account_id  # noqa: E501

            Gets page of retailer objects that are associated with the given account  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v1_external_account_retailers_by_account_id(account_id, async_req=True)
            >>> result = thread.get()

            Args:
                account_id (str): The given account id

            Keyword Args:
                limit_to_id ([str]): The ids that you would like to limit your result set to. [optional]
                page_index (int): The 0 indexed page index you would like to receive given the page size. [optional]
                page_size (int): The maximum number of items you would like to receive in this request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JsonApiPageResponseOfRetailer
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_id'] = \
                account_id
            return self.call_with_http_info(**kwargs)

        self.get_api_v1_external_account_retailers_by_account_id = _Endpoint(
            settings={
                'response_type': (JsonApiPageResponseOfRetailer,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/accounts/{accountId}/retailers',
                'operation_id': 'get_api_v1_external_account_retailers_by_account_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit_to_id',
                    'page_index',
                    'page_size',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'limit_to_id':
                        ([str],),
                    'page_index':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'limit_to_id': 'limitToId',
                    'page_index': 'pageIndex',
                    'page_size': 'pageSize',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit_to_id': 'query',
                    'page_index': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                    'limit_to_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v1_external_account_retailers_by_account_id
        )

        def __get_api_v1_external_accounts(
            self,
            **kwargs
        ):
            """get_api_v1_external_accounts  # noqa: E501

            Gets page of account objects that the current user can access  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v1_external_accounts(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                limit_to_id ([str]): The ids that you would like to limit your result set to. [optional]
                page_index (int): The 0 indexed page index you would like to receive given the page size. [optional]
                page_size (int): The maximum number of items you would like to receive in this request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JsonApiPageResponseOfAccount
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_api_v1_external_accounts = _Endpoint(
            settings={
                'response_type': (JsonApiPageResponseOfAccount,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/accounts',
                'operation_id': 'get_api_v1_external_accounts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'limit_to_id',
                    'page_index',
                    'page_size',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'limit_to_id':
                        ([str],),
                    'page_index':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'limit_to_id': 'limitToId',
                    'page_index': 'pageIndex',
                    'page_size': 'pageSize',
                },
                'location_map': {
                    'limit_to_id': 'query',
                    'page_index': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                    'limit_to_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v1_external_accounts
        )

        def __get_api_v1_external_campaign_by_campaign_id(
            self,
            campaign_id,
            **kwargs
        ):
            """get_api_v1_external_campaign_by_campaign_id  # noqa: E501

            Gets the campaign for the given campaign id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v1_external_campaign_by_campaign_id(campaign_id, async_req=True)
            >>> result = thread.get()

            Args:
                campaign_id (str): The given campaign id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JsonApiSingleResponseOfCampaign
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['campaign_id'] = \
                campaign_id
            return self.call_with_http_info(**kwargs)

        self.get_api_v1_external_campaign_by_campaign_id = _Endpoint(
            settings={
                'response_type': (JsonApiSingleResponseOfCampaign,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/campaigns/{campaignId}',
                'operation_id': 'get_api_v1_external_campaign_by_campaign_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'campaign_id',
                ],
                'required': [
                    'campaign_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'campaign_id':
                        (str,),
                },
                'attribute_map': {
                    'campaign_id': 'campaignId',
                },
                'location_map': {
                    'campaign_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v1_external_campaign_by_campaign_id
        )

        def __get_api_v1_external_catalog_output_by_catalog_id(
            self,
            catalog_id,
            **kwargs
        ):
            """get_api_v1_external_catalog_output_by_catalog_id  # noqa: E501

            Output the indicated catalog. Catalogs are only available for retrieval when their associated status request  is at a Success status.  Produces application/x-json-stream of v2021_07 CatalogProduct json objects.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v1_external_catalog_output_by_catalog_id(catalog_id, async_req=True)
            >>> result = thread.get()

            Args:
                catalog_id (str): A catalog ID returned from an account catalog request.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['catalog_id'] = \
                catalog_id
            return self.call_with_http_info(**kwargs)

        self.get_api_v1_external_catalog_output_by_catalog_id = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/catalogs/{catalogId}/output',
                'operation_id': 'get_api_v1_external_catalog_output_by_catalog_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog_id',
                ],
                'required': [
                    'catalog_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog_id':
                        (str,),
                },
                'attribute_map': {
                    'catalog_id': 'catalogId',
                },
                'location_map': {
                    'catalog_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/x-json-stream',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v1_external_catalog_output_by_catalog_id
        )

        def __get_api_v1_external_catalog_status_by_catalog_id(
            self,
            catalog_id,
            **kwargs
        ):
            """get_api_v1_external_catalog_status_by_catalog_id  # noqa: E501

            Check the status of a catalog request.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v1_external_catalog_status_by_catalog_id(catalog_id, async_req=True)
            >>> result = thread.get()

            Args:
                catalog_id (str): A catalog ID returned from an account catalog request.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JsonApiSingleResponseOfCatalogStatus
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['catalog_id'] = \
                catalog_id
            return self.call_with_http_info(**kwargs)

        self.get_api_v1_external_catalog_status_by_catalog_id = _Endpoint(
            settings={
                'response_type': (JsonApiSingleResponseOfCatalogStatus,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/catalogs/{catalogId}/status',
                'operation_id': 'get_api_v1_external_catalog_status_by_catalog_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'catalog_id',
                ],
                'required': [
                    'catalog_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'catalog_id':
                        (str,),
                },
                'attribute_map': {
                    'catalog_id': 'catalogId',
                },
                'location_map': {
                    'catalog_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v1_external_catalog_status_by_catalog_id
        )

        def __get_api_v2_external_account_line_items_by_account_id(
            self,
            account_id,
            **kwargs
        ):
            """get_api_v2_external_account_line_items_by_account_id  # noqa: E501

            Gets page of line item objects for the given account id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v2_external_account_line_items_by_account_id(account_id, async_req=True)
            >>> result = thread.get()

            Args:
                account_id (str): The given account id

            Keyword Args:
                limit_to_campaign_id ([str]): The campaign ids that you would like to limit your result set to. [optional]
                limit_to_type (str): The campaign types that you would like to limit your result set to. [optional]
                limit_to_id ([str]): The ids that you would like to limit your result set to. [optional]
                page_index (int): The 0 indexed page index you would like to receive given the page size. [optional]
                page_size (int): The maximum number of items you would like to receive in this request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CommonLineItemPagedListResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_id'] = \
                account_id
            return self.call_with_http_info(**kwargs)

        self.get_api_v2_external_account_line_items_by_account_id = _Endpoint(
            settings={
                'response_type': (CommonLineItemPagedListResponse,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/accounts/{account-id}/line-items',
                'operation_id': 'get_api_v2_external_account_line_items_by_account_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'limit_to_campaign_id',
                    'limit_to_type',
                    'limit_to_id',
                    'page_index',
                    'page_size',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'limit_to_type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('limit_to_type',): {

                        "UNKNOWN": "Unknown",
                        "AUCTION": "Auction",
                        "PREFERRED": "Preferred"
                    },
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'limit_to_campaign_id':
                        ([str],),
                    'limit_to_type':
                        (str,),
                    'limit_to_id':
                        ([str],),
                    'page_index':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'account_id': 'account-id',
                    'limit_to_campaign_id': 'limitToCampaignId',
                    'limit_to_type': 'limitToType',
                    'limit_to_id': 'limitToId',
                    'page_index': 'pageIndex',
                    'page_size': 'pageSize',
                },
                'location_map': {
                    'account_id': 'path',
                    'limit_to_campaign_id': 'query',
                    'limit_to_type': 'query',
                    'limit_to_id': 'query',
                    'page_index': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                    'limit_to_campaign_id': 'multi',
                    'limit_to_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v2_external_account_line_items_by_account_id
        )

        def __get_api_v2_external_auction_line_item_by_line_item_id(
            self,
            line_item_id,
            **kwargs
        ):
            """get_api_v2_external_auction_line_item_by_line_item_id  # noqa: E501

            Gets the auction line item for the given line item id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v2_external_auction_line_item_by_line_item_id(line_item_id, async_req=True)
            >>> result = thread.get()

            Args:
                line_item_id (str): The given line item id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AuctionLineItemResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['line_item_id'] = \
                line_item_id
            return self.call_with_http_info(**kwargs)

        self.get_api_v2_external_auction_line_item_by_line_item_id = _Endpoint(
            settings={
                'response_type': (AuctionLineItemResponse,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/auction-line-items/{line-item-id}',
                'operation_id': 'get_api_v2_external_auction_line_item_by_line_item_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'line_item_id',
                ],
                'required': [
                    'line_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'line_item_id':
                        (str,),
                },
                'attribute_map': {
                    'line_item_id': 'line-item-id',
                },
                'location_map': {
                    'line_item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v2_external_auction_line_item_by_line_item_id
        )

        def __get_api_v2_external_campaign_auction_line_items_by_campaign_id(
            self,
            campaign_id,
            **kwargs
        ):
            """get_api_v2_external_campaign_auction_line_items_by_campaign_id  # noqa: E501

            Gets page of auction line item objects for the given campaign id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v2_external_campaign_auction_line_items_by_campaign_id(campaign_id, async_req=True)
            >>> result = thread.get()

            Args:
                campaign_id (str): The given campaign id

            Keyword Args:
                limit_to_id ([str]): The ids that you would like to limit your result set to. [optional]
                page_index (int): The 0 indexed page index you would like to receive given the page size. [optional]
                page_size (int): The maximum number of items you would like to receive in this request. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AuctionLineItemPagedListResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['campaign_id'] = \
                campaign_id
            return self.call_with_http_info(**kwargs)

        self.get_api_v2_external_campaign_auction_line_items_by_campaign_id = _Endpoint(
            settings={
                'response_type': (AuctionLineItemPagedListResponse,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/campaigns/{campaign-id}/auction-line-items',
                'operation_id': 'get_api_v2_external_campaign_auction_line_items_by_campaign_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'campaign_id',
                    'limit_to_id',
                    'page_index',
                    'page_size',
                ],
                'required': [
                    'campaign_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'campaign_id':
                        (str,),
                    'limit_to_id':
                        ([str],),
                    'page_index':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'campaign_id': 'campaign-id',
                    'limit_to_id': 'limitToId',
                    'page_index': 'pageIndex',
                    'page_size': 'pageSize',
                },
                'location_map': {
                    'campaign_id': 'path',
                    'limit_to_id': 'query',
                    'page_index': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                    'limit_to_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v2_external_campaign_auction_line_items_by_campaign_id
        )

        def __get_api_v2_external_line_item_by_line_item_id(
            self,
            line_item_id,
            **kwargs
        ):
            """get_api_v2_external_line_item_by_line_item_id  # noqa: E501

            Gets the line item for the given line item id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_api_v2_external_line_item_by_line_item_id(line_item_id, async_req=True)
            >>> result = thread.get()

            Args:
                line_item_id (str): The given line item id

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CommonLineItemResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['line_item_id'] = \
                line_item_id
            return self.call_with_http_info(**kwargs)

        self.get_api_v2_external_line_item_by_line_item_id = _Endpoint(
            settings={
                'response_type': (CommonLineItemResponse,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/line-items/{line-item-id}',
                'operation_id': 'get_api_v2_external_line_item_by_line_item_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'line_item_id',
                ],
                'required': [
                    'line_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'line_item_id':
                        (str,),
                },
                'attribute_map': {
                    'line_item_id': 'line-item-id',
                },
                'location_map': {
                    'line_item_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_api_v2_external_line_item_by_line_item_id
        )

        def __post_api_v1_external_account_campaigns_by_account_id(
            self,
            account_id,
            **kwargs
        ):
            """post_api_v1_external_account_campaigns_by_account_id  # noqa: E501

            Creates a new campaign with the specified settings  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_api_v1_external_account_campaigns_by_account_id(account_id, async_req=True)
            >>> result = thread.get()

            Args:
                account_id (str): The given account id

            Keyword Args:
                external_post_campaign (ExternalPostCampaign): The campaign settings to create a campaign with. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JsonApiSingleResponseOfCampaign
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_id'] = \
                account_id
            return self.call_with_http_info(**kwargs)

        self.post_api_v1_external_account_campaigns_by_account_id = _Endpoint(
            settings={
                'response_type': (JsonApiSingleResponseOfCampaign,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/accounts/{accountId}/campaigns',
                'operation_id': 'post_api_v1_external_account_campaigns_by_account_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'external_post_campaign',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'external_post_campaign':
                        (ExternalPostCampaign,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                },
                'location_map': {
                    'account_id': 'path',
                    'external_post_campaign': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_api_v1_external_account_campaigns_by_account_id
        )

        def __post_api_v1_external_account_catalogs_by_account_id(
            self,
            account_id,
            **kwargs
        ):
            """post_api_v1_external_account_catalogs_by_account_id  # noqa: E501

            Create a request for a Catalog available to the indicated account.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_api_v1_external_account_catalogs_by_account_id(account_id, async_req=True)
            >>> result = thread.get()

            Args:
                account_id (str): The account to request the catalog for.

            Keyword Args:
                json_api_request_of_catalog_request (JsonApiRequestOfCatalogRequest): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JsonApiSingleResponseOfCatalogStatus
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['account_id'] = \
                account_id
            return self.call_with_http_info(**kwargs)

        self.post_api_v1_external_account_catalogs_by_account_id = _Endpoint(
            settings={
                'response_type': (JsonApiSingleResponseOfCatalogStatus,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/accounts/{accountId}/catalogs',
                'operation_id': 'post_api_v1_external_account_catalogs_by_account_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'json_api_request_of_catalog_request',
                ],
                'required': [
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'json_api_request_of_catalog_request':
                        (JsonApiRequestOfCatalogRequest,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                },
                'location_map': {
                    'account_id': 'path',
                    'json_api_request_of_catalog_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_api_v1_external_account_catalogs_by_account_id
        )

        def __post_api_v2_external_campaign_auction_line_items_by_campaign_id(
            self,
            campaign_id,
            **kwargs
        ):
            """post_api_v2_external_campaign_auction_line_items_by_campaign_id  # noqa: E501

            Creates new auction line item with the specified settings  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.post_api_v2_external_campaign_auction_line_items_by_campaign_id(campaign_id, async_req=True)
            >>> result = thread.get()

            Args:
                campaign_id (str): The given campaign id

            Keyword Args:
                auction_line_item_create_model_request (AuctionLineItemCreateModelRequest): The line item settings to create a line item with. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AuctionLineItemResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['campaign_id'] = \
                campaign_id
            return self.call_with_http_info(**kwargs)

        self.post_api_v2_external_campaign_auction_line_items_by_campaign_id = _Endpoint(
            settings={
                'response_type': (AuctionLineItemResponse,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/campaigns/{campaign-id}/auction-line-items',
                'operation_id': 'post_api_v2_external_campaign_auction_line_items_by_campaign_id',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'campaign_id',
                    'auction_line_item_create_model_request',
                ],
                'required': [
                    'campaign_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'campaign_id':
                        (str,),
                    'auction_line_item_create_model_request':
                        (AuctionLineItemCreateModelRequest,),
                },
                'attribute_map': {
                    'campaign_id': 'campaign-id',
                },
                'location_map': {
                    'campaign_id': 'path',
                    'auction_line_item_create_model_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__post_api_v2_external_campaign_auction_line_items_by_campaign_id
        )

        def __put_api_v1_external_campaign_by_campaign_id(
            self,
            campaign_id,
            **kwargs
        ):
            """put_api_v1_external_campaign_by_campaign_id  # noqa: E501

            Updates the campaign for the given campaign id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.put_api_v1_external_campaign_by_campaign_id(campaign_id, async_req=True)
            >>> result = thread.get()

            Args:
                campaign_id (str): The given campaign id

            Keyword Args:
                external_put_campaign (ExternalPutCampaign): The campaign settings to update that campaign with. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                JsonApiSingleResponseOfCampaign
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['campaign_id'] = \
                campaign_id
            return self.call_with_http_info(**kwargs)

        self.put_api_v1_external_campaign_by_campaign_id = _Endpoint(
            settings={
                'response_type': (JsonApiSingleResponseOfCampaign,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/campaigns/{campaignId}',
                'operation_id': 'put_api_v1_external_campaign_by_campaign_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'campaign_id',
                    'external_put_campaign',
                ],
                'required': [
                    'campaign_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'campaign_id':
                        (str,),
                    'external_put_campaign':
                        (ExternalPutCampaign,),
                },
                'attribute_map': {
                    'campaign_id': 'campaignId',
                },
                'location_map': {
                    'campaign_id': 'path',
                    'external_put_campaign': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__put_api_v1_external_campaign_by_campaign_id
        )

        def __put_api_v2_external_auction_line_item_by_line_item_id(
            self,
            line_item_id,
            **kwargs
        ):
            """put_api_v2_external_auction_line_item_by_line_item_id  # noqa: E501

            Updates the auction line item for the given line item id  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.put_api_v2_external_auction_line_item_by_line_item_id(line_item_id, async_req=True)
            >>> result = thread.get()

            Args:
                line_item_id (str): The given line item id

            Keyword Args:
                auction_line_item_update_model_request (AuctionLineItemUpdateModelRequest): The line item settings to create a line item with. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (int/float/tuple): timeout setting for this request. If
                    one number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                AuctionLineItemResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['line_item_id'] = \
                line_item_id
            return self.call_with_http_info(**kwargs)

        self.put_api_v2_external_auction_line_item_by_line_item_id = _Endpoint(
            settings={
                'response_type': (AuctionLineItemResponse,),
                'auth': [
                    'oauth'
                ],
                'endpoint_path': '/2021-07/retail-media/auction-line-items/{line-item-id}',
                'operation_id': 'put_api_v2_external_auction_line_item_by_line_item_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'line_item_id',
                    'auction_line_item_update_model_request',
                ],
                'required': [
                    'line_item_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'line_item_id':
                        (str,),
                    'auction_line_item_update_model_request':
                        (AuctionLineItemUpdateModelRequest,),
                },
                'attribute_map': {
                    'line_item_id': 'line-item-id',
                },
                'location_map': {
                    'line_item_id': 'path',
                    'auction_line_item_update_model_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__put_api_v2_external_auction_line_item_by_line_item_id
        )
