/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_TESTGMLSTBUFFERIZATION
#define GEN_PASS_DECL_TESTGMLSTLOOPPEELING
#define GEN_PASS_DECL_TESTGMLSTLOOPTILING
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// TestGmlStBufferization
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TESTGMLSTBUFFERIZATION
#undef GEN_PASS_DECL_TESTGMLSTBUFFERIZATION
#endif // GEN_PASS_DECL_TESTGMLSTBUFFERIZATION
#ifdef GEN_PASS_DEF_TESTGMLSTBUFFERIZATION
namespace impl {

template <typename DerivedT>
class TestGmlStBufferizationBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TestGmlStBufferizationBase;

  TestGmlStBufferizationBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TestGmlStBufferizationBase(const TestGmlStBufferizationBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("test-gml-st-bufferization");
  }
  ::llvm::StringRef getArgument() const override { return "test-gml-st-bufferization"; }

  ::llvm::StringRef getDescription() const override { return "Bufferize `gml_st.loop`."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TestGmlStBufferization");
  }
  ::llvm::StringRef getName() const override { return "TestGmlStBufferization"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestGmlStBufferizationBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TESTGMLSTBUFFERIZATION
#endif // GEN_PASS_DEF_TESTGMLSTBUFFERIZATION

//===----------------------------------------------------------------------===//
// TestGmlStLoopPeeling
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TESTGMLSTLOOPPEELING
struct TestGmlStLoopPeelingOptions {
  bool skip_partial = false;
  ::llvm::ArrayRef<unsigned> dims;
};
#undef GEN_PASS_DECL_TESTGMLSTLOOPPEELING
#endif // GEN_PASS_DECL_TESTGMLSTLOOPPEELING
#ifdef GEN_PASS_DEF_TESTGMLSTLOOPPEELING
namespace impl {

template <typename DerivedT>
class TestGmlStLoopPeelingBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = TestGmlStLoopPeelingBase;

  TestGmlStLoopPeelingBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TestGmlStLoopPeelingBase(const TestGmlStLoopPeelingBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("test-gml-st-loop-peeling");
  }
  ::llvm::StringRef getArgument() const override { return "test-gml-st-loop-peeling"; }

  ::llvm::StringRef getDescription() const override { return "Peel `gml_st.loop`"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TestGmlStLoopPeeling");
  }
  ::llvm::StringRef getName() const override { return "TestGmlStLoopPeeling"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestGmlStLoopPeelingBase<DerivedT>)

  TestGmlStLoopPeelingBase(const TestGmlStLoopPeelingOptions &options) : TestGmlStLoopPeelingBase() {
    skip_partial = options.skip_partial;
    dims = options.dims;
  }
protected:
  ::mlir::Pass::Option<bool> skip_partial{*this, "skip-partial", ::llvm::cl::desc("Skip loops inside partial iterations during peeling"), ::llvm::cl::init(false)};
  ::mlir::Pass::ListOption<unsigned> dims{*this, "dims", ::llvm::cl::desc("Dimensions to peel"), llvm::cl::OneOrMore};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TESTGMLSTLOOPPEELING
#endif // GEN_PASS_DEF_TESTGMLSTLOOPPEELING

//===----------------------------------------------------------------------===//
// TestGmlStLoopTiling
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_TESTGMLSTLOOPTILING
struct TestGmlStLoopTilingOptions {
  ::llvm::ArrayRef<int64_t> tile_sizes;
  ::llvm::ArrayRef<std::string> distribution_types;
};
#undef GEN_PASS_DECL_TESTGMLSTLOOPTILING
#endif // GEN_PASS_DECL_TESTGMLSTLOOPTILING
#ifdef GEN_PASS_DEF_TESTGMLSTLOOPTILING
namespace impl {

template <typename DerivedT>
class TestGmlStLoopTilingBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = TestGmlStLoopTilingBase;

  TestGmlStLoopTilingBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TestGmlStLoopTilingBase(const TestGmlStLoopTilingBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("test-gml-st-loop-tiling");
  }
  ::llvm::StringRef getArgument() const override { return "test-gml-st-loop-tiling"; }

  ::llvm::StringRef getDescription() const override { return "Tile `gml_st.loop`."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TestGmlStLoopTiling");
  }
  ::llvm::StringRef getName() const override { return "TestGmlStLoopTiling"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<AffineDialect>();

  registry.insert<gml_st::GmlStDialect>();

  registry.insert<linalg::LinalgDialect>();

  registry.insert<memref::MemRefDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestGmlStLoopTilingBase<DerivedT>)

  TestGmlStLoopTilingBase(const TestGmlStLoopTilingOptions &options) : TestGmlStLoopTilingBase() {
    tile_sizes = options.tile_sizes;
    distribution_types = options.distribution_types;
  }
protected:
  ::mlir::Pass::ListOption<int64_t> tile_sizes{*this, "tile-sizes", ::llvm::cl::desc("Tile sizes"), llvm::cl::ZeroOrMore};
  ::mlir::Pass::ListOption<std::string> distribution_types{*this, "distribution-types", ::llvm::cl::desc("Distribution types"), llvm::cl::ZeroOrMore};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_TESTGMLSTLOOPTILING
#endif // GEN_PASS_DEF_TESTGMLSTLOOPTILING
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// TestGmlStBufferization Registration
//===----------------------------------------------------------------------===//

inline void registerTestGmlStBufferization() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createTestGmlStBufferizationPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTestGmlStBufferizationPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createTestGmlStBufferizationPass();
  });
}

//===----------------------------------------------------------------------===//
// TestGmlStLoopPeeling Registration
//===----------------------------------------------------------------------===//

inline void registerTestGmlStLoopPeeling() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createTestGmlStLoopPeelingPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTestGmlStLoopPeelingPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createTestGmlStLoopPeelingPass();
  });
}

//===----------------------------------------------------------------------===//
// TestGmlStLoopTiling Registration
//===----------------------------------------------------------------------===//

inline void registerTestGmlStLoopTiling() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createTestGmlStLoopTilingPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerTestGmlStLoopTilingPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return ::mlir::gml_st::createTestGmlStLoopTilingPass();
  });
}

//===----------------------------------------------------------------------===//
// GmlStTest Registration
//===----------------------------------------------------------------------===//

inline void registerGmlStTestPasses() {
  registerTestGmlStBufferization();
  registerTestGmlStLoopPeeling();
  registerTestGmlStLoopTiling();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class TestGmlStBufferizationBase : public ::mlir::OperationPass<mlir::ModuleOp> {
public:
  using Base = TestGmlStBufferizationBase;

  TestGmlStBufferizationBase() : ::mlir::OperationPass<mlir::ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  TestGmlStBufferizationBase(const TestGmlStBufferizationBase &other) : ::mlir::OperationPass<mlir::ModuleOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("test-gml-st-bufferization");
  }
  ::llvm::StringRef getArgument() const override { return "test-gml-st-bufferization"; }

  ::llvm::StringRef getDescription() const override { return "Bufferize `gml_st.loop`."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TestGmlStBufferization");
  }
  ::llvm::StringRef getName() const override { return "TestGmlStBufferization"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestGmlStBufferizationBase<DerivedT>)

protected:
};

template <typename DerivedT>
class TestGmlStLoopPeelingBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = TestGmlStLoopPeelingBase;

  TestGmlStLoopPeelingBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TestGmlStLoopPeelingBase(const TestGmlStLoopPeelingBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("test-gml-st-loop-peeling");
  }
  ::llvm::StringRef getArgument() const override { return "test-gml-st-loop-peeling"; }

  ::llvm::StringRef getDescription() const override { return "Peel `gml_st.loop`"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TestGmlStLoopPeeling");
  }
  ::llvm::StringRef getName() const override { return "TestGmlStLoopPeeling"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestGmlStLoopPeelingBase<DerivedT>)

protected:
  ::mlir::Pass::Option<bool> skip_partial{*this, "skip-partial", ::llvm::cl::desc("Skip loops inside partial iterations during peeling"), ::llvm::cl::init(false)};
  ::mlir::Pass::ListOption<unsigned> dims{*this, "dims", ::llvm::cl::desc("Dimensions to peel"), llvm::cl::OneOrMore};
};

template <typename DerivedT>
class TestGmlStLoopTilingBase : public ::mlir::OperationPass<mlir::func::FuncOp> {
public:
  using Base = TestGmlStLoopTilingBase;

  TestGmlStLoopTilingBase() : ::mlir::OperationPass<mlir::func::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  TestGmlStLoopTilingBase(const TestGmlStLoopTilingBase &other) : ::mlir::OperationPass<mlir::func::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("test-gml-st-loop-tiling");
  }
  ::llvm::StringRef getArgument() const override { return "test-gml-st-loop-tiling"; }

  ::llvm::StringRef getDescription() const override { return "Tile `gml_st.loop`."; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("TestGmlStLoopTiling");
  }
  ::llvm::StringRef getName() const override { return "TestGmlStLoopTiling"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<AffineDialect>();

  registry.insert<gml_st::GmlStDialect>();

  registry.insert<linalg::LinalgDialect>();

  registry.insert<memref::MemRefDialect>();

  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(TestGmlStLoopTilingBase<DerivedT>)

protected:
  ::mlir::Pass::ListOption<int64_t> tile_sizes{*this, "tile-sizes", ::llvm::cl::desc("Tile sizes"), llvm::cl::ZeroOrMore};
  ::mlir::Pass::ListOption<std::string> distribution_types{*this, "distribution-types", ::llvm::cl::desc("Distribution types"), llvm::cl::ZeroOrMore};
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
