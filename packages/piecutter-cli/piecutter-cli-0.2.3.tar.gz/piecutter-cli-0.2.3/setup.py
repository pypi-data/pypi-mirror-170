# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['piecutter', 'piecutter.commands', 'piecutter.generators']

package_data = \
{'': ['*']}

install_requires = \
['click==8.1.3', 'typer==0.6.1']

entry_points = \
{'console_scripts': ['piecutter = piecutter.main:app']}

setup_kwargs = {
    'name': 'piecutter-cli',
    'version': '0.2.3',
    'description': 'A CLI tool for building ML projects from research to production in no time.',
    'long_description': '<div align="center">\n    <img src="statics/logo.png" width="250" />\n    <h4>\n        An open-source CLI app to build your entire ML project, from research to production. <br />\n        Piecutter-CLI 0.2.0 is released! :rocket:\n    </h4>\n    <p>\n        <img src="https://img.shields.io/pypi/pyversions/piecutter-cli" />\n        <img alt="PyPI" src="https://img.shields.io/pypi/v/piecutter-cli">\n        <img src="https://img.shields.io/pypi/l/piecutter-cli" />\n    </p>\n</div>\n\n\n## :notebook: Base Piecutter Project Structure\nThe project structure generated by Piecutter for the research/modeling phase of your project.\n\n    ------------\n       ├── README.md             -> The README.md file for describing your project.\n       ├── requirements.txt      -> List of requirements to run your code.\n       ├── service.py            -> Production service file to run BentoML models.\n       ├── bentofile.yaml        -> YAML file for BentoML build (Do not change this file name!).\n       ├── api_config.yaml       -> YAML file for BentoML\'s API configuration.\n       ├── data                  -> The dataset of your project at different stages.\n       │        ├── raw\n       │        ├── processed\n       │        ├── finalized\n       ├── notebooks             -> Your jupyter notebooks.\n       ├── references            -> Any external reference used in your project.\n       ├── reports               -> Reports folder to store figures and tables.\n       │        ├── figures",\n       │        ├── tables",\n       ├── scripts               -> Python scripts for training/saving models.\n       ├── models                -> Serialized models will be stored here!\n    ------------\n\n## :interrobang: Why Piecutter?\nPiecutter CLI is a project highly inspired by the well-known <a href="https://github.com/cookiecutter/cookiecutter" target="_blank">Cookiecutter</a> project.\n\n*But why another CLI app inspired in a well established one?*\n\nA lot of data scientists need to put models into production right after the modeling phase :crystal_ball:, and Cookiecutter doesn\'t help with this important step of the machine learning lifecycle :recycle:. Moreover, the project template generated by Cookiecutter :cookie: has some files and folders that we, as data scientists, don\'t use very often in a research-to-production environment :microscope:. Piecutter generates a much more cleaner structure of folders and files for the research phase of a ML project.\n\n*And about the production phase?*\n\nPiecutter implements a standardized way to package :zap: and put trained models and ML pipelines into production by using BentoML :rocket:. BentoML is a tool to standardize the process of ML model deployment by building an inference API around your trained pipeline as well as containerizing this application with docker :whale:, making it available for deployment right off the bat.\n\n*But why should I use Piecutter CLI if BentoML exists?*\n\nWell, BentoML\'s development is in full swing :steam_locomotive:, but this is good and bad at the same time. Although very standardized, the BentoML team constantly make significant changes on the package design :fire:, which affects not only the user experience, but also makes the official documentation outdated very fast :cyclone:. Piecutter puts all this mess :poop: out of your sight and gives you few commands for you to generate your entire research environment structure as well as to generate your production-ready inference API code in a matter of seconds :alarm_clock:!\n\nMoreover, BentoML isn\'t capable of generating the research and the production structure in the same codebase :computer:, it isn\'t meant for that actually. Piecutter :cake: takes care of this integration and on top of that implements *Custom Runnables* for any unsupported framework as well as for more complex AI pipelines just by running one or two commands :tada:.\n\n## Features\n+ Cross-platform: Windows, Linux and Mac are supported.\n+ Works with Python 3.8, or a newer version.\n+ Code formatting with Python Black.\n\n## :alien: Who Should Use Piecutter?\n+ Someone who wants a standard and concise data science project template.\n+ Anyone starting a career in data science.\n+ People who like low-code solutions in Python.\n+ Data scientists with no experience in software engineering and want to go quickly from model research to package and production.\n\n## :heavy_check_mark: Supported Frameworks\nPiecutter automatically generates the production code for all BentoML officially supported frameworks!\n\n## :bookmark_tabs: API Docs\n\n### :page_with_curl: Table of Contents\n1. :satellite: Installation\n2. :heavy_check_mark: Check Version\n3. :closed_book: Open Documentation\n4. :new: Create a New Project\n5. :carousel_horse: Add a New API Endpoint\n6. :cloud: BentoML Deployment on AWS\n***\n\n###  1. Installation\nPiecutter is available as a PyPI package, to install it, just run:\n\n    $ pip install piecutter-cli\n\n### 2. Check Version\nRun the `version` command to check if piecutter is installed:\n\n    $ piecutter version\n\n### 3. Open Documentation\nUse the `docs` command to quickly open the official documentation (this one you\'re reading) on your browser:\n\n    $ piecutter docs\n\n### 4. Create a New Project\nTo generate a new project template, run:\n\n    $ piecutter new name_of_your_project --base-framework sklearn\n\nThe `piecutter new` command accepts two flags:\n+ `--include-bento / --no-include-bento`: Which specifies if the buildable BentoML files will be written in the new project. You may want to `--no-include-bento` if your project isn\'t meant to generate a production-ready ML model/pipeline. *By default, Piecutter will always use `--include-bento` if it\'s not specified.*\n    + You can always run `piecutter add bento-build --base-framework sklearn` inside your project root directory for Piecutter to create all the buildable BentoML files in case you not include it at project creation.\n\n+ `--base-framework`: Which specifies for which supported ML/AI framework Piecutter will generates the production-ready code. Below there is a list of supported arguments.\n    + catboost\n    + fastai\n    + keras\n    + onnx\n    + pytorch\n    + pytorch_lightning\n    + sklearn\n    + tensorflow\n    + transformers\n    + xgboost\n    + custom *(generates a custom Runnable for more complex pipelines)*\n\nRight after creating a project, you may want to setup you environment and run the `pip install -r requirements.txt` command for installing BentoML dependencies.\n\n### 5. Add a New API Endpoint\nIn order for testing BentoML during development as well as to send it to production, you need an API endpoint for inference via requests. Use the command below to add new API endpoints to your inference service, no matter which AI/ML framework you\'re using.\n\n    $ piecutter add api-endpoint predict --input ARRAY --output JSON\n\nThe `piecutter add api-endpoint` command accepts two flags:\n+ `--input`: Which specifies what type of input data the API should expects.\n+ `--output`: Which specifies what type of output data the API should sends back.\n\nBoth of these flags expects the same set of possible arguments (you can use them interchangeably).\n+ `ARRAY` for expecting/returning **Numpy Arrays**.\n+ `DATAFRAME` for expecting/returning **Pandas Dataframes**.\n+ `TEXT` for expecting/returning **Text**.\n+ `IMAGE` for expecting/returning **Images**.\n+ `JSON` for expecting/returning **JSON** (default).\n+ `FILE` for expecting/returning **Files**.\n\n### 6. BentoML Deployment on AWS\nTo deploy your BentoML service to AWS, please, head over to the <a href="https://docs.bentoml.org/en/0.13-lts/deployment/aws_ec2.html" target="blank">official BentoML AWS Deployment documentation</a>.\n',
    'author': 'g0nz4rth',
    'author_email': 'arthurgs2007@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
