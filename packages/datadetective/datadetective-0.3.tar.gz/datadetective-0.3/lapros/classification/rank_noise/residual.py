# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/20-classification-residual.ipynb.

# %% auto 0
__all__ = ['residual', 'suspect']

# %% ../../../nbs/20-classification-residual.ipynb 2
import numpy as np
import pandas as pd
import pyarrow.feather as feather
from loguru import logger

# %% ../../../nbs/20-classification-residual.ipynb 4
from scipy.sparse import coo_matrix
from lapros.util import set_logger

# %% ../../../nbs/20-classification-residual.ipynb 17
def residual(
    *,
    probas: np.ndarray,
    likeliests: np.ndarray,
    labels: np.ndarray,
    return_non_errors: bool = False  # True to return all rows, including non-errors
) -> np.ndarray:
    """Lọc xác suất mô hình tính toán cho lớp nhãn đã gán với từng mẫu dữ liệu.`"""
    from lapros.classification.estimate_noise import est_noise_mask

    confidence = pd.Series([probas[i, j] for i, j in enumerate(labels)])
    resid = 1 - confidence
    noise_mask = est_noise_mask(
        likeliests=likeliests,
        labels=labels,
    )
    if not return_non_errors:
        resid = resid.loc[noise_mask]
    else:
        resid.loc[~noise_mask] = 0
    logger.debug(resid)
    return resid

# %% ../../../nbs/20-classification-residual.ipynb 18
from lapros.classification.estimate_noise import (
    avg_confidence,
    find_likeliests,
)

# %% ../../../nbs/20-classification-residual.ipynb 21
def suspect(
    probas: np.ndarray,  # probabilities
    # *, # turn of keyword arguments due to nbdev show_doc bug
    labels: np.ndarray,  # observed labels
    return_non_errors: bool = False,  # True to return all rows, including non-errors
) -> np.ndarray:
    "The internal method to rank the suspicious labels given probas from a classifier."
    # logger.debug(f"Shape of labels and probas: {labels.shape} vs {probas.shape}")

    assert len(labels) == len(probas)
    assert (probas >= 0).all() and (
        probas <= 1
    ).all()  # probas should be between 0 and 1

    thress = avg_confidence(probas=probas, labels=labels)
    likeliests = find_likeliests(thress=thress, probas=probas)
    resid = residual(
        probas=probas,
        likeliests=likeliests,
        labels=labels,
        return_non_errors=return_non_errors,
    )
    err_df = pd.DataFrame(
        dict(
            err=resid,
        )
    )
    if return_non_errors:
        err_df.loc[:, "suspected"] = resid > 0
        assert len(err_df) == len(labels)
    return err_df
