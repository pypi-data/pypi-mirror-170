Metadata-Version: 2.1
Name: mincepy
Version: 0.16.4
Summary: Python object storage with versioning made simple
Home-page: https://github.com/muhrin/mincepy.git
Author: Martin Uhrin
Author-email: martin.uhrin.10@ucl.ac.uk
License: LGPLv3
Keywords: database schemaless nosql orm object-store concurrent optimistic-locking
Platform: UNKNOWN
Classifier: License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Provides: mincepy.plugins
Requires-Python: >=3.7
Provides-Extra: cli
Provides-Extra: gui
Provides-Extra: dev
Provides-Extra: docs
Provides-Extra: sci
License-File: LICENSE

.. _documentation: https://mincepy.readthedocs.org/
.. _object-document mapper: https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping#Object-oriented_databases
.. _data mapper pattern: https://en.wikipedia.org/wiki/Data_mapper_pattern

mincePy
=======

.. image:: https://codecov.io/gh/muhrin/mincepy/branch/develop/graph/badge.svg
    :target: https://codecov.io/gh/muhrin/mincepy
    :alt: Coverage

.. image:: https://travis-ci.com/muhrin/mincepy.svg?branch=master
    :target: https://travis-ci.com/github/muhrin/mincepy
    :alt: Travis CI

.. image:: https://img.shields.io/pypi/v/mincepy.svg
    :target: https://pypi.python.org/pypi/mincepy/
    :alt: Latest Version

.. image:: https://img.shields.io/pypi/wheel/mincepy.svg
    :target: https://pypi.python.org/pypi/mincepy/

.. image:: https://img.shields.io/pypi/pyversions/mincepy.svg
    :target: https://pypi.python.org/pypi/mincepy/

.. image:: https://img.shields.io/pypi/l/mincepy.svg
    :target: https://pypi.python.org/pypi/mincepy/

.. image:: https://img.shields.io/badge/code%20style-black-000000.svg
    :target: https://github.com/psf/black


mincePy: move the database to one side and let your objects take centre stage.

MincePy is an `object-document mapper`_ (ORM) using the `data mapper pattern`_ designed specifically for computational
and data science.  What does this all mean??  It's simple really, it means you can store, find, get the history of and
annotate any of your python objects either in your local database or one shared with your collaborators.



See `documentation`_ for more information.


