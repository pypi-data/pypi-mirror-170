{"version":3,"sources":["pages/RunDetail/RunLogsTab/LogRow.tsx","pages/RunDetail/RunLogsTab/RunLogsTab.d.ts","pages/RunDetail/RunLogsTab/RunLogsTab.tsx","pages/RunDetail/RunLogsTab/index.tsx"],"names":["LogRow","index","style","data","className","logsList","displayName","React","LogsLastRequestEnum","memo","RunLogsTab","isRunLogsLoading","runHash","runLogs","inProgress","updatedLogsCount","liveUpdate","useRef","logsContainerRef","listRef","runsBatchRequestRef","logsRowsData","useState","DEFAULT","lastRequestType","setLastRequestType","RequestStatusEnum","Ok","requestStatus","setRequestStatus","logsRange","scrollOffset","setScrollOffset","visibleRowsRange","setVisibleRowsRange","parentHeight","setParentHeight","parentWidth","setParentWidth","keysList","setKeyList","liveUpdateCallBack","LIVE_UPDATE","getRunLogs","record_range","current","isLiveUpdate","params","Pending","runDetailAppModel","call","then","stopLiveUpdate","intervalId","window","setTimeout","startLiveUpdate","forceRequestAbort","abort","clearInterval","useEffect","analytics","ANALYTICS_EVENT_KEYS","runDetails","tabs","logs","tabView","values","_","sortBy","Object","keys","map","value","arrayWithEmptyStrings","Array","fill","length","concat","logsRowsCount","LOAD_MORE","scrollToItem","visibleStartIndex","visibleStopIndex","isEmpty","useResizeObserver","offsetHeight","offsetWidth","ErrorBoundary","BusyLoaderWrapper","isLoading","height","isNil","IllustrationBlock","size","title","ref","itemCount","itemSize","width","overscanCount","initialScrollOffset","onItemsRendered","itemData","onScroll","scrollDirection","isLoadMore","classNames","loading","thickness","color"],"mappings":"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","file":"static/js/RunLogsTab.js?version=3c27f28c992d28c28a1d","sourcesContent":["import React from 'react';\n\nfunction LogRow({\n  index,\n  style,\n  data,\n}: {\n  index: number;\n  style: React.CSSProperties;\n  data: {\n    logsList: string[];\n  };\n}) {\n  return (\n    <div style={style}>\n      <pre className='LogRow__line'>{data.logsList?.[index - 1]}</pre>\n    </div>\n  );\n}\n\nLogRow.displayName = 'RunLogsTab';\n\nexport default React.memo(LogRow);\n","export interface IRunLogsTabProps {\n  isRunLogsLoading: boolean;\n  runHash: string;\n  runLogs: { [key: string]: { index: string; value: string } };\n  inProgress: boolean;\n  updatedLogsCount: number;\n}\n\nexport enum LogsLastRequestEnum {\n  DEFAULT = 'default',\n  LIVE_UPDATE = 'live-update',\n  LOAD_MORE = 'load-more',\n}\n","import React from 'react';\nimport _ from 'lodash-es';\nimport {\n  ListOnItemsRenderedProps,\n  ListOnScrollProps,\n  VariableSizeList as List,\n} from 'react-window';\nimport classNames from 'classnames';\nimport { useResizeObserver } from 'hooks';\n\nimport BusyLoaderWrapper from 'components/BusyLoaderWrapper/BusyLoaderWrapper';\nimport ErrorBoundary from 'components/ErrorBoundary/ErrorBoundary';\nimport IllustrationBlock from 'components/IllustrationBlock/IllustrationBlock';\nimport { Spinner } from 'components/kit';\n\nimport { ANALYTICS_EVENT_KEYS } from 'config/analytics/analyticsKeysMap';\nimport { RequestStatusEnum } from 'config/enums/requestStatusEnum';\n\nimport runDetailAppModel from 'services/models/runs/runDetailAppModel';\nimport * as analytics from 'services/analytics';\n\nimport LogRow from './LogRow';\nimport { IRunLogsTabProps, LogsLastRequestEnum } from './RunLogsTab.d';\n\nimport './RunLogsTab.scss';\n\nconst SINGLE_LINE_HEIGHT = 15;\nconst LOAD_MORE_LOGS_COUNT = 200;\n\nfunction RunLogsTab({\n  isRunLogsLoading,\n  runHash,\n  runLogs,\n  inProgress,\n  updatedLogsCount,\n}: IRunLogsTabProps) {\n  const liveUpdate = React.useRef<{ intervalId: number } | null>(null);\n  const logsContainerRef = React.useRef<any>(null);\n  const listRef = React.useRef<any>({});\n  const runsBatchRequestRef = React.useRef<any>({});\n  const logsRowsData = React.useRef<string[] | null>(null);\n  const [lastRequestType, setLastRequestType] =\n    React.useState<LogsLastRequestEnum>(LogsLastRequestEnum.DEFAULT);\n  const [requestStatus, setRequestStatus] = React.useState<RequestStatusEnum>(\n    RequestStatusEnum.Ok,\n  );\n  const logsRange = React.useRef<[number, number]>([0, 0]);\n  const [scrollOffset, setScrollOffset] = React.useState<number | null>(null);\n  const [visibleRowsRange, setVisibleRowsRange] = React.useState<{\n    visibleStartIndex: number;\n    visibleStopIndex: number;\n  } | null>(null);\n  const [parentHeight, setParentHeight] = React.useState<number>(0);\n  const [parentWidth, setParentWidth] = React.useState<number>(0);\n  const [keysList, setKeyList] = React.useState<number[] | null>(null);\n\n  React.useEffect(() => {\n    getRunLogs({ runHash });\n    analytics.pageView(ANALYTICS_EVENT_KEYS.runDetails.tabs.logs.tabView);\n    return () => {\n      stopLiveUpdate(true);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  function liveUpdateCallBack() {\n    setLastRequestType(LogsLastRequestEnum.LIVE_UPDATE);\n    getRunLogs({\n      runHash,\n      record_range: logsRowsData.current\n        ? `${logsRange.current?.[1] > 5 ? logsRange.current?.[1] - 5 : 0}:`\n        : '',\n      isLiveUpdate: true,\n    });\n  }\n\n  function startLiveUpdate() {\n    if (inProgress) {\n      const intervalId: number = window.setTimeout(liveUpdateCallBack, 3000);\n      liveUpdate.current = {\n        intervalId,\n      };\n    }\n  }\n\n  function getRunLogs(params: {\n    runHash: string;\n    record_range?: string;\n    isLiveUpdate?: boolean;\n    isLoadMore?: boolean;\n  }) {\n    setRequestStatus(RequestStatusEnum.Pending);\n    runsBatchRequestRef.current = runDetailAppModel.getRunLogs(params);\n    runsBatchRequestRef.current.call().then(() => {\n      setRequestStatus(RequestStatusEnum.Ok);\n      stopLiveUpdate();\n      startLiveUpdate();\n    });\n  }\n\n  function stopLiveUpdate(forceRequestAbort: boolean = false) {\n    if (\n      forceRequestAbort ||\n      lastRequestType === LogsLastRequestEnum.LIVE_UPDATE\n    ) {\n      runsBatchRequestRef.current?.abort();\n    }\n    if (liveUpdate.current?.intervalId) {\n      clearInterval(liveUpdate.current.intervalId);\n    }\n  }\n\n  function onScroll({ scrollOffset, scrollDirection }: ListOnScrollProps) {\n    setScrollOffset(scrollOffset);\n    if (\n      scrollOffset <= SINGLE_LINE_HEIGHT &&\n      keysList &&\n      keysList[0] !== 0 &&\n      scrollDirection === 'backward' &&\n      (requestStatus === RequestStatusEnum.Ok ||\n        (requestStatus === RequestStatusEnum.Pending &&\n          lastRequestType === LogsLastRequestEnum.LIVE_UPDATE))\n    ) {\n      stopLiveUpdate();\n      setLastRequestType(LogsLastRequestEnum.LOAD_MORE);\n      getRunLogs({\n        runHash,\n        record_range: `${\n          logsRange.current?.[0] > LOAD_MORE_LOGS_COUNT\n            ? logsRange.current?.[0] - LOAD_MORE_LOGS_COUNT\n            : 0\n        }:${logsRange.current?.[0]}`,\n        isLoadMore: true,\n      });\n    }\n  }\n\n  function onItemsRendered({\n    visibleStartIndex,\n    visibleStopIndex,\n  }: ListOnItemsRenderedProps) {\n    setVisibleRowsRange({ visibleStartIndex, visibleStopIndex });\n  }\n\n  React.useEffect(() => {\n    if (!inProgress) {\n      stopLiveUpdate();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inProgress]);\n\n  React.useEffect(() => {\n    const values: Array<{ index: string; value: string }> = _.sortBy(\n      Object.values(runLogs ?? {}),\n      'index',\n    );\n    const keys: number[] = _.sortBy(\n      values.map((value: { index: string; value: string }) => +value.index),\n    );\n    const arrayWithEmptyStrings: string[] = Array(3).fill('');\n    logsRange.current = [keys[0], keys[keys.length - 1]];\n    setKeyList(keys);\n    logsRowsData.current = values\n      .map((value: { index: string; value: string }) => value.value)\n      .concat(arrayWithEmptyStrings);\n  }, [runLogs]);\n\n  React.useEffect(() => {\n    const logsRowsCount = logsRowsData.current?.length ?? 0;\n    if (lastRequestType === LogsLastRequestEnum.LOAD_MORE && visibleRowsRange) {\n      listRef.current?.scrollToItem?.(\n        visibleRowsRange.visibleStartIndex + updatedLogsCount,\n        'start',\n      );\n      setLastRequestType(LogsLastRequestEnum.DEFAULT);\n    } else if (\n      (lastRequestType === LogsLastRequestEnum.LIVE_UPDATE &&\n        visibleRowsRange &&\n        visibleRowsRange?.visibleStopIndex + updatedLogsCount >=\n          logsRowsCount - 1) ||\n      lastRequestType === LogsLastRequestEnum.DEFAULT\n    ) {\n      if (!_.isEmpty(keysList)) {\n        listRef.current?.scrollToItem?.(logsRowsCount, 'end');\n      }\n    } else {\n      listRef.current?.scrollToItem?.(\n        visibleRowsRange?.visibleStartIndex ?? 0,\n        'start',\n      );\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [logsRowsData.current, keysList]);\n\n  React.useEffect(() => {\n    if (\n      lastRequestType === LogsLastRequestEnum.DEFAULT &&\n      parentHeight &&\n      parentWidth\n    ) {\n      if (!_.isEmpty(keysList)) {\n        listRef.current?.scrollToItem?.(\n          visibleRowsRange?.visibleStartIndex ?? 0,\n          'start',\n        );\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [parentHeight, parentWidth]);\n\n  useResizeObserver(() => {\n    if (logsContainerRef.current) {\n      setParentHeight(logsContainerRef.current.offsetHeight);\n      setParentWidth(logsContainerRef.current.offsetWidth);\n    }\n  }, logsContainerRef);\n\n  return (\n    <ErrorBoundary>\n      <BusyLoaderWrapper\n        isLoading={\n          isRunLogsLoading && lastRequestType === LogsLastRequestEnum.DEFAULT\n        }\n        className='runDetailParamsTabLoader'\n        height='100%'\n      >\n        {!_.isEmpty(runLogs) &&\n        !_.isEmpty(keysList) &&\n        !_.isNil(logsRowsData.current) ? (\n          <div className='RunDetailLogsTabWrapper'>\n            <div className='RunDetailLogsTab'>\n              <div className='Logs' ref={logsContainerRef}>\n                <div className='Logs__wrapper'>\n                  <List\n                    ref={listRef}\n                    key={`${parentHeight}${parentWidth}`}\n                    height={parentHeight || 100}\n                    itemCount={logsRowsData.current?.length + 1}\n                    itemSize={() => SINGLE_LINE_HEIGHT}\n                    width={'100%'}\n                    overscanCount={100}\n                    initialScrollOffset={\n                      scrollOffset ??\n                      logsRowsData.current?.length * SINGLE_LINE_HEIGHT\n                    }\n                    onItemsRendered={onItemsRendered}\n                    itemData={{\n                      logsList: logsRowsData.current,\n                    }}\n                    onScroll={onScroll}\n                  >\n                    {LogRow}\n                  </List>\n                  <div\n                    className={classNames('overlay', {\n                      loading:\n                        isRunLogsLoading &&\n                        lastRequestType === LogsLastRequestEnum.LOAD_MORE,\n                    })}\n                  >\n                    <Spinner size={24} thickness={4} color='primary' />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <IllustrationBlock\n            size='xLarge'\n            className='runDetailParamsTabLoader'\n            title='No Logs'\n          />\n        )}\n      </BusyLoaderWrapper>\n    </ErrorBoundary>\n  );\n}\n\nRunLogsTab.displayName = 'RunLogsTab';\n\nexport default React.memo(RunLogsTab);\n","import RunLogsTab from './RunLogsTab';\n\nexport default RunLogsTab;\n"],"sourceRoot":""}