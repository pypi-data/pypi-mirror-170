# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ResourceSetLimit',
    'VmCdrom',
    'VmDisk',
    'VmNetwork',
    'GetHostsHostResult',
    'GetVmsVmResult',
    'GetVmsVmDiskResult',
    'GetVmsVmNetworkResult',
]

@pulumi.output_type
class ResourceSetLimit(dict):
    def __init__(__self__, *,
                 quantity: float,
                 type: str):
        pulumi.set(__self__, "quantity", quantity)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def quantity(self) -> float:
        return pulumi.get(self, "quantity")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class VmCdrom(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: The ID of the ISO (VDI) to attach to the VM. This can be easily provided by using the `vdi` data source.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the ISO (VDI) to attach to the VM. This can be easily provided by using the `vdi` data source.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class VmDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameLabel":
            suggest = "name_label"
        elif key == "srId":
            suggest = "sr_id"
        elif key == "nameDescription":
            suggest = "name_description"
        elif key == "vbdId":
            suggest = "vbd_id"
        elif key == "vdiId":
            suggest = "vdi_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name_label: str,
                 size: float,
                 sr_id: str,
                 attached: Optional[bool] = None,
                 name_description: Optional[str] = None,
                 position: Optional[str] = None,
                 vbd_id: Optional[str] = None,
                 vdi_id: Optional[str] = None):
        """
        :param str name_label: The name for the disk.
        :param float size: The size in bytes of the disk.
        :param str sr_id: The storage repository ID to use.
        :param str name_description: A description for the disk.
        """
        pulumi.set(__self__, "name_label", name_label)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "sr_id", sr_id)
        if attached is not None:
            pulumi.set(__self__, "attached", attached)
        if name_description is not None:
            pulumi.set(__self__, "name_description", name_description)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if vbd_id is not None:
            pulumi.set(__self__, "vbd_id", vbd_id)
        if vdi_id is not None:
            pulumi.set(__self__, "vdi_id", vdi_id)

    @property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> str:
        """
        The name for the disk.
        """
        return pulumi.get(self, "name_label")

    @property
    @pulumi.getter
    def size(self) -> float:
        """
        The size in bytes of the disk.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="srId")
    def sr_id(self) -> str:
        """
        The storage repository ID to use.
        """
        return pulumi.get(self, "sr_id")

    @property
    @pulumi.getter
    def attached(self) -> Optional[bool]:
        return pulumi.get(self, "attached")

    @property
    @pulumi.getter(name="nameDescription")
    def name_description(self) -> Optional[str]:
        """
        A description for the disk.
        """
        return pulumi.get(self, "name_description")

    @property
    @pulumi.getter
    def position(self) -> Optional[str]:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="vbdId")
    def vbd_id(self) -> Optional[str]:
        return pulumi.get(self, "vbd_id")

    @property
    @pulumi.getter(name="vdiId")
    def vdi_id(self) -> Optional[str]:
        return pulumi.get(self, "vdi_id")


@pulumi.output_type
class VmNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"
        elif key == "ipv4Addresses":
            suggest = "ipv4_addresses"
        elif key == "ipv6Addresses":
            suggest = "ipv6_addresses"
        elif key == "macAddress":
            suggest = "mac_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VmNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VmNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VmNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: str,
                 attached: Optional[bool] = None,
                 device: Optional[str] = None,
                 ipv4_addresses: Optional[Sequence[str]] = None,
                 ipv6_addresses: Optional[Sequence[str]] = None,
                 mac_address: Optional[str] = None):
        """
        :param str network_id: The ID of the network the VM will be on.
        :param Sequence[str] ipv4_addresses: This is only accessible if guest-tools is installed in the VM and if `wait_for_ip` is set to true. This will contain a list of the ipv4 addresses for the specific network interface. See the example below for more details.
        :param Sequence[str] ipv6_addresses: This is only accessible if guest-tools is installed in the VM and if `wait_for_ip` is set to true. This will contain a list of the ipv6 addresses for the specific network interface. See the example below for more details.
        """
        pulumi.set(__self__, "network_id", network_id)
        if attached is not None:
            pulumi.set(__self__, "attached", attached)
        if device is not None:
            pulumi.set(__self__, "device", device)
        if ipv4_addresses is not None:
            pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        if ipv6_addresses is not None:
            pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        The ID of the network the VM will be on.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def attached(self) -> Optional[bool]:
        return pulumi.get(self, "attached")

    @property
    @pulumi.getter
    def device(self) -> Optional[str]:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Optional[Sequence[str]]:
        """
        This is only accessible if guest-tools is installed in the VM and if `wait_for_ip` is set to true. This will contain a list of the ipv4 addresses for the specific network interface. See the example below for more details.
        """
        return pulumi.get(self, "ipv4_addresses")

    @property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Optional[Sequence[str]]:
        """
        This is only accessible if guest-tools is installed in the VM and if `wait_for_ip` is set to true. This will contain a list of the ipv6 addresses for the specific network interface. See the example below for more details.
        """
        return pulumi.get(self, "ipv6_addresses")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        return pulumi.get(self, "mac_address")


@pulumi.output_type
class GetHostsHostResult(dict):
    def __init__(__self__, *,
                 cpus: Mapping[str, int],
                 id: str,
                 memory: float,
                 memory_usage: float,
                 name_label: str,
                 pool_id: str,
                 tags: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "memory", memory)
        pulumi.set(__self__, "memory_usage", memory_usage)
        pulumi.set(__self__, "name_label", name_label)
        pulumi.set(__self__, "pool_id", pool_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def cpus(self) -> Mapping[str, int]:
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def memory(self) -> float:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="memoryUsage")
    def memory_usage(self) -> float:
        return pulumi.get(self, "memory_usage")

    @property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> str:
        return pulumi.get(self, "name_label")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> str:
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetVmsVmResult(dict):
    def __init__(__self__, *,
                 cpus: int,
                 disks: Sequence['outputs.GetVmsVmDiskResult'],
                 id: str,
                 ipv4_addresses: Sequence[str],
                 ipv6_addresses: Sequence[str],
                 memory_max: float,
                 name_label: str,
                 networks: Sequence['outputs.GetVmsVmNetworkResult'],
                 power_state: str,
                 template: str,
                 affinity_host: Optional[str] = None,
                 auto_poweron: Optional[bool] = None,
                 blocked_operations: Optional[Sequence[str]] = None,
                 cloud_config: Optional[str] = None,
                 cloud_network_config: Optional[str] = None,
                 core_os: Optional[bool] = None,
                 cpu_cap: Optional[float] = None,
                 cpu_weight: Optional[float] = None,
                 exp_nested_hvm: Optional[bool] = None,
                 high_availability: Optional[str] = None,
                 host: Optional[str] = None,
                 hvm_boot_firmware: Optional[str] = None,
                 name_description: Optional[str] = None,
                 resource_set: Optional[str] = None,
                 start_delay: Optional[int] = None,
                 tags: Optional[Sequence[str]] = None,
                 vga: Optional[str] = None,
                 videoram: Optional[float] = None,
                 wait_for_ip: Optional[bool] = None):
        pulumi.set(__self__, "cpus", cpus)
        pulumi.set(__self__, "disks", disks)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        pulumi.set(__self__, "memory_max", memory_max)
        pulumi.set(__self__, "name_label", name_label)
        pulumi.set(__self__, "networks", networks)
        pulumi.set(__self__, "power_state", power_state)
        pulumi.set(__self__, "template", template)
        if affinity_host is not None:
            pulumi.set(__self__, "affinity_host", affinity_host)
        if auto_poweron is not None:
            pulumi.set(__self__, "auto_poweron", auto_poweron)
        if blocked_operations is not None:
            pulumi.set(__self__, "blocked_operations", blocked_operations)
        if cloud_config is not None:
            pulumi.set(__self__, "cloud_config", cloud_config)
        if cloud_network_config is not None:
            pulumi.set(__self__, "cloud_network_config", cloud_network_config)
        if core_os is not None:
            pulumi.set(__self__, "core_os", core_os)
        if cpu_cap is not None:
            pulumi.set(__self__, "cpu_cap", cpu_cap)
        if cpu_weight is not None:
            pulumi.set(__self__, "cpu_weight", cpu_weight)
        if exp_nested_hvm is not None:
            pulumi.set(__self__, "exp_nested_hvm", exp_nested_hvm)
        if high_availability is not None:
            pulumi.set(__self__, "high_availability", high_availability)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if hvm_boot_firmware is not None:
            pulumi.set(__self__, "hvm_boot_firmware", hvm_boot_firmware)
        if name_description is not None:
            pulumi.set(__self__, "name_description", name_description)
        if resource_set is not None:
            pulumi.set(__self__, "resource_set", resource_set)
        if start_delay is not None:
            pulumi.set(__self__, "start_delay", start_delay)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if vga is not None:
            pulumi.set(__self__, "vga", vga)
        if videoram is not None:
            pulumi.set(__self__, "videoram", videoram)
        if wait_for_ip is not None:
            pulumi.set(__self__, "wait_for_ip", wait_for_ip)

    @property
    @pulumi.getter
    def cpus(self) -> int:
        return pulumi.get(self, "cpus")

    @property
    @pulumi.getter
    def disks(self) -> Sequence['outputs.GetVmsVmDiskResult']:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "ipv4_addresses")

    @property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "ipv6_addresses")

    @property
    @pulumi.getter(name="memoryMax")
    def memory_max(self) -> float:
        return pulumi.get(self, "memory_max")

    @property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> str:
        return pulumi.get(self, "name_label")

    @property
    @pulumi.getter
    def networks(self) -> Sequence['outputs.GetVmsVmNetworkResult']:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> str:
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter
    def template(self) -> str:
        return pulumi.get(self, "template")

    @property
    @pulumi.getter(name="affinityHost")
    def affinity_host(self) -> Optional[str]:
        return pulumi.get(self, "affinity_host")

    @property
    @pulumi.getter(name="autoPoweron")
    def auto_poweron(self) -> Optional[bool]:
        return pulumi.get(self, "auto_poweron")

    @property
    @pulumi.getter(name="blockedOperations")
    def blocked_operations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "blocked_operations")

    @property
    @pulumi.getter(name="cloudConfig")
    def cloud_config(self) -> Optional[str]:
        return pulumi.get(self, "cloud_config")

    @property
    @pulumi.getter(name="cloudNetworkConfig")
    def cloud_network_config(self) -> Optional[str]:
        return pulumi.get(self, "cloud_network_config")

    @property
    @pulumi.getter(name="coreOs")
    def core_os(self) -> Optional[bool]:
        return pulumi.get(self, "core_os")

    @property
    @pulumi.getter(name="cpuCap")
    def cpu_cap(self) -> Optional[float]:
        return pulumi.get(self, "cpu_cap")

    @property
    @pulumi.getter(name="cpuWeight")
    def cpu_weight(self) -> Optional[float]:
        return pulumi.get(self, "cpu_weight")

    @property
    @pulumi.getter(name="expNestedHvm")
    def exp_nested_hvm(self) -> Optional[bool]:
        return pulumi.get(self, "exp_nested_hvm")

    @property
    @pulumi.getter(name="highAvailability")
    def high_availability(self) -> Optional[str]:
        return pulumi.get(self, "high_availability")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="hvmBootFirmware")
    def hvm_boot_firmware(self) -> Optional[str]:
        return pulumi.get(self, "hvm_boot_firmware")

    @property
    @pulumi.getter(name="nameDescription")
    def name_description(self) -> Optional[str]:
        return pulumi.get(self, "name_description")

    @property
    @pulumi.getter(name="resourceSet")
    def resource_set(self) -> Optional[str]:
        return pulumi.get(self, "resource_set")

    @property
    @pulumi.getter(name="startDelay")
    def start_delay(self) -> Optional[int]:
        return pulumi.get(self, "start_delay")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def vga(self) -> Optional[str]:
        return pulumi.get(self, "vga")

    @property
    @pulumi.getter
    def videoram(self) -> Optional[float]:
        return pulumi.get(self, "videoram")

    @property
    @pulumi.getter(name="waitForIp")
    def wait_for_ip(self) -> Optional[bool]:
        return pulumi.get(self, "wait_for_ip")


@pulumi.output_type
class GetVmsVmDiskResult(dict):
    def __init__(__self__, *,
                 name_label: str,
                 position: str,
                 size: float,
                 sr_id: str,
                 vbd_id: str,
                 vdi_id: str,
                 attached: Optional[bool] = None,
                 name_description: Optional[str] = None):
        pulumi.set(__self__, "name_label", name_label)
        pulumi.set(__self__, "position", position)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "sr_id", sr_id)
        pulumi.set(__self__, "vbd_id", vbd_id)
        pulumi.set(__self__, "vdi_id", vdi_id)
        if attached is not None:
            pulumi.set(__self__, "attached", attached)
        if name_description is not None:
            pulumi.set(__self__, "name_description", name_description)

    @property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> str:
        return pulumi.get(self, "name_label")

    @property
    @pulumi.getter
    def position(self) -> str:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def size(self) -> float:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="srId")
    def sr_id(self) -> str:
        return pulumi.get(self, "sr_id")

    @property
    @pulumi.getter(name="vbdId")
    def vbd_id(self) -> str:
        return pulumi.get(self, "vbd_id")

    @property
    @pulumi.getter(name="vdiId")
    def vdi_id(self) -> str:
        return pulumi.get(self, "vdi_id")

    @property
    @pulumi.getter
    def attached(self) -> Optional[bool]:
        return pulumi.get(self, "attached")

    @property
    @pulumi.getter(name="nameDescription")
    def name_description(self) -> Optional[str]:
        return pulumi.get(self, "name_description")


@pulumi.output_type
class GetVmsVmNetworkResult(dict):
    def __init__(__self__, *,
                 device: str,
                 ipv4_addresses: Sequence[str],
                 ipv6_addresses: Sequence[str],
                 mac_address: str,
                 network_id: str,
                 attached: Optional[bool] = None):
        pulumi.set(__self__, "device", device)
        pulumi.set(__self__, "ipv4_addresses", ipv4_addresses)
        pulumi.set(__self__, "ipv6_addresses", ipv6_addresses)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "network_id", network_id)
        if attached is not None:
            pulumi.set(__self__, "attached", attached)

    @property
    @pulumi.getter
    def device(self) -> str:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter(name="ipv4Addresses")
    def ipv4_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "ipv4_addresses")

    @property
    @pulumi.getter(name="ipv6Addresses")
    def ipv6_addresses(self) -> Sequence[str]:
        return pulumi.get(self, "ipv6_addresses")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def attached(self) -> Optional[bool]:
        return pulumi.get(self, "attached")


