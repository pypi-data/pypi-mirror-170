# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetVmsResult',
    'AwaitableGetVmsResult',
    'get_vms',
    'get_vms_output',
]

@pulumi.output_type
class GetVmsResult:
    """
    A collection of values returned by getVms.
    """
    def __init__(__self__, host=None, id=None, pool_id=None, power_state=None, vms=None):
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)
        if power_state and not isinstance(power_state, str):
            raise TypeError("Expected argument 'power_state' to be a str")
        pulumi.set(__self__, "power_state", power_state)
        if vms and not isinstance(vms, list):
            raise TypeError("Expected argument 'vms' to be a list")
        pulumi.set(__self__, "vms", vms)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> str:
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter(name="powerState")
    def power_state(self) -> Optional[str]:
        return pulumi.get(self, "power_state")

    @property
    @pulumi.getter
    def vms(self) -> Sequence['outputs.GetVmsVmResult']:
        return pulumi.get(self, "vms")


class AwaitableGetVmsResult(GetVmsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetVmsResult(
            host=self.host,
            id=self.id,
            pool_id=self.pool_id,
            power_state=self.power_state,
            vms=self.vms)


def get_vms(host: Optional[str] = None,
            pool_id: Optional[str] = None,
            power_state: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetVmsResult:
    """
    ## # get_vms

    Use this data source to filter Xenorchestra VMs by certain criteria (pool_id, power_state or host) for use in other resources.
    """
    __args__ = dict()
    __args__['host'] = host
    __args__['poolId'] = pool_id
    __args__['powerState'] = power_state
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('xenorchestra:index/getVms:getVms', __args__, opts=opts, typ=GetVmsResult).value

    return AwaitableGetVmsResult(
        host=__ret__.host,
        id=__ret__.id,
        pool_id=__ret__.pool_id,
        power_state=__ret__.power_state,
        vms=__ret__.vms)


@_utilities.lift_output_func(get_vms)
def get_vms_output(host: Optional[pulumi.Input[Optional[str]]] = None,
                   pool_id: Optional[pulumi.Input[str]] = None,
                   power_state: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetVmsResult]:
    """
    ## # get_vms

    Use this data source to filter Xenorchestra VMs by certain criteria (pool_id, power_state or host) for use in other resources.
    """
    ...
