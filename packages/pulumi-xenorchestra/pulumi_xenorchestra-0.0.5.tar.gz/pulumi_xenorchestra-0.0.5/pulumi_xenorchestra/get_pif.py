# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetPifResult',
    'AwaitableGetPifResult',
    'get_pif',
    'get_pif_output',
]

@pulumi.output_type
class GetPifResult:
    """
    A collection of values returned by getPif.
    """
    def __init__(__self__, attached=None, device=None, host=None, host_id=None, id=None, network=None, pool_id=None, uuid=None, vlan=None):
        if attached and not isinstance(attached, bool):
            raise TypeError("Expected argument 'attached' to be a bool")
        pulumi.set(__self__, "attached", attached)
        if device and not isinstance(device, str):
            raise TypeError("Expected argument 'device' to be a str")
        pulumi.set(__self__, "device", device)
        if host and not isinstance(host, str):
            raise TypeError("Expected argument 'host' to be a str")
        pulumi.set(__self__, "host", host)
        if host_id and not isinstance(host_id, str):
            raise TypeError("Expected argument 'host_id' to be a str")
        pulumi.set(__self__, "host_id", host_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if network and not isinstance(network, str):
            raise TypeError("Expected argument 'network' to be a str")
        pulumi.set(__self__, "network", network)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)
        if uuid and not isinstance(uuid, str):
            raise TypeError("Expected argument 'uuid' to be a str")
        pulumi.set(__self__, "uuid", uuid)
        if vlan and not isinstance(vlan, int):
            raise TypeError("Expected argument 'vlan' to be a int")
        pulumi.set(__self__, "vlan", vlan)

    @property
    @pulumi.getter
    def attached(self) -> bool:
        return pulumi.get(self, "attached")

    @property
    @pulumi.getter
    def device(self) -> str:
        return pulumi.get(self, "device")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="hostId")
    def host_id(self) -> str:
        return pulumi.get(self, "host_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def network(self) -> str:
        return pulumi.get(self, "network")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> str:
        return pulumi.get(self, "pool_id")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")

    @property
    @pulumi.getter
    def vlan(self) -> int:
        return pulumi.get(self, "vlan")


class AwaitableGetPifResult(GetPifResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPifResult(
            attached=self.attached,
            device=self.device,
            host=self.host,
            host_id=self.host_id,
            id=self.id,
            network=self.network,
            pool_id=self.pool_id,
            uuid=self.uuid,
            vlan=self.vlan)


def get_pif(device: Optional[str] = None,
            host_id: Optional[str] = None,
            vlan: Optional[int] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPifResult:
    """
    ## # get_pif

    Provides information about a physical network interface (PIF) of a XenServer host specified by the interface name or whether it is the management interface.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_xenorchestra as xenorchestra

    eth0 = xenorchestra.get_pif(device="eth0",
        vlan=-1)
    demo_vm = xenorchestra.Vm("demo-vm", networks=[xenorchestra.VmNetworkArgs(
        network_id=eth0.network,
    )])
    # ...
    ```
    """
    __args__ = dict()
    __args__['device'] = device
    __args__['hostId'] = host_id
    __args__['vlan'] = vlan
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('xenorchestra:index/getPif:getPif', __args__, opts=opts, typ=GetPifResult).value

    return AwaitableGetPifResult(
        attached=__ret__.attached,
        device=__ret__.device,
        host=__ret__.host,
        host_id=__ret__.host_id,
        id=__ret__.id,
        network=__ret__.network,
        pool_id=__ret__.pool_id,
        uuid=__ret__.uuid,
        vlan=__ret__.vlan)


@_utilities.lift_output_func(get_pif)
def get_pif_output(device: Optional[pulumi.Input[str]] = None,
                   host_id: Optional[pulumi.Input[Optional[str]]] = None,
                   vlan: Optional[pulumi.Input[int]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPifResult]:
    """
    ## # get_pif

    Provides information about a physical network interface (PIF) of a XenServer host specified by the interface name or whether it is the management interface.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_xenorchestra as xenorchestra

    eth0 = xenorchestra.get_pif(device="eth0",
        vlan=-1)
    demo_vm = xenorchestra.Vm("demo-vm", networks=[xenorchestra.VmNetworkArgs(
        network_id=eth0.network,
    )])
    # ...
    ```
    """
    ...
