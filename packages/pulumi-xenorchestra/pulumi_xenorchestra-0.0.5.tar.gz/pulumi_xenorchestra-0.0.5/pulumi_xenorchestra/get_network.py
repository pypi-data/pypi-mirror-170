# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetNetworkResult',
    'AwaitableGetNetworkResult',
    'get_network',
    'get_network_output',
]

@pulumi.output_type
class GetNetworkResult:
    """
    A collection of values returned by getNetwork.
    """
    def __init__(__self__, bridge=None, id=None, name_label=None, pool_id=None):
        if bridge and not isinstance(bridge, str):
            raise TypeError("Expected argument 'bridge' to be a str")
        pulumi.set(__self__, "bridge", bridge)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name_label and not isinstance(name_label, str):
            raise TypeError("Expected argument 'name_label' to be a str")
        pulumi.set(__self__, "name_label", name_label)
        if pool_id and not isinstance(pool_id, str):
            raise TypeError("Expected argument 'pool_id' to be a str")
        pulumi.set(__self__, "pool_id", pool_id)

    @property
    @pulumi.getter
    def bridge(self) -> str:
        return pulumi.get(self, "bridge")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="nameLabel")
    def name_label(self) -> str:
        return pulumi.get(self, "name_label")

    @property
    @pulumi.getter(name="poolId")
    def pool_id(self) -> Optional[str]:
        return pulumi.get(self, "pool_id")


class AwaitableGetNetworkResult(GetNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkResult(
            bridge=self.bridge,
            id=self.id,
            name_label=self.name_label,
            pool_id=self.pool_id)


def get_network(bridge: Optional[str] = None,
                name_label: Optional[str] = None,
                pool_id: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkResult:
    """
    ## # get_network

    Provides information about a network of a Xenserver pool.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_xenorchestra as xenorchestra

    net = xenorchestra.get_network(name_label="Pool-wide network associated with eth0")
    demo_vm = xenorchestra.Vm("demo-vm", networks=[xenorchestra.VmNetworkArgs(
        network_id=net.id,
    )])
    # ...
    ```
    """
    __args__ = dict()
    __args__['bridge'] = bridge
    __args__['nameLabel'] = name_label
    __args__['poolId'] = pool_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('xenorchestra:index/getNetwork:getNetwork', __args__, opts=opts, typ=GetNetworkResult).value

    return AwaitableGetNetworkResult(
        bridge=__ret__.bridge,
        id=__ret__.id,
        name_label=__ret__.name_label,
        pool_id=__ret__.pool_id)


@_utilities.lift_output_func(get_network)
def get_network_output(bridge: Optional[pulumi.Input[Optional[str]]] = None,
                       name_label: Optional[pulumi.Input[str]] = None,
                       pool_id: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetNetworkResult]:
    """
    ## # get_network

    Provides information about a network of a Xenserver pool.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_xenorchestra as xenorchestra

    net = xenorchestra.get_network(name_label="Pool-wide network associated with eth0")
    demo_vm = xenorchestra.Vm("demo-vm", networks=[xenorchestra.VmNetworkArgs(
        network_id=net.id,
    )])
    # ...
    ```
    """
    ...
