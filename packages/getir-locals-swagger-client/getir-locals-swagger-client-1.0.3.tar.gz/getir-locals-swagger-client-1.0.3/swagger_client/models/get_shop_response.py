# coding: utf-8

"""
    Getir-Locals Integration Swagger Documentation

    This documentation is created by Getir Developers for Getir-Locals Integration.For this integration, you need to take CLIENT NAME and CLIENT SECRET keys from Getir-dev team and use these keys for authentication. You also need to use access token provided after successful login to be able to use all other endpoints  You can view information about the active order through /orders/unapproved endpoints. The status of the order is managed via verify, prepare, handover and cancel endpoints. Details on order management are as follows:  For orders to be made by the Getir courier, the flow is as follows:  Supplier confirms order --verify<br />Supplier prepares order --prepare (1-2 minutes must pass before delivery)<br />Supplier hands over the order to Getir courier --handover<br />For Getir delivery, transactions are made by the Getir courier after handover.  A valid reason will be requested from the supplier to cancel an order. Valid reasons may vary depending on the instant status of the order. For this reason, before canceling an order, you have to get instant valid order cancellation reasons from /orders/{orderId}/cancel-options endpoint.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetShopResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'chain_id': 'str',
        'courier_working_status': 'str',
        'working_status': 'str',
        'weekly_working_hours': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'chain_id': 'chainId',
        'courier_working_status': 'courierWorkingStatus',
        'working_status': 'workingStatus',
        'weekly_working_hours': 'weeklyWorkingHours'
    }

    def __init__(self, id=None, name=None, chain_id=None, courier_working_status=None, working_status=None, weekly_working_hours=None):  # noqa: E501
        """GetShopResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._chain_id = None
        self._courier_working_status = None
        self._working_status = None
        self._weekly_working_hours = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if chain_id is not None:
            self.chain_id = chain_id
        if courier_working_status is not None:
            self.courier_working_status = courier_working_status
        if working_status is not None:
            self.working_status = working_status
        if weekly_working_hours is not None:
            self.weekly_working_hours = weekly_working_hours

    @property
    def id(self):
        """Gets the id of this GetShopResponse.  # noqa: E501


        :return: The id of this GetShopResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetShopResponse.


        :param id: The id of this GetShopResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetShopResponse.  # noqa: E501


        :return: The name of this GetShopResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetShopResponse.


        :param name: The name of this GetShopResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def chain_id(self):
        """Gets the chain_id of this GetShopResponse.  # noqa: E501


        :return: The chain_id of this GetShopResponse.  # noqa: E501
        :rtype: str
        """
        return self._chain_id

    @chain_id.setter
    def chain_id(self, chain_id):
        """Sets the chain_id of this GetShopResponse.


        :param chain_id: The chain_id of this GetShopResponse.  # noqa: E501
        :type: str
        """

        self._chain_id = chain_id

    @property
    def courier_working_status(self):
        """Gets the courier_working_status of this GetShopResponse.  # noqa: E501


        :return: The courier_working_status of this GetShopResponse.  # noqa: E501
        :rtype: str
        """
        return self._courier_working_status

    @courier_working_status.setter
    def courier_working_status(self, courier_working_status):
        """Sets the courier_working_status of this GetShopResponse.


        :param courier_working_status: The courier_working_status of this GetShopResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLOSED", "OPEN"]  # noqa: E501
        if courier_working_status not in allowed_values:
            raise ValueError(
                "Invalid value for `courier_working_status` ({0}), must be one of {1}"  # noqa: E501
                .format(courier_working_status, allowed_values)
            )

        self._courier_working_status = courier_working_status

    @property
    def working_status(self):
        """Gets the working_status of this GetShopResponse.  # noqa: E501


        :return: The working_status of this GetShopResponse.  # noqa: E501
        :rtype: str
        """
        return self._working_status

    @working_status.setter
    def working_status(self, working_status):
        """Sets the working_status of this GetShopResponse.


        :param working_status: The working_status of this GetShopResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["OPEN", "CLOSED"]  # noqa: E501
        if working_status not in allowed_values:
            raise ValueError(
                "Invalid value for `working_status` ({0}), must be one of {1}"  # noqa: E501
                .format(working_status, allowed_values)
            )

        self._working_status = working_status

    @property
    def weekly_working_hours(self):
        """Gets the weekly_working_hours of this GetShopResponse.  # noqa: E501


        :return: The weekly_working_hours of this GetShopResponse.  # noqa: E501
        :rtype: object
        """
        return self._weekly_working_hours

    @weekly_working_hours.setter
    def weekly_working_hours(self, weekly_working_hours):
        """Sets the weekly_working_hours of this GetShopResponse.


        :param weekly_working_hours: The weekly_working_hours of this GetShopResponse.  # noqa: E501
        :type: object
        """

        self._weekly_working_hours = weekly_working_hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetShopResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetShopResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
