# coding: utf-8

"""
    Getir-Locals Integration Swagger Documentation

    This documentation is created by Getir Developers for Getir-Locals Integration.For this integration, you need to take CLIENT NAME and CLIENT SECRET keys from Getir-dev team and use these keys for authentication. You also need to use access token provided after successful login to be able to use all other endpoints  You can view information about the active order through /orders/unapproved endpoints. The status of the order is managed via verify, prepare, handover and cancel endpoints. Details on order management are as follows:  For orders to be made by the Getir courier, the flow is as follows:  Supplier confirms order --verify<br />Supplier prepares order --prepare (1-2 minutes must pass before delivery)<br />Supplier hands over the order to Getir courier --handover<br />For Getir delivery, transactions are made by the Getir courier after handover.  A valid reason will be requested from the supplier to cancel an order. Valid reasons may vary depending on the instant status of the order. For this reason, before canceling an order, you have to get instant valid order cancellation reasons from /orders/{orderId}/cancel-options endpoint.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArtisanOrderResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'shop_id': 'str',
        'status': 'float',
        'total_price': 'float',
        'total_discount_amount': 'float',
        'total_charged_amount_after_provision_or_refund': 'float',
        'order_number': 'float',
        'client_note': 'str',
        'getir_min_basket_amount': 'int',
        'shop_min_basket_amount': 'int',
        'customer': 'CustomerResponse',
        'invoice_address': 'InvoiceAddressResponse',
        'products': 'list[ProductResponse]'
    }

    attribute_map = {
        'id': 'id',
        'shop_id': 'shopId',
        'status': 'status',
        'total_price': 'totalPrice',
        'total_discount_amount': 'totalDiscountAmount',
        'total_charged_amount_after_provision_or_refund': 'totalChargedAmountAfterProvisionOrRefund',
        'order_number': 'orderNumber',
        'client_note': 'clientNote',
        'getir_min_basket_amount': 'getirMinBasketAmount',
        'shop_min_basket_amount': 'shopMinBasketAmount',
        'customer': 'customer',
        'invoice_address': 'invoiceAddress',
        'products': 'products'
    }

    def __init__(self, id=None, shop_id=None, status=None, total_price=None, total_discount_amount=None, total_charged_amount_after_provision_or_refund=None, order_number=None, client_note=None, getir_min_basket_amount=None, shop_min_basket_amount=None, customer=None, invoice_address=None, products=None):  # noqa: E501
        """ArtisanOrderResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._shop_id = None
        self._status = None
        self._total_price = None
        self._total_discount_amount = None
        self._total_charged_amount_after_provision_or_refund = None
        self._order_number = None
        self._client_note = None
        self._getir_min_basket_amount = None
        self._shop_min_basket_amount = None
        self._customer = None
        self._invoice_address = None
        self._products = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if shop_id is not None:
            self.shop_id = shop_id
        if status is not None:
            self.status = status
        if total_price is not None:
            self.total_price = total_price
        if total_discount_amount is not None:
            self.total_discount_amount = total_discount_amount
        if total_charged_amount_after_provision_or_refund is not None:
            self.total_charged_amount_after_provision_or_refund = total_charged_amount_after_provision_or_refund
        if order_number is not None:
            self.order_number = order_number
        if client_note is not None:
            self.client_note = client_note
        if getir_min_basket_amount is not None:
            self.getir_min_basket_amount = getir_min_basket_amount
        if shop_min_basket_amount is not None:
            self.shop_min_basket_amount = shop_min_basket_amount
        if customer is not None:
            self.customer = customer
        if invoice_address is not None:
            self.invoice_address = invoice_address
        if products is not None:
            self.products = products

    @property
    def id(self):
        """Gets the id of this ArtisanOrderResponse.  # noqa: E501


        :return: The id of this ArtisanOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArtisanOrderResponse.


        :param id: The id of this ArtisanOrderResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def shop_id(self):
        """Gets the shop_id of this ArtisanOrderResponse.  # noqa: E501


        :return: The shop_id of this ArtisanOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this ArtisanOrderResponse.


        :param shop_id: The shop_id of this ArtisanOrderResponse.  # noqa: E501
        :type: str
        """

        self._shop_id = shop_id

    @property
    def status(self):
        """Gets the status of this ArtisanOrderResponse.  # noqa: E501


        :return: The status of this ArtisanOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ArtisanOrderResponse.


        :param status: The status of this ArtisanOrderResponse.  # noqa: E501
        :type: float
        """

        self._status = status

    @property
    def total_price(self):
        """Gets the total_price of this ArtisanOrderResponse.  # noqa: E501


        :return: The total_price of this ArtisanOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this ArtisanOrderResponse.


        :param total_price: The total_price of this ArtisanOrderResponse.  # noqa: E501
        :type: float
        """

        self._total_price = total_price

    @property
    def total_discount_amount(self):
        """Gets the total_discount_amount of this ArtisanOrderResponse.  # noqa: E501


        :return: The total_discount_amount of this ArtisanOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_discount_amount

    @total_discount_amount.setter
    def total_discount_amount(self, total_discount_amount):
        """Sets the total_discount_amount of this ArtisanOrderResponse.


        :param total_discount_amount: The total_discount_amount of this ArtisanOrderResponse.  # noqa: E501
        :type: float
        """

        self._total_discount_amount = total_discount_amount

    @property
    def total_charged_amount_after_provision_or_refund(self):
        """Gets the total_charged_amount_after_provision_or_refund of this ArtisanOrderResponse.  # noqa: E501


        :return: The total_charged_amount_after_provision_or_refund of this ArtisanOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_charged_amount_after_provision_or_refund

    @total_charged_amount_after_provision_or_refund.setter
    def total_charged_amount_after_provision_or_refund(self, total_charged_amount_after_provision_or_refund):
        """Sets the total_charged_amount_after_provision_or_refund of this ArtisanOrderResponse.


        :param total_charged_amount_after_provision_or_refund: The total_charged_amount_after_provision_or_refund of this ArtisanOrderResponse.  # noqa: E501
        :type: float
        """

        self._total_charged_amount_after_provision_or_refund = total_charged_amount_after_provision_or_refund

    @property
    def order_number(self):
        """Gets the order_number of this ArtisanOrderResponse.  # noqa: E501


        :return: The order_number of this ArtisanOrderResponse.  # noqa: E501
        :rtype: float
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this ArtisanOrderResponse.


        :param order_number: The order_number of this ArtisanOrderResponse.  # noqa: E501
        :type: float
        """

        self._order_number = order_number

    @property
    def client_note(self):
        """Gets the client_note of this ArtisanOrderResponse.  # noqa: E501


        :return: The client_note of this ArtisanOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._client_note

    @client_note.setter
    def client_note(self, client_note):
        """Sets the client_note of this ArtisanOrderResponse.


        :param client_note: The client_note of this ArtisanOrderResponse.  # noqa: E501
        :type: str
        """

        self._client_note = client_note

    @property
    def getir_min_basket_amount(self):
        """Gets the getir_min_basket_amount of this ArtisanOrderResponse.  # noqa: E501


        :return: The getir_min_basket_amount of this ArtisanOrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._getir_min_basket_amount

    @getir_min_basket_amount.setter
    def getir_min_basket_amount(self, getir_min_basket_amount):
        """Sets the getir_min_basket_amount of this ArtisanOrderResponse.


        :param getir_min_basket_amount: The getir_min_basket_amount of this ArtisanOrderResponse.  # noqa: E501
        :type: int
        """

        self._getir_min_basket_amount = getir_min_basket_amount

    @property
    def shop_min_basket_amount(self):
        """Gets the shop_min_basket_amount of this ArtisanOrderResponse.  # noqa: E501


        :return: The shop_min_basket_amount of this ArtisanOrderResponse.  # noqa: E501
        :rtype: int
        """
        return self._shop_min_basket_amount

    @shop_min_basket_amount.setter
    def shop_min_basket_amount(self, shop_min_basket_amount):
        """Sets the shop_min_basket_amount of this ArtisanOrderResponse.


        :param shop_min_basket_amount: The shop_min_basket_amount of this ArtisanOrderResponse.  # noqa: E501
        :type: int
        """

        self._shop_min_basket_amount = shop_min_basket_amount

    @property
    def customer(self):
        """Gets the customer of this ArtisanOrderResponse.  # noqa: E501


        :return: The customer of this ArtisanOrderResponse.  # noqa: E501
        :rtype: CustomerResponse
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this ArtisanOrderResponse.


        :param customer: The customer of this ArtisanOrderResponse.  # noqa: E501
        :type: CustomerResponse
        """

        self._customer = customer

    @property
    def invoice_address(self):
        """Gets the invoice_address of this ArtisanOrderResponse.  # noqa: E501


        :return: The invoice_address of this ArtisanOrderResponse.  # noqa: E501
        :rtype: InvoiceAddressResponse
        """
        return self._invoice_address

    @invoice_address.setter
    def invoice_address(self, invoice_address):
        """Sets the invoice_address of this ArtisanOrderResponse.


        :param invoice_address: The invoice_address of this ArtisanOrderResponse.  # noqa: E501
        :type: InvoiceAddressResponse
        """

        self._invoice_address = invoice_address

    @property
    def products(self):
        """Gets the products of this ArtisanOrderResponse.  # noqa: E501


        :return: The products of this ArtisanOrderResponse.  # noqa: E501
        :rtype: list[ProductResponse]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this ArtisanOrderResponse.


        :param products: The products of this ArtisanOrderResponse.  # noqa: E501
        :type: list[ProductResponse]
        """

        self._products = products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArtisanOrderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtisanOrderResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
