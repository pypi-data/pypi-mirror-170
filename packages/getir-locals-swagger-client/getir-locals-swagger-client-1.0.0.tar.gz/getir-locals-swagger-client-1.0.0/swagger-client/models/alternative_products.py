# coding: utf-8

"""
    Getir-Locals Integration Swagger Documentation

    This documentation is created by Getir Developers for Getir-Locals Integration.For this integration, you need to take CLIENT NAME and CLIENT SECRET keys from Getir-dev team and use these keys for authentication. You also need to use access token provided after successful login to be able to use all other endpoints  You can view information about the active order through /orders/unapproved endpoints. The status of the order is managed via verify, prepare, handover and cancel endpoints. Details on order management are as follows:  For orders to be made by the Getir courier, the flow is as follows:  Supplier confirms order --verify<br />Supplier prepares order --prepare (1-2 minutes must pass before delivery)<br />Supplier hands over the order to Getir courier --handover<br />For Getir delivery, transactions are made by the Getir courier after handover.  A valid reason will be requested from the supplier to cancel an order. Valid reasons may vary depending on the instant status of the order. For this reason, before canceling an order, you have to get instant valid order cancellation reasons from /orders/{orderId}/cancel-options endpoint.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AlternativeProducts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'str',
        'product_id': 'str',
        'selected_amount': 'SelectedAmount'
    }

    attribute_map = {
        'source_id': 'sourceId',
        'product_id': 'productId',
        'selected_amount': 'selectedAmount'
    }

    def __init__(self, source_id=None, product_id=None, selected_amount=None):  # noqa: E501
        """AlternativeProducts - a model defined in Swagger"""  # noqa: E501
        self._source_id = None
        self._product_id = None
        self._selected_amount = None
        self.discriminator = None
        if source_id is not None:
            self.source_id = source_id
        if product_id is not None:
            self.product_id = product_id
        if selected_amount is not None:
            self.selected_amount = selected_amount

    @property
    def source_id(self):
        """Gets the source_id of this AlternativeProducts.  # noqa: E501

        order product id  # noqa: E501

        :return: The source_id of this AlternativeProducts.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this AlternativeProducts.

        order product id  # noqa: E501

        :param source_id: The source_id of this AlternativeProducts.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def product_id(self):
        """Gets the product_id of this AlternativeProducts.  # noqa: E501

        menu product id  # noqa: E501

        :return: The product_id of this AlternativeProducts.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this AlternativeProducts.

        menu product id  # noqa: E501

        :param product_id: The product_id of this AlternativeProducts.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def selected_amount(self):
        """Gets the selected_amount of this AlternativeProducts.  # noqa: E501


        :return: The selected_amount of this AlternativeProducts.  # noqa: E501
        :rtype: SelectedAmount
        """
        return self._selected_amount

    @selected_amount.setter
    def selected_amount(self, selected_amount):
        """Sets the selected_amount of this AlternativeProducts.


        :param selected_amount: The selected_amount of this AlternativeProducts.  # noqa: E501
        :type: SelectedAmount
        """

        self._selected_amount = selected_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlternativeProducts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlternativeProducts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
