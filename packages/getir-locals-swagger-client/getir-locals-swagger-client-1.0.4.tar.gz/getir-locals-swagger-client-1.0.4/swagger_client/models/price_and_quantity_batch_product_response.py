# coding: utf-8

"""
    Getir-Locals Integration Swagger Documentation

    This documentation is created by Getir Developers for Getir-Locals Integration.For this integration, you need to take CLIENT NAME and CLIENT SECRET keys from Getir-dev team and use these keys for authentication. You also need to use access token provided after successful login to be able to use all other endpoints  You can view information about the active order through /orders/unapproved endpoints. The status of the order is managed via verify, prepare, handover and cancel endpoints. Details on order management are as follows:  For orders to be made by the Getir courier, the flow is as follows:  Supplier confirms order --verify<br />Supplier prepares order --prepare (1-2 minutes must pass before delivery)<br />Supplier hands over the order to Getir courier --handover<br />For Getir delivery, transactions are made by the Getir courier after handover.  A valid reason will be requested from the supplier to cancel an order. Valid reasons may vary depending on the instant status of the order. For this reason, before canceling an order, you have to get instant valid order cancellation reasons from /orders/{orderId}/cancel-options endpoint.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PriceAndQuantityBatchProductResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'getir_id': 'str',
        'quantity': 'int',
        'price': 'float',
        'old_price': 'float',
        'shop_id': 'str',
        'status': 'str',
        'error_message': 'str'
    }

    attribute_map = {
        'getir_id': 'getirId',
        'quantity': 'quantity',
        'price': 'price',
        'old_price': 'oldPrice',
        'shop_id': 'shopId',
        'status': 'status',
        'error_message': 'errorMessage'
    }

    def __init__(self, getir_id=None, quantity=None, price=None, old_price=None, shop_id=None, status=None, error_message=None):  # noqa: E501
        """PriceAndQuantityBatchProductResponse - a model defined in Swagger"""  # noqa: E501
        self._getir_id = None
        self._quantity = None
        self._price = None
        self._old_price = None
        self._shop_id = None
        self._status = None
        self._error_message = None
        self.discriminator = None
        if getir_id is not None:
            self.getir_id = getir_id
        if quantity is not None:
            self.quantity = quantity
        if price is not None:
            self.price = price
        if old_price is not None:
            self.old_price = old_price
        if shop_id is not None:
            self.shop_id = shop_id
        if status is not None:
            self.status = status
        if error_message is not None:
            self.error_message = error_message

    @property
    def getir_id(self):
        """Gets the getir_id of this PriceAndQuantityBatchProductResponse.  # noqa: E501


        :return: The getir_id of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._getir_id

    @getir_id.setter
    def getir_id(self, getir_id):
        """Sets the getir_id of this PriceAndQuantityBatchProductResponse.


        :param getir_id: The getir_id of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :type: str
        """

        self._getir_id = getir_id

    @property
    def quantity(self):
        """Gets the quantity of this PriceAndQuantityBatchProductResponse.  # noqa: E501


        :return: The quantity of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this PriceAndQuantityBatchProductResponse.


        :param quantity: The quantity of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this PriceAndQuantityBatchProductResponse.  # noqa: E501


        :return: The price of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PriceAndQuantityBatchProductResponse.


        :param price: The price of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def old_price(self):
        """Gets the old_price of this PriceAndQuantityBatchProductResponse.  # noqa: E501


        :return: The old_price of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :rtype: float
        """
        return self._old_price

    @old_price.setter
    def old_price(self, old_price):
        """Sets the old_price of this PriceAndQuantityBatchProductResponse.


        :param old_price: The old_price of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :type: float
        """

        self._old_price = old_price

    @property
    def shop_id(self):
        """Gets the shop_id of this PriceAndQuantityBatchProductResponse.  # noqa: E501


        :return: The shop_id of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this PriceAndQuantityBatchProductResponse.


        :param shop_id: The shop_id of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :type: str
        """

        self._shop_id = shop_id

    @property
    def status(self):
        """Gets the status of this PriceAndQuantityBatchProductResponse.  # noqa: E501


        :return: The status of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PriceAndQuantityBatchProductResponse.


        :param status: The status of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["IN_PROGRESS", "SUCCESS", "VALIDATION_ERROR", "CATALOG_PRODUCT_NOT_FOUND", "SERVER_ERROR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def error_message(self):
        """Gets the error_message of this PriceAndQuantityBatchProductResponse.  # noqa: E501


        :return: The error_message of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this PriceAndQuantityBatchProductResponse.


        :param error_message: The error_message of this PriceAndQuantityBatchProductResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PriceAndQuantityBatchProductResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PriceAndQuantityBatchProductResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
