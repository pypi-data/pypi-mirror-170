# coding: utf-8

"""
    Getir-Locals Integration Swagger Documentation

    This documentation is created by Getir Developers for Getir-Locals Integration.For this integration, you need to take CLIENT NAME and CLIENT SECRET keys from Getir-dev team and use these keys for authentication. You also need to use access token provided after successful login to be able to use all other endpoints  You can view information about the active order through /orders/unapproved endpoints. The status of the order is managed via verify, prepare, handover and cancel endpoints. Details on order management are as follows:  For orders to be made by the Getir courier, the flow is as follows:  Supplier confirms order --verify<br />Supplier prepares order --prepare (1-2 minutes must pass before delivery)<br />Supplier hands over the order to Getir courier --handover<br />For Getir delivery, transactions are made by the Getir courier after handover.  A valid reason will be requested from the supplier to cancel an order. Valid reasons may vary depending on the instant status of the order. For this reason, before canceling an order, you have to get instant valid order cancellation reasons from /orders/{orderId}/cancel-options endpoint.   # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PackagingInfoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bag': 'BagResponse',
        'total_packageable_product_volume': 'int',
        'bag_calculated_count': 'int',
        'bag_count': 'int',
        'total_packaging_price': 'float'
    }

    attribute_map = {
        'bag': 'bag',
        'total_packageable_product_volume': 'totalPackageableProductVolume',
        'bag_calculated_count': 'bagCalculatedCount',
        'bag_count': 'bagCount',
        'total_packaging_price': 'totalPackagingPrice'
    }

    def __init__(self, bag=None, total_packageable_product_volume=None, bag_calculated_count=None, bag_count=None, total_packaging_price=None):  # noqa: E501
        """PackagingInfoResponse - a model defined in Swagger"""  # noqa: E501
        self._bag = None
        self._total_packageable_product_volume = None
        self._bag_calculated_count = None
        self._bag_count = None
        self._total_packaging_price = None
        self.discriminator = None
        if bag is not None:
            self.bag = bag
        if total_packageable_product_volume is not None:
            self.total_packageable_product_volume = total_packageable_product_volume
        if bag_calculated_count is not None:
            self.bag_calculated_count = bag_calculated_count
        if bag_count is not None:
            self.bag_count = bag_count
        if total_packaging_price is not None:
            self.total_packaging_price = total_packaging_price

    @property
    def bag(self):
        """Gets the bag of this PackagingInfoResponse.  # noqa: E501


        :return: The bag of this PackagingInfoResponse.  # noqa: E501
        :rtype: BagResponse
        """
        return self._bag

    @bag.setter
    def bag(self, bag):
        """Sets the bag of this PackagingInfoResponse.


        :param bag: The bag of this PackagingInfoResponse.  # noqa: E501
        :type: BagResponse
        """

        self._bag = bag

    @property
    def total_packageable_product_volume(self):
        """Gets the total_packageable_product_volume of this PackagingInfoResponse.  # noqa: E501


        :return: The total_packageable_product_volume of this PackagingInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_packageable_product_volume

    @total_packageable_product_volume.setter
    def total_packageable_product_volume(self, total_packageable_product_volume):
        """Sets the total_packageable_product_volume of this PackagingInfoResponse.


        :param total_packageable_product_volume: The total_packageable_product_volume of this PackagingInfoResponse.  # noqa: E501
        :type: int
        """

        self._total_packageable_product_volume = total_packageable_product_volume

    @property
    def bag_calculated_count(self):
        """Gets the bag_calculated_count of this PackagingInfoResponse.  # noqa: E501


        :return: The bag_calculated_count of this PackagingInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._bag_calculated_count

    @bag_calculated_count.setter
    def bag_calculated_count(self, bag_calculated_count):
        """Sets the bag_calculated_count of this PackagingInfoResponse.


        :param bag_calculated_count: The bag_calculated_count of this PackagingInfoResponse.  # noqa: E501
        :type: int
        """

        self._bag_calculated_count = bag_calculated_count

    @property
    def bag_count(self):
        """Gets the bag_count of this PackagingInfoResponse.  # noqa: E501


        :return: The bag_count of this PackagingInfoResponse.  # noqa: E501
        :rtype: int
        """
        return self._bag_count

    @bag_count.setter
    def bag_count(self, bag_count):
        """Sets the bag_count of this PackagingInfoResponse.


        :param bag_count: The bag_count of this PackagingInfoResponse.  # noqa: E501
        :type: int
        """

        self._bag_count = bag_count

    @property
    def total_packaging_price(self):
        """Gets the total_packaging_price of this PackagingInfoResponse.  # noqa: E501


        :return: The total_packaging_price of this PackagingInfoResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_packaging_price

    @total_packaging_price.setter
    def total_packaging_price(self, total_packaging_price):
        """Sets the total_packaging_price of this PackagingInfoResponse.


        :param total_packaging_price: The total_packaging_price of this PackagingInfoResponse.  # noqa: E501
        :type: float
        """

        self._total_packaging_price = total_packaging_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackagingInfoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackagingInfoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
