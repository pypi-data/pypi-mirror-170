{"version":3,"file":"conditionOperatorModel.js","names":["Djblets","Forms","ConditionOperator","Backbone","Model","extend","defaults","name","useValue","valueField","createValueField","fieldName","get","console","assert","viewClass","_","model","modelClass","modelData","viewData","parse","data","id","ConditionChoice","parseValueFieldData"],"sources":["../../../../../../static/djblets/js/forms/models/conditionOperatorModel.es6.js"],"sourcesContent":["/**\n * A possible operator for a condition choice.\n *\n * An operator simply stores state indicating the operator name, ID, and whether\n * the user should be prompted for a value.\n *\n * Model Attributes:\n *     name (string):\n *         The human-readable name of the operator.\n *\n *     useValue (boolean):\n *         Whether the user should be prompted for a value. Defaults to\n *         ``false``.\n *\n *     valueField (object):\n *         Information about the object handling the storage and manipulation\n *         of values for the condition. If set, it will override the default\n *         value for the condition.\n *\n *         This will have ``modelClass` and ``viewClass`` keys pointing to the\n *         object constructors for the model and view for the value field,\n *         along with ``modelData`` and ``viewData`` controlling the model\n *         attributes and view options, respectively.\n */\nDjblets.Forms.ConditionOperator = Backbone.Model.extend({\n    defaults: {\n        name: null,\n        useValue: false,\n        valueField: null\n    },\n\n    /**\n     * Create the value field for the operator.\n     *\n     * This will construct a new instance of the view used to take values for\n     * this operator.\n     *\n     * Args:\n     *     fieldName (string):\n     *         The name for the form field.\n     *\n     * Returns:\n     *     Djblets.Forms.BaseConditionValueFieldView:\n     *     The view for the field.\n     */\n    createValueField(fieldName) {\n        const valueField = this.get('valueField');\n\n        console.assert(valueField,\n                       'This operator does not have a custom valueField.');\n\n        return new valueField.viewClass(_.defaults({\n            model: new valueField.modelClass(_.defaults({\n                fieldName: fieldName\n            }, valueField.modelData))\n        }, valueField.viewData));\n    },\n\n    /**\n     * Parse the attribute data passed to the model.\n     *\n     * Args:\n     *     data (object):\n     *         The attribute data passed to the model.\n     *\n     *  Returns:\n     *     object:\n     *     The parsed attributes.\n     */\n    parse(data) {\n        return {\n            id: data.id,\n            name: data.name,\n            useValue: data.useValue,\n            valueField: Djblets.Forms.ConditionChoice.parseValueFieldData(\n                data.valueField)\n        };\n    }\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,OAAO,CAACC,KAAR,CAAcC,iBAAd,GAAkCC,QAAQ,CAACC,KAAT,CAAeC,MAAf,CAAsB;EACpDC,QAAQ,EAAE;IACNC,IAAI,EAAE,IADA;IAENC,QAAQ,EAAE,KAFJ;IAGNC,UAAU,EAAE;EAHN,CAD0C;;EAOpD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,gBAAgB,CAACC,SAAD,EAAY;IACxB,MAAMF,UAAU,GAAG,KAAKG,GAAL,CAAS,YAAT,CAAnB;IAEAC,OAAO,CAACC,MAAR,CAAeL,UAAf,EACe,kDADf;IAGA,OAAO,IAAIA,UAAU,CAACM,SAAf,CAAyBC,CAAC,CAACV,QAAF,CAAW;MACvCW,KAAK,EAAE,IAAIR,UAAU,CAACS,UAAf,CAA0BF,CAAC,CAACV,QAAF,CAAW;QACxCK,SAAS,EAAEA;MAD6B,CAAX,EAE9BF,UAAU,CAACU,SAFmB,CAA1B;IADgC,CAAX,EAI7BV,UAAU,CAACW,QAJkB,CAAzB,CAAP;EAKH,CAhCmD;;EAkCpD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,KAAK,CAACC,IAAD,EAAO;IACR,OAAO;MACHC,EAAE,EAAED,IAAI,CAACC,EADN;MAEHhB,IAAI,EAAEe,IAAI,CAACf,IAFR;MAGHC,QAAQ,EAAEc,IAAI,CAACd,QAHZ;MAIHC,UAAU,EAAET,OAAO,CAACC,KAAR,CAAcuB,eAAd,CAA8BC,mBAA9B,CACRH,IAAI,CAACb,UADG;IAJT,CAAP;EAOH;;AArDmD,CAAtB,CAAlC"}