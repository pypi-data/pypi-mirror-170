{"version":3,"file":"conditionSetView.js","names":["BaseConditionRowView","Backbone","View","extend","tagName","className","events","initialize","options","listenTo","model","$el","slideUp","rowAnimationSpeedMS","remove","bind","_onDeleteClicked","e","stopPropagation","preventDefault","destroy","ConditionRowView","template","_","join","prototype","call","conditionSet","_$choice","_$operator","_$valueWrapper","_$newValue","_defaultValueField","_valueField","render","html","attributes","$rowOptions","children","fieldName","get","rowNum","$","attr","choices","each","choice","append","val","id","text","appendTo","_onChoiceChanged","_onOperatorChanged","_onValueChanged","createValueField","empty","operators","operator","newValueField","setVisible","setValue","_onSelectChoiceChanged","set","_onSelectOperatorChanged","DisabledConditionRowView","value","Djblets","Forms","ConditionSetView","DEFAULT_ROW_ANIMATION_SPEED_MS","_rowAnimationSpeedMS","_$lastID","_$rows","conditions","bindProperty","_$mode","_$rowsContainer","$rowItems","condition","i","_addConditionRow","_onConditionModeChanged","$rowEl","RowViewCls","rowView","el","undefined","hide","slideDown","_onAddRowClicked","addNewCondition","mode","filter"],"sources":["../../../../../../static/djblets/js/forms/views/conditionSetView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * Base view for condition rows.\n *\n * This is responsible for handling common logic for condition row views. It's\n * mainly used to handle deletion of the row.\n */\nconst BaseConditionRowView = Backbone.View.extend({\n    tagName: 'li',\n    className: 'conditions-field-row',\n\n    events: {\n        'click .conditions-field-row-delete': '_onDeleteClicked'\n    },\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     rowAnimationSpeedMS (number):\n     *         The animation speed for adding/removing rows.\n     */\n    initialize(options) {\n        this.listenTo(this.model, 'destroy', () => {\n            this.$el.slideUp(options.rowAnimationSpeedMS,\n                             this.remove.bind(this));\n        });\n    },\n\n    /**\n     * Callback for when the delete button is clicked.\n     *\n     * Deletes the model, which will in turn delete this row.\n     */\n    _onDeleteClicked(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        this.model.destroy();\n    }\n});\n\n\n/**\n * A view representing a row containing a choice, operator, and value.\n *\n * This is responsible for allowing a user to choose the values for one\n * condition. Choosing a choice will populate a list of operators, and choosing\n * an operator will show or hide a value field (depending on the operator).\n */\nconst ConditionRowView = BaseConditionRowView.extend({\n    template: _.template([\n        '<span class=\"conditions-field-action conditions-field-row-delete\">\\n',\n        ' <span class=\"fa fa-minus-circle\"></span>\\n',\n        '</span>\\n',\n        '<span class=\"conditions-field-row-options\">\\n',\n        ' <% if (error) { %>',\n        '  <ul class=\"error-list\"><li><%- error %></li></ul>\\n',\n        ' <% } %>',\n        ' <span class=\"conditions-field-choice\"></span>\\n',\n        ' <span class=\"conditions-field-operator\"></span>\\n',\n        ' <span class=\"conditions-field-value\"></span>\\n',\n        '</span>'\n    ].join('')),\n\n    events: _.extend({\n        'change .conditions-field-choice select': '_onSelectChoiceChanged',\n        'change .conditions-field-operator select': '_onSelectOperatorChanged'\n    }, BaseConditionRowView.prototype.events),\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     conditionSet (Djblets.Forms.ConditionSet):\n     *         The condition set defining the choices allowed. This is\n     *         required.\n     *\n     *     rowAnimationSpeedMS (number):\n     *         The animation speed for adding/removing rows.\n     */\n    initialize(options) {\n        BaseConditionRowView.prototype.initialize.call(this, options);\n\n        this.conditionSet = options.conditionSet;\n\n        this._$choice = null;\n        this._$operator = null;\n        this._$valueWrapper = null;\n        this._$newValue = null;\n        this._defaultValueField = null;\n        this._valueField = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will create and populate the choice, operator and value fields,\n     * based on the contents of the model, and begin listening to events.\n     *\n     * Returns:\n     *     ConditionRowView:\n     *     The instance, for chaining.\n     */\n    render() {\n        this.$el.html(this.template(this.model.attributes));\n\n        const $rowOptions = this.$el.children('.conditions-field-row-options');\n        const fieldName = this.conditionSet.get('fieldName');\n        const rowNum = this.model.get('id');\n\n        /* Build the list of choices. This will be populated up-front. */\n        this._$choice = $('<select/>')\n            .attr('name', `${fieldName}_choice[${rowNum}]`);\n\n        this.conditionSet.choices.each(choice => {\n            this._$choice.append($('<option/>')\n                .val(choice.id)\n                .text(choice.get('name')));\n        });\n\n        this._$choice\n            .appendTo($rowOptions.children('.conditions-field-choice'));\n\n        /*\n         * Build the list for the operators. This will be populated when\n         * calling _onChoiceChanged, and whenever the choice changes.\n         */\n        this._$operator = $('<select/>')\n            .attr('name', `${fieldName}_operator[${rowNum}]`)\n            .appendTo($rowOptions.children('.conditions-field-operator'));\n\n        this._$valueWrapper = $rowOptions.children('.conditions-field-value');\n\n        /*\n         * Bind all the events so the attributes and inputs reflect each other.\n         * We'll also be binding visibility.\n         */\n        this.listenTo(this.model, 'change:choice', this._onChoiceChanged);\n        this.listenTo(this.model, 'change:operator', this._onOperatorChanged);\n        this.listenTo(this.model, 'change:value', this._onValueChanged);\n\n        /* Set the initial state for the choice and operator from the model. */\n        this._onChoiceChanged();\n        this._onOperatorChanged();\n        this._onValueChanged();\n\n        return this;\n    },\n\n    /**\n     * Callback for when the choice attribute changes on the model.\n     *\n     * Updates the list of operators and sets up a new field for the value,\n     * getting rid of the old one.\n     */\n    _onChoiceChanged() {\n        const choice = this.model.get('choice');\n        const fieldName = this.conditionSet.get('fieldName');\n        const rowNum = this.model.get('id');\n\n        this._$choice.val(choice.id);\n\n        this._defaultValueField = choice.createValueField(\n            `${fieldName}_value[${rowNum}]`);\n\n        /* Rebuild the list of operators for the choice. */\n        this._$operator.empty();\n\n        choice.operators.each(operator => {\n            this._$operator.append(\n                $('<option/>')\n                    .val(operator.id)\n                    .text(operator.get('name')));\n        });\n\n        this._$operator.val(this.model.get('operator').id);\n    },\n\n    /**\n     * Callback for when the operator changes on the model.\n     *\n     * Updates the visibility of the value, based on whether the operator\n     * needs one.\n     */\n    _onOperatorChanged() {\n        const operator = this.model.get('operator');\n        let newValueField;\n\n        this._$operator.val(operator.id);\n        this._$valueWrapper.setVisible(operator.get('useValue'));\n\n        if (operator.get('valueField') !== null) {\n            const fieldName = this.conditionSet.get('fieldName');\n            const rowNum = this.model.get('id');\n\n            newValueField = operator.createValueField(\n                `${fieldName}_value[${rowNum}]`);\n        } else {\n            newValueField = this._defaultValueField;\n        }\n\n        if (newValueField !== this._valueField) {\n            /* Replace the old value field with a new one for this choice. */\n            if (this._$newValue !== null && newValueField !== this._valueField) {\n                this._$newValue.remove();\n                this._$newValue = null;\n            }\n\n            this._valueField = newValueField;\n\n            this._$newValue = this._valueField.render().$el\n                .appendTo(this._$valueWrapper);\n        }\n    },\n\n    /**\n     * Callback for when the value changes on the model.\n     *\n     * Updates the field to reflect the new value.\n     */\n    _onValueChanged() {\n        this._valueField.setValue(this.model.get('value'));\n    },\n\n    /**\n     * Callback for when a new condition choice is chosen in the drop-down.\n     *\n     * Updates the choice in the model.\n     */\n    _onSelectChoiceChanged() {\n        this.model.set('choice',\n                       this.conditionSet.choices.get(this._$choice.val()));\n    },\n\n    /**\n     * Callback for when a new operator is chosen in the drop-down.\n     *\n     * Updates the operator in the model.\n     */\n    _onSelectOperatorChanged() {\n        const choice = this.model.get('choice');\n\n        this.model.set('operator', choice.operators.get(this._$operator.val()));\n    }\n});\n\n\n/**\n * A view representing a disabled condition row.\n *\n * This is used for conditions that are considered invalid (ones whose choice\n * or operator could not be found when loading). The condition is shown in a\n * disabled state, with the raw value alongside it (if set). It can only be\n * removed.\n */\nconst DisabledConditionRowView = BaseConditionRowView.extend({\n    render() {\n        const value = this.model.get('value');\n\n        if (value !== null) {\n            this.$('.conditions-field-value').text(value);\n        }\n\n        return this;\n    }\n});\n\n\n/**\n * A view for creating, editing, and deleting a set of conditions.\n *\n * This starts off by listing all the conditions already configured (as\n * represented by the data in the associated model), and allows those\n * conditions to be edited/deleted or new ones to be created.\n *\n * Options:\n *     rowAnimationSpeedMS (number):\n *         The animation speed (in milliseconds) for adding or removing\n *         condition rows.\n */\nDjblets.Forms.ConditionSetView = Backbone.View.extend({\n    DEFAULT_ROW_ANIMATION_SPEED_MS: 300,\n\n    events: {\n        'click .conditions-field-add-condition': '_onAddRowClicked',\n        'change #conditions_mode input': '_onConditionModeChanged',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize(options) {\n        this._rowAnimationSpeedMS = options.rowAnimationSpeedMS ||\n                                    this.DEFAULT_ROW_ANIMATION_SPEED_MS;\n\n        this._$lastID = null;\n        this._$rows = null;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will construct a :js:class:`ConditionRowView` for each condition\n     * that has been provided, and hook up events to handle the creation or\n     * deletion of conditions.\n     *\n     * Returns:\n     *     Djblets.Forms.ConditionSetView:\n     *     This instance, for chaining.\n     */\n    render() {\n        const fieldName = this.model.get('fieldName');\n        const conditions = this.model.conditions;\n\n        this._$lastID = this.$el.children(`input[name=${fieldName}_last_id]`)\n            .bindProperty('value', this.model, 'lastID');\n        this._$mode = this.$('#conditions_mode input');\n        this._$rowsContainer = this.$('.conditions-field-rows-container');\n        this._$rows = this._$rowsContainer.children('.conditions-field-rows');\n\n        /* Render rows for any existing conditions. */\n        const $rowItems = this._$rows.children();\n\n        conditions.each((condition, i) => {\n            this._addConditionRow(condition, $rowItems[i]);\n        });\n\n        /* Begin listening for any events that impact the rows or inputs. */\n        this.listenTo(conditions, 'add',\n                      condition => this._addConditionRow(condition));\n\n        this._onConditionModeChanged();\n\n        return this;\n    },\n\n    /**\n     * Add a condition row to the UI.\n     *\n     * This is called when a new condition has been added in the models. It\n     * constructs a :js:class:`ConditionRowView` and renders it in the list.\n     *\n     * Args:\n     *     condition (Djblets.Forms.Condition):\n     *         The condition being added.\n     *\n     *     $rowEl (jQuery):\n     *         The element to use for the row. If not provided, a new one\n     *         will be created.\n     */\n    _addConditionRow(condition, $rowEl) {\n        const RowViewCls = condition.get('valid')\n                           ? ConditionRowView\n                           : DisabledConditionRowView;\n\n        const rowView = new RowViewCls({\n            conditionSet: this.model,\n            el: $rowEl,\n            model: condition,\n            rowAnimationSpeedMS: this._rowAnimationSpeedMS\n        });\n        rowView.render();\n\n        if ($rowEl === undefined) {\n            rowView.$el\n                .hide()\n                .appendTo(this._$rows)\n                .slideDown(this._rowAnimationSpeedMS);\n        }\n    },\n\n    /**\n     * Handler for when \"Add a new condition\" is clicked.\n     *\n     * This adds a new condition to the model, which will in turn render the\n     * new row to the list.\n     *\n     * Args:\n     *     e (Event):\n     *         The click event.\n     */\n    _onAddRowClicked(e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        this.model.addNewCondition();\n    },\n\n    /**\n     * Handler for when the condition mode changes.\n     *\n     * If the current mode is \"Always\", hide the conditions list.\n     */\n    _onConditionModeChanged() {\n        const mode = this._$mode.filter(':checked').val();\n\n        this._$rowsContainer.setVisible(mode !== 'always');\n    },\n});\n\n\n})();\n"],"mappings":"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"}