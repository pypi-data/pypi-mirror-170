# Class: {{ gen.name(element) }}

{%- if header -%}
{{header}}
{%- endif -%}


{% if element.description %}
_{{ element.description }}_
{% endif %}

{% if element.abstract %}
* __NOTE__: this is an abstract class and should not be instantiated directly
{% endif %}
{% if element.mixin %}
* __NOTE__: this is a mixin class intended to be used in combination with other classes, and not used directly
{% endif %}

URI: {{ gen.uri_link(element) }}



{% if schemaview.class_parents(element.name) and schemaview.class_children(element.name) %}
```{{ gen.mermaid_directive() }}
 classDiagram
    class {{ gen.name(element) }}
      {% for s in schemaview.class_parents(element.name)|sort(attribute='name') -%}
        {{ gen.name(schemaview.get_element(s)) }} <|-- {{ gen.name(element) }}
      {% endfor %}
      {% for s in schemaview.class_induced_slots(element.name)|sort(attribute='name') -%}
        {{ gen.name(element) }} : {{gen.name(s)}}
      {% endfor %}

      {% for s in schemaview.class_children(element.name)|sort(attribute='name') -%}
        {{ gen.name(element) }} <|-- {{ gen.name(schemaview.get_element(s)) }}
      {% endfor %}
      {% for s in schemaview.class_induced_slots(element.name)|sort(attribute='name') -%}
        {{ gen.name(element) }} : {{gen.name(s)}}
      {% endfor %}
```
{% elif schemaview.class_parents(element.name) %}
```{{ gen.mermaid_directive() }}
 classDiagram
    class {{ gen.name(element) }}
      {% for s in schemaview.class_parents(element.name)|sort(attribute='name') -%}
        {{ gen.name(schemaview.get_element(s)) }} <|-- {{ gen.name(element) }}
      {% endfor %}
      {% for s in schemaview.class_induced_slots(element.name)|sort(attribute='name') -%}
        {{ gen.name(element) }} : {{gen.name(s)}}
      {% endfor %}
```
{% elif schemaview.class_children(element.name)  %}
```{{ gen.mermaid_directive() }}
 classDiagram
    class {{ gen.name(element) }}
      {% for s in schemaview.class_children(element.name)|sort(attribute='name') -%}
        {{ gen.name(element) }} <|-- {{ gen.name(schemaview.get_element(s)) }}
      {% endfor %}
      {% for s in schemaview.class_induced_slots(element.name)|sort(attribute='name') -%}
        {{ gen.name(element) }} : {{gen.name(s)}}
      {% endfor %}
```
{% else %}
```{{ gen.mermaid_directive() }}
 classDiagram
    class {{ gen.name(element) }}
      {% for s in schemaview.class_induced_slots(element.name)|sort(attribute='name') -%}
        {{ gen.name(element) }} : {{gen.name(s)}}
      {% endfor %}
```
{% endif %}


{% if schemaview.class_parents(element.name) or schemaview.class_children(element.name, mixins=False) %}

## Inheritance
{{ gen.inheritance_tree(element, mixins=True) }}
{% else %}
<!-- no inheritance hierarchy -->
{% endif %}

## Slots

| Name | Cardinality and Range | Description | Inheritance |
| ---  | --- | --- | --- |
{% for s in schemaview.class_induced_slots(element.name) -%}
{% if s.name in gen.get_direct_slots(element) -%}
| {{gen.link(s)}} | {{ gen.cardinality(s) }} <br/> {{ gen.link(s.range) }} | {{ s.description }}  | direct |
{% endif -%}
{%- if s.name in gen.get_indirect_slots(element) -%}
| {{gen.link(s)}} | {{gen.link(s.range)}} | {{ gen.cardinality(s) }} | {{ s.description }}  | inherited |
{% endif -%}
{%- if s.name in gen.get_mixin_inherited_slots(element).items() -%}
| {{gen.link(s)}} | {{gen.link(s.range)}} | {{ gen.cardinality(s) }} | {{ s.description }}  | mixin |
{% endif -%}
{%- endfor %}

{% if schemaview.usage_index().get(element.name) %}
## Usages

| used by | used in | type | used |
| ---  | --- | --- | --- |
{% for usage in schemaview.usage_index().get(element.name) -%}
| {{gen.link(usage.used_by)}} | {{gen.link(usage.slot)}} | {{usage.metaslot}} | {{usage.used }} |
{% endfor %}
{% endif %}

{% include "common_metadata.md.jinja2" %}


{% if schemaview.get_mappings(element.name).items() -%}
## Mappings

| Mapping Type | Mapped Value |
| ---  | ---  |
{% for m, mt in schemaview.get_mappings(element.name).items() -%}
{% if mt|length > 0 -%}
| {{ m }} | {{ mt }}|join(', ') |
{% endif -%}
{% endfor %}

{% endif -%}


## LinkML Source

<!-- TODO: investigate https://stackoverflow.com/questions/37606292/how-to-create-tabbed-code-blocks-in-mkdocs-or-sphinx -->

### Direct

<details>
```yaml
{{gen.yaml(element)}}
```
</details>

### Induced

<details>
```yaml
{{gen.yaml(element, inferred=True)}}
```
</details>

{%- if footer -%}
{{footer}}
{%- endif -%}