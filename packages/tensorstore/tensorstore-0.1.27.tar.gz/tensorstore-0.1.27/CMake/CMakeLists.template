# Copyright 2022 The TensorStore Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NOTE: This is still very much a work in progress; It is not yet expected to
# build.

cmake_minimum_required(VERSION 3.20)
project(tensorstore LANGUAGES CXX)


# Compiler id for Apple Clang is now AppleClang.
if (POLICY CMP0025)
  cmake_policy(SET CMP0025 NEW)
endif (POLICY CMP0025)

# Project version variables are the empty string if version is unspecified
if (POLICY CMP0048)
  cmake_policy(SET CMP0048 NEW)
endif (POLICY CMP0048)

# if command can use IN_LIST
if (POLICY CMP0057)
  cmake_policy(SET CMP0057 NEW)
endif (POLICY CMP0057)

# if command can use TEST
if (POLICY CMP0064)
  cmake_policy(SET CMP0064 NEW)
endif (POLICY CMP0064)

# option() honor variables
if (POLICY CMP0077)
  cmake_policy(SET CMP0077 NEW)
endif (POLICY CMP0077)

# Allow the user to specify the MSVC runtime
if (POLICY CMP0091)
  cmake_policy(SET CMP0091 NEW)
endif (POLICY CMP0091)

# Set all outputs to a single /bin directory.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

set(CMAKE_CXX_STANDARD 17)

# TODO: Improve "install" rules.
# Maybe set CMAKE_INSTALL_PREFIX to ${CMAKE_BINARY_DIR}/install
option(TENSORSTORE_ENABLE_INSTALL "Enable install rule" OFF)

# TODO: Abseil includes "opts" macros; consider adding.

list(APPEND CMAKE_MODULE_PATH
  ${CMAKE_CURRENT_LIST_DIR}/CMake
)

include(CTest)
include(CMakePackageConfigHelpers)
include(CMakeDependentOption)
include(DebugHelpers)
include(TensorstoreHelpers)
include(ProtobufHelpers)

##
## Using tensorstore targets
##
## all public tensorstore targets are
## exported with the tensorstore:: prefix
##
## DO NOT rely on the internal targets outside of the prefix

## Abseil requires PIC code; we generally use the same.
set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)

# include current path
list(APPEND TENSORSTORE_COMMON_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR})

list(APPEND TENSORSTORE_DEFAULT_COPTS
    "-Wno-deprecated-declarations"
    "-Wno-sign-compare"
    "-Wno-unused-but-set-parameter"
    "-Wno-maybe-uninitialized"
    "-Wno-unknown-warning-option")

list(APPEND TENSORSTORE_TEST_COPTS
    "-Wno-deprecated-declarations"
    "-Wno-sign-compare"
    "-Wno-unused-but-set-parameter"
    "-Wno-maybe-uninitialized"
    "-Wno-unknown-warning-option")

#    "-fsized-deallocation"
#     "-Wreturn-type"
#     "-Wunused-function"
#     "-Wunused-but-set-variable")




# TENSORSTORE_DEFAULT_LINKOPTS

find_package(Threads REQUIRED)

{root_template}

# dump_cmake_variables()
# dump_cmake_targets(${CMAKE_BINARY_DIR})

# We could consider a strategy where we generate the sub CMakeLists.txt files:
# https://stackoverflow.com/questions/52556785/code-generator-generating-its-own-cmake-files-and-targets

{add_subdir_template}

if(TENSORSTORE_ENABLE_INSTALL)
  list(APPEND SYSTEM_INSTALL_DIRS "/usr/local" "/usr" "/opt/" "/opt/local" "c:/Program Files/${PROJECT_NAME}")

  if(NOT DEFINED CMAKE_INSTALL_PREFIX OR CMAKE_INSTALL_PREFIX IN_LIST SYSTEM_INSTALL_DIRS)
    message(WARNING "\
  The default and system-level install directories are unsupported. \
  Please set CMAKE_INSTALL_PREFIX to install Tensorstore in your source or \
  build tree directly.\
    ")
  endif()

  install(EXPORT ${PROJECT_NAME}Targets
    NAMESPACE tensorstore::
    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
  )

endif()