# Description:
#   The libaom package is the reference codec for AV1 and AVIF.
#
load("@bazel_skylib//rules:expand_template.bzl", "expand_template")
load("@bazel_skylib//rules:write_file.bzl", "write_file")
load("@com_google_tensorstore//:rules_nasm.bzl", "nasm_library")

package(default_visibility = ["//visibility:private"])

licenses(["notice"])

exports_files(["LICENSE"])

# used for textual_hdrs, since libaom is a bit imprecise about include boundaries.
LIBAOM_HEADERS_PATTERN = [
    "aom/*.h",
    "aom/internal/*.h",
    "aom_dsp/*.h",
    "aom_dsp/**/*.h",
    "aom_mem/*.h",
    "aom_mem/include/*.h",
    "aom_ports/*.h",
    "aom_scale/*.h",
    "aom_util/*.h",
    "av1/*.h",
    "av1/common/*.h",
    "av1/encoder/*.h",
    "av1/decoder/*.h",
    "common/*.h",
]

LIBAOM_HEADERS = select({
    ":arm64": glob(
        LIBAOM_HEADERS_PATTERN + [
            "av1/common/arm/*.h",
            "aom_dsp/arm/*.h",
        ],
        exclude = [
            "aom_ports/ppc.h",
            "**/mips/**",
            "**/*x86.h",
            "**/*avx2.h",
            "**/*sse2.h",
            "**/*sse4.h",
            "**/*sse4_1.h",
            "**/*ssse3.h",
        ],
    ),
    "//conditions:default": glob(
        LIBAOM_HEADERS_PATTERN + [
            "av1/common/x86/*.h",
            "av1/encoder/x86/*.h",
            "aom_dsp/x86/*.h",
        ],
        exclude = [
            "aom_ports/ppc.h",
            "**/mips/**",
            "**/*arm.h",
        ],
    ),
})

LIBAOM_COPTS = select({
    ":compiler_msvc": [
        "/W3",
        "/wd4996",
    ],
    "@platforms//os:macos": [
        "-std=c99",
        "-Wno-implicit-function-declaration",
    ],
    ":compiler_clang": [
        "-std=c99",
    ],
    # Assume GCC by default.
    "//conditions:default": [
        "-std=c99",
        "-Wno-array-parameter",
        "-Wno-stringop-overread",
        "-Wno-stringop-overflow",
    ],
}) + select({
    ":arm64": [
        "-DNEON_INTRINSICS",
    ],
    "//conditions:default": [],
})

NASM_INCLUDES = [
    "LICENSE",  # To get -I./
    "config/aom_config.asm",
    "aom_ports/x86_abi_support.asm",
    "third_party/x86inc/x86inc.asm",
]

NASM_FLAGS = ["-w+all"] + select({
    "@platforms//os:windows": ["-fwin64"],
    "@platforms//os:macos": ["-fmacho64"],
    "//conditions:default": ["-felf64"],
})

cc_library(
    name = "libaom",
    hdrs = LIBAOM_HEADERS,
    visibility = ["//visibility:public"],
    deps = [
        ":av1",
    ],
)

# AV1 section
AV1_SRCS = [
    "av1/arg_defs.c",
    "av1/av1_cx_iface.c",
    "av1/av1_dx_iface.c",
    "av1/common/alloccommon.c",
    "av1/common/av1_inv_txfm1d.c",
    "av1/common/av1_inv_txfm2d.c",
    "av1/common/av1_loopfilter.c",
    "av1/common/av1_rtcd.c",
    "av1/common/av1_txfm.c",
    "av1/common/blockd.c",
    "av1/common/cdef.c",
    "av1/common/cdef_block.c",
    "av1/common/cfl.c",
    "av1/common/convolve.c",
    "av1/common/debugmodes.c",
    "av1/common/entropy.c",
    "av1/common/entropymode.c",
    "av1/common/entropymv.c",
    "av1/common/frame_buffers.c",
    "av1/common/idct.c",
    "av1/common/mvref_common.c",
    "av1/common/obu_util.c",
    # "av1/common/ppc/cfl_ppc.c",
    "av1/common/pred_common.c",
    "av1/common/quant_common.c",
    "av1/common/reconinter.c",
    "av1/common/reconintra.c",
    "av1/common/resize.c",
    "av1/common/restoration.c",
    "av1/common/scale.c",
    "av1/common/scan.c",
    "av1/common/seg_common.c",
    "av1/common/thread_common.c",
    "av1/common/tile_common.c",
    "av1/common/timing.c",
    "av1/common/txb_common.c",
    "av1/common/warped_motion.c",
    "av1/decoder/accounting.c",
    "av1/decoder/decodeframe.c",
    "av1/decoder/decodemv.c",
    "av1/decoder/decoder.c",
    "av1/decoder/decodetxb.c",
    "av1/decoder/detokenize.c",
    # "av1/decoder/inspection.c",
    "av1/decoder/obu.c",
    "av1/encoder/allintra_vis.c",
    "av1/encoder/aq_complexity.c",
    "av1/encoder/aq_cyclicrefresh.c",
    "av1/encoder/aq_variance.c",
    "av1/encoder/av1_fwd_txfm1d.c",
    "av1/encoder/av1_fwd_txfm2d.c",
    "av1/encoder/av1_noise_estimate.c",
    "av1/encoder/av1_quantize.c",
    # "av1/encoder/av1_temporal_denoiser.c",
    "av1/encoder/bitstream.c",
    "av1/encoder/blockiness.c",
    "av1/encoder/cnn.c",
    "av1/encoder/compound_type.c",
    "av1/encoder/context_tree.c",
    "av1/encoder/corner_detect.c",
    "av1/encoder/corner_match.c",
    "av1/encoder/cost.c",
    "av1/encoder/dwt.c",
    "av1/encoder/encode_strategy.c",
    "av1/encoder/encodeframe.c",
    "av1/encoder/encodeframe_utils.c",
    "av1/encoder/encodemb.c",
    "av1/encoder/encodemv.c",
    "av1/encoder/encoder.c",
    "av1/encoder/encoder_utils.c",
    "av1/encoder/encodetxb.c",
    "av1/encoder/ethread.c",
    "av1/encoder/extend.c",
    "av1/encoder/external_partition.c",
    "av1/encoder/firstpass.c",
    "av1/encoder/global_motion.c",
    "av1/encoder/global_motion_facade.c",
    "av1/encoder/gop_structure.c",
    "av1/encoder/hash.c",
    "av1/encoder/hash_motion.c",
    "av1/encoder/hybrid_fwd_txfm.c",
    "av1/encoder/interp_search.c",
    "av1/encoder/intra_mode_search.c",
    "av1/encoder/level.c",
    "av1/encoder/lookahead.c",
    "av1/encoder/mcomp.c",
    "av1/encoder/ml.c",
    "av1/encoder/motion_search_facade.c",
    "av1/encoder/mv_prec.c",
    "av1/encoder/nonrd_pickmode.c",
    "av1/encoder/optical_flow.c",
    "av1/encoder/palette.c",
    "av1/encoder/partition_search.c",
    "av1/encoder/partition_strategy.c",
    "av1/encoder/pass2_strategy.c",
    "av1/encoder/pickcdef.c",
    "av1/encoder/picklpf.c",
    "av1/encoder/pickrst.c",
    "av1/encoder/ransac.c",
    "av1/encoder/ratectrl.c",
    "av1/encoder/rd.c",
    "av1/encoder/rdopt.c",
    "av1/encoder/reconinter_enc.c",
    "av1/encoder/segmentation.c",
    "av1/encoder/sparse_linear_solver.c",
    "av1/encoder/speed_features.c",
    "av1/encoder/superres_scale.c",
    "av1/encoder/svc_layercontext.c",
    "av1/encoder/temporal_filter.c",
    "av1/encoder/thirdpass.c",
    "av1/encoder/tokenize.c",
    "av1/encoder/tpl_model.c",
    # "av1/encoder/tune_butteraugli.c",
    # "av1/encoder/tune_vmaf.c",
    "av1/encoder/tx_search.c",
    "av1/encoder/txb_rdopt.c",
    "av1/encoder/var_based_part.c",
    "av1/encoder/wedge_utils.c",
] + select({
    ":arm64": [
        "av1/encoder/arm/neon/ml_neon.c",
        "av1/encoder/arm/neon/rdopt_neon.c",
        "av1/encoder/arm/neon/quantize_neon.c",
        "av1/encoder/arm/neon/av1_fwd_txfm2d_neon.c",
        "av1/encoder/arm/neon/picksrt_neon.c",
        # "av1/encoder/arm/neon/av1_temporal_denoiser_neon.c",
        "av1/encoder/arm/neon/hybrid_fwd_txfm_neon.c",
        "av1/encoder/arm/neon/highbd_fwd_txfm_neon.c",
        "av1/encoder/arm/neon/av1_error_neon.c",
        "av1/encoder/arm/neon/encodetxb_neon.c",
        "av1/common/arm/av1_txfm_neon.c",
        "av1/common/arm/blend_a64_vmask_neon.c",
        "av1/common/arm/blend_a64_hmask_neon.c",
        "av1/common/arm/cfl_neon.c",
        "av1/common/arm/av1_inv_txfm_neon.c",
        "av1/common/arm/wiener_convolve_neon.c",
        "av1/common/arm/reconinter_neon.c",
        "av1/common/arm/warp_plane_neon.c",
        "av1/common/arm/convolve_neon.c",
        "av1/common/arm/resize_neon.c",
        "av1/common/arm/jnt_convolve_neon.c",
        "av1/common/arm/selfguided_neon.c",
        "av1/common/arm/reconintra_neon.c",
        "av1/common/arm/highbd_inv_txfm_neon.c",
        "av1/common/cdef_block_neon.c",
    ],
    "//conditions:default": [],
})

AV1_SRCS_SSE = [
    "av1/common/cdef_block_sse2.c",
    "av1/common/cdef_block_sse4.c",
    "av1/common/cdef_block_ssse3.c",
    "av1/common/x86/highbd_inv_txfm_sse4.c",
    "av1/common/x86/wiener_convolve_sse2.c",
    "av1/common/x86/av1_convolve_horiz_rs_sse4.c",
    "av1/common/x86/resize_ssse3.c",
    "av1/common/x86/av1_inv_txfm_ssse3.c",
    "av1/common/x86/cfl_sse2.c",
    "av1/common/x86/selfguided_sse4.c",
    "av1/common/x86/cfl_ssse3.c",
    "av1/common/x86/jnt_convolve_ssse3.c",
    "av1/common/x86/warp_plane_sse4.c",
    "av1/common/x86/highbd_convolve_2d_ssse3.c",
    "av1/common/x86/highbd_jnt_convolve_sse4.c",
    "av1/common/x86/reconinter_ssse3.c",
    "av1/common/x86/reconinter_sse4.c",
    "av1/common/x86/highbd_warp_plane_sse4.c",
    "av1/common/x86/jnt_convolve_sse2.c",
    "av1/common/x86/intra_edge_sse4.c",
    "av1/common/x86/highbd_wiener_convolve_ssse3.c",
    "av1/common/x86/av1_convolve_scale_sse4.c",
    "av1/common/x86/convolve_sse2.c",
    "av1/common/x86/filterintra_sse4.c",
    "av1/common/x86/highbd_convolve_2d_sse4.c",
    "av1/common/x86/convolve_2d_sse2.c",
    "av1/common/x86/av1_txfm_sse4.c",
    "av1/common/x86/warp_plane_sse2.c",
    "av1/encoder/x86/av1_fwd_txfm_sse2.c",
    "av1/encoder/x86/av1_highbd_quantize_sse4.c",
    "av1/encoder/x86/encodetxb_sse4.c",
    "av1/encoder/x86/reconinter_enc_ssse3.c",
    "av1/encoder/x86/highbd_fwd_txfm_sse4.c",
    "av1/encoder/x86/wedge_utils_sse2.c",
    "av1/encoder/x86/reconinter_enc_sse2.c",
    "av1/encoder/x86/corner_match_sse4.c",
    "av1/encoder/x86/pickrst_sse4.c",
    "av1/encoder/x86/temporal_filter_sse2.c",
    "av1/encoder/x86/av1_fwd_txfm1d_sse4.c",
    "av1/encoder/x86/encodetxb_sse2.c",
    "av1/encoder/x86/av1_k_means_sse2.c",
    "av1/encoder/x86/av1_quantize_sse2.c",
    "av1/encoder/x86/ml_sse3.c",
    "av1/encoder/x86/av1_fwd_txfm2d_sse4.c",
    "av1/encoder/x86/highbd_block_error_intrin_sse2.c",
    "av1/encoder/x86/hash_sse42.c",
    # "av1/encoder/x86/av1_temporal_denoiser_sse2.c",
    "av1/encoder/x86/rdopt_sse4.c",
    "av1/encoder/x86/highbd_temporal_filter_sse2.c",
]

AV1_SRCS_AVX2 = [
    "av1/common/cdef_block_avx2.c",
    "av1/common/x86/highbd_convolve_2d_avx2.c",
    "av1/common/x86/av1_inv_txfm_avx2.c",
    "av1/common/x86/cfl_avx2.c",
    "av1/common/x86/reconinter_avx2.c",
    "av1/common/x86/highbd_warp_affine_avx2.c",
    "av1/common/x86/wiener_convolve_avx2.c",
    "av1/common/x86/warp_plane_avx2.c",
    "av1/common/x86/convolve_2d_avx2.c",
    "av1/common/x86/highbd_jnt_convolve_avx2.c",
    "av1/common/x86/convolve_avx2.c",
    "av1/common/x86/selfguided_avx2.c",
    "av1/common/x86/jnt_convolve_avx2.c",
    "av1/common/x86/highbd_wiener_convolve_avx2.c",
    "av1/common/x86/highbd_inv_txfm_avx2.c",
    "av1/encoder/x86/rdopt_avx2.c",
    "av1/encoder/x86/temporal_filter_avx2.c",
    "av1/encoder/x86/av1_fwd_txfm2d_avx2.c",
    "av1/encoder/x86/error_intrin_avx2.c",
    "av1/encoder/x86/cnn_avx2.c",
    "av1/encoder/x86/wedge_utils_avx2.c",
    "av1/encoder/x86/highbd_temporal_filter_avx2.c",
    "av1/encoder/x86/highbd_block_error_intrin_avx2.c",
    "av1/encoder/x86/pickrst_avx2.c",
    "av1/encoder/x86/corner_match_avx2.c",
    "av1/encoder/x86/highbd_fwd_txfm_avx2.c",
    "av1/encoder/x86/av1_quantize_avx2.c",
    "av1/encoder/x86/av1_highbd_quantize_avx2.c",
    "av1/encoder/x86/av1_k_means_avx2.c",
    "av1/encoder/x86/encodetxb_avx2.c",
]

AV1_ASM = [
    "av1/encoder/x86/av1_quantize_ssse3_x86_64.asm",
    "av1/encoder/x86/dct_sse2.asm",
    "av1/encoder/x86/av1_ssim_opt_x86_64.asm",
    "av1/encoder/x86/error_sse2.asm",
]

cc_library(
    name = "av1",
    srcs = AV1_SRCS,
    copts = LIBAOM_COPTS,
    linkstatic = 1,
    textual_hdrs = LIBAOM_HEADERS,
    deps = [
        ":codec",
        ":dsp",
        ":mem",
        ":scale",
        ":config",
        ":fastfeat",
        ":vector",
        ":args_helper",
    ] + select({
        ":arm64": [],
        "//conditions:default": [
            ":av1_x86_asm",
            ":av1_x86_sse",
            ":av1_x86_avx2",
        ],
    }),
    alwayslink = 1,
)

nasm_library(
    name = "av1_x86_asm",
    srcs = AV1_ASM,
    flags = NASM_FLAGS,
    includes = NASM_INCLUDES,
    alwayslink = 1,
)

cc_library(
    name = "av1_x86_sse",
    srcs = AV1_SRCS_SSE,
    copts = LIBAOM_COPTS + select({
        ":compiler_msvc": [
            # Set up /arch:SSE4.2, which does not exist.
            "-D__SSE__",
            "-D__SSE2__",
            "-D__SSE3__",
            "-D__SSSE3__",
            "-D__SSE4_1__",
            "-D__SSE4_2__",
        ],
        "//conditions:default": ["-msse4.2"],
    }),
    textual_hdrs = LIBAOM_HEADERS,
    deps = [
        ":config",
        ":vector",
    ],
    alwayslink = 1,
)

cc_library(
    name = "av1_x86_avx2",
    srcs = AV1_SRCS_AVX2,
    copts = LIBAOM_COPTS + select({
        ":compiler_msvc": ["/arch:AVX2"],
        "//conditions:default": ["-mavx2"],
    }),
    textual_hdrs = LIBAOM_HEADERS,
    deps = [
        ":config",
        ":vector",
    ],
    alwayslink = 1,
)

# DSP section
DSP_SRCS = [
    "aom_dsp/aom_convolve.c",
    "aom_dsp/aom_dsp_rtcd.c",
    "aom_dsp/avg.c",
    "aom_dsp/binary_codes_reader.c",
    "aom_dsp/binary_codes_writer.c",
    "aom_dsp/bitreader.c",
    "aom_dsp/bitreader_buffer.c",
    "aom_dsp/bitwriter.c",
    "aom_dsp/bitwriter_buffer.c",
    "aom_dsp/blend_a64_hmask.c",
    "aom_dsp/blend_a64_mask.c",
    "aom_dsp/blend_a64_vmask.c",
    "aom_dsp/blk_sse_sum.c",
    # "aom_dsp/butteraugli.c",
    "aom_dsp/entcode.c",
    "aom_dsp/entdec.c",
    "aom_dsp/entenc.c",
    "aom_dsp/fastssim.c",
    "aom_dsp/fft.c",
    "aom_dsp/fwd_txfm.c",
    "aom_dsp/grain_synthesis.c",
    "aom_dsp/grain_table.c",
    "aom_dsp/intrapred.c",
    "aom_dsp/loopfilter.c",
    "aom_dsp/noise_model.c",
    "aom_dsp/noise_util.c",
    "aom_dsp/odintrin.c",
    "aom_dsp/psnr.c",
    "aom_dsp/psnrhvs.c",
    "aom_dsp/quantize.c",
    "aom_dsp/sad.c",
    "aom_dsp/sad_av1.c",
    "aom_dsp/sse.c",
    "aom_dsp/ssim.c",
    "aom_dsp/subtract.c",
    "aom_dsp/sum_squares.c",
    "aom_dsp/variance.c",
    # "aom_dsp/vmaf.c",
    "aom_dsp/x86/aom_asm_stubs.c",
] + select({
    ":arm64": [
        "aom_dsp/arm/aom_convolve_copy_neon.c",
        "aom_dsp/arm/avg_neon.c",
        "aom_dsp/arm/blend_a64_mask_neon.c",
        "aom_dsp/arm/fwd_txfm_neon.c",
        "aom_dsp/arm/hadamard_neon.c",
        "aom_dsp/arm/intrapred_neon.c",
        "aom_dsp/arm/loopfilter_neon.c",
        "aom_dsp/arm/sad4d_neon.c",
        "aom_dsp/arm/sad_neon.c",
        "aom_dsp/arm/sse_neon.c",
        "aom_dsp/arm/subpel_variance_neon.c",
        "aom_dsp/arm/subtract_neon.c",
        "aom_dsp/arm/sum_squares_neon.c",
        "aom_dsp/arm/variance_neon.c",
    ],
    "//conditions:default": [],
})

DSP_SRCS_SSE = [
    "aom_dsp/x86/adaptive_quantize_sse2.c",
    "aom_dsp/x86/aom_convolve_copy_sse2.c",
    "aom_dsp/x86/aom_subpixel_8t_intrin_sse2.c",
    "aom_dsp/x86/aom_subpixel_8t_intrin_ssse3.c",
    "aom_dsp/x86/avg_intrin_sse2.c",
    "aom_dsp/x86/blend_a64_hmask_sse4.c",
    "aom_dsp/x86/blend_a64_mask_sse4.c",
    "aom_dsp/x86/blend_a64_vmask_sse4.c",
    "aom_dsp/x86/blk_sse_sum_sse2.c",
    "aom_dsp/x86/fft_sse2.c",
    "aom_dsp/x86/fwd_txfm_sse2.c",
    "aom_dsp/x86/highbd_adaptive_quantize_sse2.c",
    "aom_dsp/x86/highbd_convolve_sse2.c",
    "aom_dsp/x86/highbd_convolve_ssse3.c",
    "aom_dsp/x86/highbd_intrapred_sse2.c",
    "aom_dsp/x86/highbd_loopfilter_sse2.c",
    "aom_dsp/x86/highbd_quantize_intrin_sse2.c",
    "aom_dsp/x86/highbd_subtract_sse2.c",
    "aom_dsp/x86/highbd_variance_sse2.c",
    "aom_dsp/x86/highbd_variance_sse4.c",
    "aom_dsp/x86/intrapred_sse2.c",
    "aom_dsp/x86/intrapred_ssse3.c",
    "aom_dsp/x86/jnt_sad_ssse3.c",
    "aom_dsp/x86/jnt_variance_ssse3.c",
    "aom_dsp/x86/loopfilter_sse2.c",
    "aom_dsp/x86/masked_sad4d_ssse3.c",
    "aom_dsp/x86/masked_sad_intrin_ssse3.c",
    "aom_dsp/x86/masked_variance_intrin_ssse3.c",
    "aom_dsp/x86/obmc_sad_sse4.c",
    "aom_dsp/x86/obmc_variance_sse4.c",
    "aom_dsp/x86/quantize_sse2.c",
    "aom_dsp/x86/quantize_ssse3.c",
    "aom_dsp/x86/sse_sse4.c",
    "aom_dsp/x86/sum_squares_sse2.c",
    "aom_dsp/x86/variance_impl_ssse3.c",
    "aom_dsp/x86/variance_sse2.c",
]

DSP_SRCS_AVX = [
    "aom_dsp/x86/aom_quantize_avx.c",
]

DSP_SRCS_AVX2 = [
    "aom_dsp/x86/adaptive_quantize_avx2.c",
    "aom_dsp/x86/aom_convolve_copy_avx2.c",
    "aom_dsp/x86/aom_subpixel_8t_intrin_avx2.c",
    "aom_dsp/x86/avg_intrin_avx2.c",
    "aom_dsp/x86/blend_a64_mask_avx2.c",
    "aom_dsp/x86/blk_sse_sum_avx2.c",
    "aom_dsp/x86/fft_avx2.c",
    "aom_dsp/x86/highbd_adaptive_quantize_avx2.c",
    "aom_dsp/x86/highbd_convolve_avx2.c",
    "aom_dsp/x86/highbd_loopfilter_avx2.c",
    "aom_dsp/x86/highbd_quantize_intrin_avx2.c",
    "aom_dsp/x86/highbd_variance_avx2.c",
    "aom_dsp/x86/intrapred_avx2.c",
    "aom_dsp/x86/masked_sad_intrin_avx2.c",
    "aom_dsp/x86/obmc_sad_avx2.c",
    "aom_dsp/x86/obmc_variance_avx2.c",
    "aom_dsp/x86/sad4d_avx2.c",
    "aom_dsp/x86/sad_avx2.c",
    "aom_dsp/x86/sad_highbd_avx2.c",
    "aom_dsp/x86/sad_impl_avx2.c",
    "aom_dsp/x86/sse_avx2.c",
    "aom_dsp/x86/subtract_avx2.c",
    "aom_dsp/x86/sum_squares_avx2.c",
    "aom_dsp/x86/variance_avx2.c",
    "aom_dsp/x86/variance_impl_avx2.c",
]

DSP_ASM = [
    "aom_dsp/x86/aom_high_subpixel_8t_sse2.asm",
    "aom_dsp/x86/aom_high_subpixel_bilinear_sse2.asm",
    "aom_dsp/x86/aom_subpixel_8t_sse2.asm",
    "aom_dsp/x86/aom_subpixel_8t_ssse3.asm",
    "aom_dsp/x86/aom_subpixel_bilinear_sse2.asm",
    "aom_dsp/x86/aom_subpixel_bilinear_ssse3.asm",
    "aom_dsp/x86/fwd_txfm_ssse3_x86_64.asm",
    "aom_dsp/x86/highbd_intrapred_asm_sse2.asm",
    "aom_dsp/x86/highbd_sad4d_sse2.asm",
    "aom_dsp/x86/highbd_sad_sse2.asm",
    "aom_dsp/x86/highbd_subpel_variance_impl_sse2.asm",
    "aom_dsp/x86/highbd_variance_impl_sse2.asm",
    "aom_dsp/x86/intrapred_asm_sse2.asm",
    "aom_dsp/x86/inv_wht_sse2.asm",
    "aom_dsp/x86/quantize_ssse3_x86_64.asm",
    "aom_dsp/x86/sad4d_sse2.asm",
    "aom_dsp/x86/sad_sse2.asm",
    "aom_dsp/x86/ssim_sse2_x86_64.asm",
    "aom_dsp/x86/subpel_variance_sse2.asm",
    "aom_dsp/x86/subtract_sse2.asm",
]

cc_library(
    name = "dsp",
    srcs = DSP_SRCS,
    copts = LIBAOM_COPTS,
    textual_hdrs = LIBAOM_HEADERS,
    deps = [
        ":config",
    ] + select({
        ":arm64": [],
        "//conditions:default": [
            ":dsp_x86_asm",
            ":dsp_x86_avx2",
            ":dsp_x86_avx",
            ":dsp_x86_sse",
        ],
    }),
    alwayslink = 1,
)

nasm_library(
    name = "dsp_x86_asm",
    srcs = DSP_ASM,
    flags = NASM_FLAGS,
    includes = NASM_INCLUDES,
    alwayslink = 1,
)

cc_library(
    name = "dsp_x86_sse",
    srcs = DSP_SRCS_SSE,
    copts = LIBAOM_COPTS + select({
        ":compiler_msvc": [
            # Set up /arch:SSE4.1, which does not exist.
            "-D__SSE__",
            "-D__SSE2__",
            "-D__SSE3__",
            "-D__SSSE3__",
            "-D__SSE4_1__",
        ],
        "//conditions:default": ["-msse4.1"],
    }),
    textual_hdrs = LIBAOM_HEADERS,
    deps = [":config"],
    alwayslink = 1,
)

cc_library(
    name = "dsp_x86_avx",
    srcs = DSP_SRCS_AVX,
    copts = LIBAOM_COPTS + select({
        ":compiler_msvc": ["/arch:AVX"],
        "//conditions:default": ["-mavx"],
    }),
    textual_hdrs = LIBAOM_HEADERS,
    deps = [":config"],
    alwayslink = 1,
)

cc_library(
    name = "dsp_x86_avx2",
    srcs = DSP_SRCS_AVX2,
    copts = LIBAOM_COPTS + select({
        ":compiler_msvc": ["/arch:AVX2"],
        "//conditions:default": ["-mavx2"],
    }),
    textual_hdrs = LIBAOM_HEADERS,
    deps = [":config"],
    alwayslink = 1,
)

# Other
SCALE_SRCS = [
    "aom_scale/aom_scale_rtcd.c",
    "aom_scale/generic/aom_scale.c",
    "aom_scale/generic/gen_scalers.c",
    "aom_scale/generic/yv12config.c",
    "aom_scale/generic/yv12extend.c",
]

SCALE_HDRS = [
    "aom_scale/aom_scale.h",
]

cc_library(
    name = "scale",
    srcs = SCALE_SRCS,
    hdrs = SCALE_HDRS,
    copts = LIBAOM_COPTS,
    textual_hdrs = LIBAOM_HEADERS,
    deps = [
        ":config",
        ":mem",
    ],
    alwayslink = 1,
)

CODEC_SRCS = [
    "config/aom_config.c",
    "aom/src/aom_codec.c",
    "aom/src/aom_decoder.c",
    "aom/src/aom_encoder.c",
    "aom/src/aom_image.c",
    "aom/src/aom_integer.c",
    "aom_util/aom_thread.c",
    "aom_util/debug_util.c",
] + select({
    ":arm64": [
        "aom_ports/arm_cpudetect.c",
    ],
    "//conditions:default": [],
})

CODEC_HDRS = [
    "aom/aom.h",
    "aom/aom_codec.h",
    "aom/aom_decoder.h",
    "aom/aom_encoder.h",
    "aom/aom_external_partition.h",
    "aom/aom_frame_buffer.h",
    "aom/aom_image.h",
    "aom/aom_integer.h",
    "aom/aomcx.h",
    "aom/aomdx.h",
    "aom/internal/aom_codec_internal.h",
    "aom/internal/aom_image_internal.h",
    "aom_util/aom_thread.h",
    "aom_util/debug_util.h",
] + select({
    ":arm64": [
        "aom_ports/arm.h",
    ],
    "//conditions:default": [],
})

cc_library(
    name = "codec",
    srcs = CODEC_SRCS,
    hdrs = CODEC_HDRS,
    copts = LIBAOM_COPTS,
    includes = ["aom"],
    textual_hdrs = LIBAOM_HEADERS,
    deps = [
        ":mem",
        ":config",
        ":args_helper",
    ] + select({
        ":arm64": [],
        "//conditions:default": [
            ":codec_x86_asm",
        ],
    }),
    alwayslink = 1,
)

nasm_library(
    name = "codec_x86_asm",
    srcs = [
        "aom_ports/float.asm",
    ],
    flags = NASM_FLAGS,
    includes = NASM_INCLUDES,
    alwayslink = 1,
)

cc_library(
    name = "mem",
    srcs = [
        "aom/aom_integer.h",
        "aom_mem/aom_mem.c",
        "aom_mem/include/aom_mem_intrnl.h",
    ],
    hdrs = [
        "aom_mem/aom_mem.h",
    ],
    copts = LIBAOM_COPTS,
    includes = ["aom_mem"],
    deps = [":config"],
    alwayslink = 1,
)

cc_library(
    name = "args_helper",
    srcs = [
        "common/args_helper.c",
    ],
    hdrs = ["common/args_helper.h"],
    copts = LIBAOM_COPTS,
    textual_hdrs = LIBAOM_HEADERS,
    deps = [":config"],
    alwayslink = 1,
)

# Utils

cc_library(
    name = "fastfeat",
    srcs = [
        "third_party/fastfeat/fast.c",
        "third_party/fastfeat/fast_9.c",
        "third_party/fastfeat/nonmax.c",
    ],
    hdrs = [
        "third_party/fastfeat/fast.h",
    ],
    copts = LIBAOM_COPTS,
)

cc_library(
    name = "vector",
    srcs = [
        "third_party/vector/vector.c",
    ],
    hdrs = [
        "third_party/vector/vector.h",
    ],
    copts = LIBAOM_COPTS,
)

# Config section

cc_library(
    name = "config",
    hdrs = [
        "config/aom_config.h",
        "config/aom_dsp_rtcd.h",
        "config/aom_scale_rtcd.h",
        "config/aom_version.h",
        "config/av1_rtcd.h",
    ],
    #    deps = [":aom_dsp_rtcd", ":aom_scale_rtcd", ":av1_rtcd"],
)

CONFIG_SUBSTITUTIONS = select({
    ":arm64": {
        "${ARM64}": "1",
        "${X86_64}": "0",
        "${PTHREAD}": "1",
    },
    "@platforms//os:windows": {
        "${ARM64}": "0",
        "${X86_64}": "1",
        "${PTHREAD}": "0",
    },
    "//conditions:default": {
        "${ARM64}": "0",
        "${X86_64}": "1",
        "${PTHREAD}": "1",
    },
})

expand_template(
    name = "config_h_tmpl",
    out = "config/aom_config.h",
    substitutions = CONFIG_SUBSTITUTIONS,
    template = "@com_google_tensorstore//third_party:org_aomedia_aom/aom_config.h.template",
)

expand_template(
    name = "config_asm_tmpl",
    out = "config/aom_config.asm",
    substitutions = CONFIG_SUBSTITUTIONS,
    template = "@com_google_tensorstore//third_party:org_aomedia_aom/aom_config.asm.template",
)

expand_template(
    name = "config_version_tmpl",
    out = "config/aom_version.h",
    substitutions = CONFIG_SUBSTITUTIONS,
    template = "@com_google_tensorstore//third_party:org_aomedia_aom/aom_version.h.template",
)

write_file(
    name = "config_c_tmpl",
    out = "config/aom_config.c",
    content = [
        "/*",
        " * Copyright (c) 2016, Alliance for Open Media. All rights reserved",
        " *",
        " * This source code is subject to the terms of the BSD 2 Clause License and",
        " * the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License",
        " * was not distributed with this source code in the LICENSE file, you can",
        " * obtain it at www.aomedia.org/license/software. If the Alliance for Open",
        " * Media Patent License 1.0 was not distributed with this source code in the",
        " * PATENTS file, you can obtain it at www.aomedia.org/license/patent.",
        " */",
        "#include \"aom/aom_codec.h\"",
        "static const char* const cfg = \"bazel build @org_aomedia_aom//:all\";",
        "const char *aom_codec_build_config(void) {return cfg;}",
        "",
    ],
    newline = "unix",
)

# Uses the rtcd.pl tool to build the config .h files required by libaom.
#
# Note: Find a more elegant way to build per-architecture config
# Note: Depends on perl.

RTCD_CMD = select({
    ":arm64": (
        "$(PERL) $(location build/cmake/rtcd.pl) --arch=arm "
    ),
    "//conditions:default": (
        "$(PERL) $(location build/cmake/rtcd.pl) --arch=x86_64 "
    ),
})

[
    genrule(
        name = tag,
        srcs = [
            "build/cmake/rtcd.pl",
            "config/aom_config.h",
            script,
        ],
        outs = ["config/{file}.h".format(file = tag)],
        cmd = (RTCD_CMD + " ".join([
            "--config=$(location config/aom_config.h)",
            "--sym={sym} $(location {script})".format(
                sym = tag,
                script = script,
            ),
            "> $(OUTS)",
        ])),
        message = "RTCD {tag}".format(tag = tag),
        toolchains = ["@rules_perl//:current_toolchain"],
    )
    for tag, script in [
        ("aom_dsp_rtcd", "aom_dsp/aom_dsp_rtcd_defs.pl"),
        ("aom_scale_rtcd", "aom_scale/aom_scale_rtcd.pl"),
        ("av1_rtcd", "av1/common/av1_rtcd_defs.pl"),
    ]
]

# Config settings
[
    alias(
        name = name,
        actual = "@com_google_tensorstore//:{target}".format(target = name),
    )
    for name in [
        "compiler_msvc",
        "compiler_clang",
        "arm64",
    ]
]
